/*global define */
define([], function () {
    var SparqlParser = {};

    SparqlParser.parser = (function(){
        /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */

        var result = {
            /*
             * Parses the input with a generated parser. If the parsing is successfull,
             * returns a value explicitly or implicitly specified by the grammar from
             * which the parser was generated (see |PEG.buildParser|). If the parsing is
             * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
             */
            parse: function(input, startRule) {
                var parseFunctions = {
                    "ANON": parse_ANON,
                    "AdditiveExpression": parse_AdditiveExpression,
                    "Aggregate": parse_Aggregate,
                    "ArgList": parse_ArgList,
                    "AskQuery": parse_AskQuery,
                    "BLANK_NODE_LABEL": parse_BLANK_NODE_LABEL,
                    "BaseDecl": parse_BaseDecl,
                    "BindingValue": parse_BindingValue,
                    "BindingsClause": parse_BindingsClause,
                    "BlankNode": parse_BlankNode,
                    "BlankNodePropertyList": parse_BlankNodePropertyList,
                    "BooleanLiteral": parse_BooleanLiteral,
                    "BrackettedExpression": parse_BrackettedExpression,
                    "BuiltInCall": parse_BuiltInCall,
                    "COMMENT": parse_COMMENT,
                    "Clear": parse_Clear,
                    "Collection": parse_Collection,
                    "ConditionalAndExpression": parse_ConditionalAndExpression,
                    "ConditionalOrExpression": parse_ConditionalOrExpression,
                    "Constraint": parse_Constraint,
                    "ConstructQuery": parse_ConstructQuery,
                    "ConstructTemplate": parse_ConstructTemplate,
                    "ConstructTriples": parse_ConstructTriples,
                    "Create": parse_Create,
                    "DECIMAL": parse_DECIMAL,
                    "DECIMAL_NEGATIVE": parse_DECIMAL_NEGATIVE,
                    "DECIMAL_POSITIVE": parse_DECIMAL_POSITIVE,
                    "DOUBLE": parse_DOUBLE,
                    "DOUBLE_NEGATIVE": parse_DOUBLE_NEGATIVE,
                    "DOUBLE_POSITIVE": parse_DOUBLE_POSITIVE,
                    "DatasetClause": parse_DatasetClause,
                    "DefaultGraphClause": parse_DefaultGraphClause,
                    "DeleteClause": parse_DeleteClause,
                    "DeleteData": parse_DeleteData,
                    "DeleteWhere": parse_DeleteWhere,
                    "DescribeQuery": parse_DescribeQuery,
                    "Drop": parse_Drop,
                    "ECHAR": parse_ECHAR,
                    "EXPONENT": parse_EXPONENT,
                    "ExistsFunc": parse_ExistsFunc,
                    "ExpressionList": parse_ExpressionList,
                    "Filter": parse_Filter,
                    "FunctionCall": parse_FunctionCall,
                    "GraphGraphPattern": parse_GraphGraphPattern,
                    "GraphNode": parse_GraphNode,
                    "GraphPatternNotTriples": parse_GraphPatternNotTriples,
                    "GraphRef": parse_GraphRef,
                    "GraphRefAll": parse_GraphRefAll,
                    "GraphTerm": parse_GraphTerm,
                    "GroupClause": parse_GroupClause,
                    "GroupCondition": parse_GroupCondition,
                    "GroupGraphPattern": parse_GroupGraphPattern,
                    "GroupGraphPatternSub": parse_GroupGraphPatternSub,
                    "GroupOrUnionGraphPattern": parse_GroupOrUnionGraphPattern,
                    "HavingClause": parse_HavingClause,
                    "INTEGER": parse_INTEGER,
                    "INTEGER_NEGATIVE": parse_INTEGER_NEGATIVE,
                    "INTEGER_POSITIVE": parse_INTEGER_POSITIVE,
                    "IRI_REF": parse_IRI_REF,
                    "IRIref": parse_IRIref,
                    "IRIrefOrFunction": parse_IRIrefOrFunction,
                    "InsertClause": parse_InsertClause,
                    "InsertData": parse_InsertData,
                    "LANGTAG": parse_LANGTAG,
                    "LimitClause": parse_LimitClause,
                    "LimitOffsetClauses": parse_LimitOffsetClauses,
                    "Load": parse_Load,
                    "MinusGraphPattern": parse_MinusGraphPattern,
                    "Modify": parse_Modify,
                    "MultiplicativeExpression": parse_MultiplicativeExpression,
                    "NIL": parse_NIL,
                    "NamedGraphClause": parse_NamedGraphClause,
                    "NotExistsFunc": parse_NotExistsFunc,
                    "NumericLiteral": parse_NumericLiteral,
                    "NumericLiteralNegative": parse_NumericLiteralNegative,
                    "NumericLiteralPositive": parse_NumericLiteralPositive,
                    "NumericLiteralUnsigned": parse_NumericLiteralUnsigned,
                    "ObjectList": parse_ObjectList,
                    "OffsetClause": parse_OffsetClause,
                    "OptionalGraphPattern": parse_OptionalGraphPattern,
                    "OrderClause": parse_OrderClause,
                    "OrderCondition": parse_OrderCondition,
                    "PNAME_LN": parse_PNAME_LN,
                    "PNAME_NS": parse_PNAME_NS,
                    "PN_CHARS": parse_PN_CHARS,
                    "PN_CHARS_BASE": parse_PN_CHARS_BASE,
                    "PN_CHARS_U": parse_PN_CHARS_U,
                    "PN_LOCAL": parse_PN_LOCAL,
                    "PN_PREFIX": parse_PN_PREFIX,
                    "PathAlternative": parse_PathAlternative,
                    "PathElt": parse_PathElt,
                    "PathEltOrInverse": parse_PathEltOrInverse,
                    "PathMod": parse_PathMod,
                    "PathNegatedPropertySet": parse_PathNegatedPropertySet,
                    "PathOneInPropertySet": parse_PathOneInPropertySet,
                    "PathPrimary": parse_PathPrimary,
                    "PathSequence": parse_PathSequence,
                    "PrefixDecl": parse_PrefixDecl,
                    "PrefixedName": parse_PrefixedName,
                    "PrimaryExpression": parse_PrimaryExpression,
                    "Prologue": parse_Prologue,
                    "PropertyList": parse_PropertyList,
                    "PropertyListNotEmpty": parse_PropertyListNotEmpty,
                    "PropertyListNotEmptyPath": parse_PropertyListNotEmptyPath,
                    "PropertyListPath": parse_PropertyListPath,
                    "QuadData": parse_QuadData,
                    "QuadPattern": parse_QuadPattern,
                    "Quads": parse_Quads,
                    "QuadsNotTriples": parse_QuadsNotTriples,
                    "Query": parse_Query,
                    "RDFLiteral": parse_RDFLiteral,
                    "RegexExpression": parse_RegexExpression,
                    "RelationalExpression": parse_RelationalExpression,
                    "SPARQL": parse_SPARQL,
                    "STRING_LITERAL1": parse_STRING_LITERAL1,
                    "STRING_LITERAL2": parse_STRING_LITERAL2,
                    "STRING_LITERAL_LONG1": parse_STRING_LITERAL_LONG1,
                    "STRING_LITERAL_LONG2": parse_STRING_LITERAL_LONG2,
                    "SelectClause": parse_SelectClause,
                    "SelectQuery": parse_SelectQuery,
                    "ServiceGraphPattern": parse_ServiceGraphPattern,
                    "SolutionModifier": parse_SolutionModifier,
                    "String": parse_String,
                    "SubSelect": parse_SubSelect,
                    "TriplesBlock": parse_TriplesBlock,
                    "TriplesNode": parse_TriplesNode,
                    "TriplesSameSubject": parse_TriplesSameSubject,
                    "TriplesSameSubjectPath": parse_TriplesSameSubjectPath,
                    "TriplesTemplate": parse_TriplesTemplate,
                    "UnaryExpression": parse_UnaryExpression,
                    "Update": parse_Update,
                    "Update1": parse_Update1,
                    "UsingClause": parse_UsingClause,
                    "VAR1": parse_VAR1,
                    "VAR2": parse_VAR2,
                    "VARNAME": parse_VARNAME,
                    "Var": parse_Var,
                    "VarOrIRIref": parse_VarOrIRIref,
                    "VarOrTerm": parse_VarOrTerm,
                    "Verb": parse_Verb,
                    "VerbPath": parse_VerbPath,
                    "WS": parse_WS,
                    "WhereClause": parse_WhereClause
                };

                if (startRule !== undefined) {
                    if (parseFunctions[startRule] === undefined) {
                        throw new Error("Invalid rule name: " + quote(startRule) + ".");
                    }
                } else {
                    startRule = "SPARQL";
                }

                var pos = 0;
                var reportMatchFailures = true;
                var rightmostMatchFailuresPos = 0;
                var rightmostMatchFailuresExpected = [];
                var cache = {};

                function padLeft(input, padding, length) {
                    var result = input;

                    var padLength = length - input.length;
                    for (var i = 0; i < padLength; i++) {
                        result = padding + result;
                    }

                    return result;
                }

                function escape(ch) {
                    var charCode = ch.charCodeAt(0);

                    if (charCode <= 0xFF) {
                        var escapeChar = 'x';
                        var length = 2;
                    } else {
                        var escapeChar = 'u';
                        var length = 4;
                    }

                    return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
                }

                function quote(s) {
                    /*
                     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
                     * string literal except for the closing quote character, backslash,
                     * carriage return, line separator, paragraph separator, and line feed.
                     * Any character may appear in the form of an escape sequence.
                     */
                    return '"' + s
                        .replace(/\\/g, '\\\\')            // backslash
                        .replace(/"/g, '\\"')              // closing quote character
                        .replace(/\r/g, '\\r')             // carriage return
                        .replace(/\n/g, '\\n')             // line feed
                        .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
                        + '"';
                }

                function matchFailed(failure) {
                    if (pos < rightmostMatchFailuresPos) {
                        return;
                    }

                    if (pos > rightmostMatchFailuresPos) {
                        rightmostMatchFailuresPos = pos;
                        rightmostMatchFailuresExpected = [];
                    }

                    rightmostMatchFailuresExpected.push(failure);
                }

                function parse_SPARQL() {
                    var cacheKey = 'SPARQL@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }


                    var result2 = parse_Query();
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result1 = parse_Update();
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }



                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Query() {
                    var cacheKey = 'Query@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_Prologue();
                    if (result3 !== null) {
                        var result8 = parse_SelectQuery();
                        if (result8 !== null) {
                            var result4 = result8;
                        } else {
                            var result7 = parse_ConstructQuery();
                            if (result7 !== null) {
                                var result4 = result7;
                            } else {
                                var result6 = parse_DescribeQuery();
                                if (result6 !== null) {
                                    var result4 = result6;
                                } else {
                                    var result5 = parse_AskQuery();
                                    if (result5 !== null) {
                                        var result4 = result5;
                                    } else {
                                        var result4 = null;;
                                    };
                                };
                            };
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(p, q) {
                        return {token: 'query',
                            kind: 'query',
                            prologue: p,
                            units: [q]};
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[2] Query");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Prologue() {
                    var cacheKey = 'Prologue@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result8 = parse_BaseDecl();
                    var result3 = result8 !== null ? result8 : '';
                    if (result3 !== null) {
                        var result4 = [];
                        var result7 = parse_WS();
                        while (result7 !== null) {
                            result4.push(result7);
                            var result7 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result6 = parse_PrefixDecl();
                            while (result6 !== null) {
                                result5.push(result6);
                                var result6 = parse_PrefixDecl();
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(b, pfx) {
                        return { token: 'prologue',
                            base: b,
                            prefixes: pfx }
                    })(result1[0], result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[3] Prologue");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_BaseDecl() {
                    var cacheKey = 'BaseDecl@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result10 = parse_WS();
                    while (result10 !== null) {
                        result3.push(result10);
                        var result10 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 4) === "BASE") {
                            var result9 = "BASE";
                            pos += 4;
                        } else {
                            var result9 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"BASE\"");
                            }
                        }
                        if (result9 !== null) {
                            var result4 = result9;
                        } else {
                            if (input.substr(pos, 4) === "base") {
                                var result8 = "base";
                                pos += 4;
                            } else {
                                var result8 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"base\"");
                                }
                            }
                            if (result8 !== null) {
                                var result4 = result8;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result7 = parse_WS();
                            while (result7 !== null) {
                                result5.push(result7);
                                var result7 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_IRI_REF();
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(i) {
                        registerDefaultPrefix(i);

                        var base = {};
                        base.token = 'base';
                        base.value = i;

                        return base;
                    })(result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[4] BaseDecl");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PrefixDecl() {
                    var cacheKey = 'PrefixDecl@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result13 = parse_WS();
                    while (result13 !== null) {
                        result3.push(result13);
                        var result13 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 6) === "PREFIX") {
                            var result12 = "PREFIX";
                            pos += 6;
                        } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"PREFIX\"");
                            }
                        }
                        if (result12 !== null) {
                            var result4 = result12;
                        } else {
                            if (input.substr(pos, 6) === "prefix") {
                                var result11 = "prefix";
                                pos += 6;
                            } else {
                                var result11 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"prefix\"");
                                }
                            }
                            if (result11 !== null) {
                                var result4 = result11;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result10 = parse_WS();
                            while (result10 !== null) {
                                result5.push(result10);
                                var result10 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_PNAME_NS();
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result9 = parse_WS();
                                    while (result9 !== null) {
                                        result7.push(result9);
                                        var result9 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        var result8 = parse_IRI_REF();
                                        if (result8 !== null) {
                                            var result1 = [result3, result4, result5, result6, result7, result8];
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(p, l) {

                        registerPrefix(p,l);

                        var prefix = {};
                        prefix.token = 'prefix';
                        prefix.prefix = p;
                        prefix.local = l;

                        return prefix;
                    })(result1[3], result1[5])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[5] PrefixDecl");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_SelectQuery() {
                    var cacheKey = 'SelectQuery@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_SelectClause();
                    if (result3 !== null) {
                        var result4 = [];
                        var result16 = parse_WS();
                        while (result16 !== null) {
                            result4.push(result16);
                            var result16 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result15 = parse_DatasetClause();
                            while (result15 !== null) {
                                result5.push(result15);
                                var result15 = parse_DatasetClause();
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result14 = parse_WS();
                                while (result14 !== null) {
                                    result6.push(result14);
                                    var result14 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_WhereClause();
                                    if (result7 !== null) {
                                        var result8 = [];
                                        var result13 = parse_WS();
                                        while (result13 !== null) {
                                            result8.push(result13);
                                            var result13 = parse_WS();
                                        }
                                        if (result8 !== null) {
                                            var result9 = parse_SolutionModifier();
                                            if (result9 !== null) {
                                                var result10 = [];
                                                var result12 = parse_WS();
                                                while (result12 !== null) {
                                                    result10.push(result12);
                                                    var result12 = parse_WS();
                                                }
                                                if (result10 !== null) {
                                                    var result11 = parse_BindingsClause();
                                                    if (result11 !== null) {
                                                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                                                    } else {
                                                        var result1 = null;
                                                        pos = savedPos1;
                                                    }
                                                } else {
                                                    var result1 = null;
                                                    pos = savedPos1;
                                                }
                                            } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(s, gs, w, sm) {

                        var dataset = {'named':[], 'implicit':[]};
                        for(var i=0; i<gs.length; i++) {
                            var g = gs[i];
                            if(g.kind === 'default') {
                                dataset['implicit'].push(g.graph);
                            } else {
                                dataset['named'].push(g.graph)
                            }
                        }


                        if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
                            dataset['implicit'].push({token:'uri',
                                prefix:null,
                                suffix:null,
                                value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
                        }

                        var query = {};
                        query.kind = 'select';
                        query.token = 'executableunit'
                        query.dataset = dataset;
                        query.projection = s.vars;
                        query.modifier = s.modifier;
                        query.pattern = w

                        if(sm!=null && sm.limit!=null) {
                            query.limit = sm.limit;
                        }
                        if(sm!=null && sm.offset!=null) {
                            query.offset = sm.offset;
                        }
                        if(sm!=null && (sm.order!=null && sm.order!="")) {
                            query.order = sm.order;
                        }
                        if(sm!=null && sm.group!=null) {
                            query.group = sm.group;
                        }

                        return query
                    })(result1[0], result1[2], result1[4], result1[6])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[6] SelectQuery");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_SubSelect() {
                    var cacheKey = 'SubSelect@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var result1 = parse_SelectClause();
                    if (result1 !== null) {
                        var result2 = parse_WhereClause();
                        if (result2 !== null) {
                            var result3 = parse_SolutionModifier();
                            if (result3 !== null) {
                                var result0 = [result1, result2, result3];
                            } else {
                                var result0 = null;
                                pos = savedPos0;
                            }
                        } else {
                            var result0 = null;
                            pos = savedPos0;
                        }
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[7] SubSelect");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_SelectClause() {
                    var cacheKey = 'SelectClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result54 = parse_WS();
                    while (result54 !== null) {
                        result3.push(result54);
                        var result54 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 6) === "SELECT") {
                            var result53 = "SELECT";
                            pos += 6;
                        } else {
                            var result53 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"SELECT\"");
                            }
                        }
                        if (result53 !== null) {
                            var result4 = result53;
                        } else {
                            if (input.substr(pos, 6) === "select") {
                                var result52 = "select";
                                pos += 6;
                            } else {
                                var result52 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"select\"");
                                }
                            }
                            if (result52 !== null) {
                                var result4 = result52;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result51 = parse_WS();
                            while (result51 !== null) {
                                result5.push(result51);
                                var result51 = parse_WS();
                            }
                            if (result5 !== null) {
                                if (input.substr(pos, 8) === "DISTINCT") {
                                    var result50 = "DISTINCT";
                                    pos += 8;
                                } else {
                                    var result50 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"DISTINCT\"");
                                    }
                                }
                                if (result50 !== null) {
                                    var result48 = result50;
                                } else {
                                    if (input.substr(pos, 8) === "distinct") {
                                        var result49 = "distinct";
                                        pos += 8;
                                    } else {
                                        var result49 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"distinct\"");
                                        }
                                    }
                                    if (result49 !== null) {
                                        var result48 = result49;
                                    } else {
                                        var result48 = null;;
                                    };
                                }
                                if (result48 !== null) {
                                    var result44 = result48;
                                } else {
                                    if (input.substr(pos, 7) === "REDUCED") {
                                        var result47 = "REDUCED";
                                        pos += 7;
                                    } else {
                                        var result47 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"REDUCED\"");
                                        }
                                    }
                                    if (result47 !== null) {
                                        var result45 = result47;
                                    } else {
                                        if (input.substr(pos, 7) === "reduced") {
                                            var result46 = "reduced";
                                            pos += 7;
                                        } else {
                                            var result46 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"reduced\"");
                                            }
                                        }
                                        if (result46 !== null) {
                                            var result45 = result46;
                                        } else {
                                            var result45 = null;;
                                        };
                                    }
                                    if (result45 !== null) {
                                        var result44 = result45;
                                    } else {
                                        var result44 = null;;
                                    };
                                }
                                var result6 = result44 !== null ? result44 : '';
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result43 = parse_WS();
                                    while (result43 !== null) {
                                        result7.push(result43);
                                        var result43 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        var savedPos4 = pos;
                                        var result38 = [];
                                        var result42 = parse_WS();
                                        while (result42 !== null) {
                                            result38.push(result42);
                                            var result42 = parse_WS();
                                        }
                                        if (result38 !== null) {
                                            var result39 = parse_Var();
                                            if (result39 !== null) {
                                                var result40 = [];
                                                var result41 = parse_WS();
                                                while (result41 !== null) {
                                                    result40.push(result41);
                                                    var result41 = parse_WS();
                                                }
                                                if (result40 !== null) {
                                                    var result37 = [result38, result39, result40];
                                                } else {
                                                    var result37 = null;
                                                    pos = savedPos4;
                                                }
                                            } else {
                                                var result37 = null;
                                                pos = savedPos4;
                                            }
                                        } else {
                                            var result37 = null;
                                            pos = savedPos4;
                                        }
                                        if (result37 !== null) {
                                            var result16 = result37;
                                        } else {
                                            var savedPos3 = pos;
                                            var result18 = [];
                                            var result36 = parse_WS();
                                            while (result36 !== null) {
                                                result18.push(result36);
                                                var result36 = parse_WS();
                                            }
                                            if (result18 !== null) {
                                                if (input.substr(pos, 1) === "(") {
                                                    var result19 = "(";
                                                    pos += 1;
                                                } else {
                                                    var result19 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"(\"");
                                                    }
                                                }
                                                if (result19 !== null) {
                                                    var result20 = [];
                                                    var result35 = parse_WS();
                                                    while (result35 !== null) {
                                                        result20.push(result35);
                                                        var result35 = parse_WS();
                                                    }
                                                    if (result20 !== null) {
                                                        var result21 = parse_ConditionalOrExpression();
                                                        if (result21 !== null) {
                                                            var result22 = [];
                                                            var result34 = parse_WS();
                                                            while (result34 !== null) {
                                                                result22.push(result34);
                                                                var result34 = parse_WS();
                                                            }
                                                            if (result22 !== null) {
                                                                if (input.substr(pos, 2) === "AS") {
                                                                    var result33 = "AS";
                                                                    pos += 2;
                                                                } else {
                                                                    var result33 = null;
                                                                    if (reportMatchFailures) {
                                                                        matchFailed("\"AS\"");
                                                                    }
                                                                }
                                                                if (result33 !== null) {
                                                                    var result23 = result33;
                                                                } else {
                                                                    if (input.substr(pos, 2) === "as") {
                                                                        var result32 = "as";
                                                                        pos += 2;
                                                                    } else {
                                                                        var result32 = null;
                                                                        if (reportMatchFailures) {
                                                                            matchFailed("\"as\"");
                                                                        }
                                                                    }
                                                                    if (result32 !== null) {
                                                                        var result23 = result32;
                                                                    } else {
                                                                        var result23 = null;;
                                                                    };
                                                                }
                                                                if (result23 !== null) {
                                                                    var result24 = [];
                                                                    var result31 = parse_WS();
                                                                    while (result31 !== null) {
                                                                        result24.push(result31);
                                                                        var result31 = parse_WS();
                                                                    }
                                                                    if (result24 !== null) {
                                                                        var result25 = parse_Var();
                                                                        if (result25 !== null) {
                                                                            var result26 = [];
                                                                            var result30 = parse_WS();
                                                                            while (result30 !== null) {
                                                                                result26.push(result30);
                                                                                var result30 = parse_WS();
                                                                            }
                                                                            if (result26 !== null) {
                                                                                if (input.substr(pos, 1) === ")") {
                                                                                    var result27 = ")";
                                                                                    pos += 1;
                                                                                } else {
                                                                                    var result27 = null;
                                                                                    if (reportMatchFailures) {
                                                                                        matchFailed("\")\"");
                                                                                    }
                                                                                }
                                                                                if (result27 !== null) {
                                                                                    var result28 = [];
                                                                                    var result29 = parse_WS();
                                                                                    while (result29 !== null) {
                                                                                        result28.push(result29);
                                                                                        var result29 = parse_WS();
                                                                                    }
                                                                                    if (result28 !== null) {
                                                                                        var result17 = [result18, result19, result20, result21, result22, result23, result24, result25, result26, result27, result28];
                                                                                    } else {
                                                                                        var result17 = null;
                                                                                        pos = savedPos3;
                                                                                    }
                                                                                } else {
                                                                                    var result17 = null;
                                                                                    pos = savedPos3;
                                                                                }
                                                                            } else {
                                                                                var result17 = null;
                                                                                pos = savedPos3;
                                                                            }
                                                                        } else {
                                                                            var result17 = null;
                                                                            pos = savedPos3;
                                                                        }
                                                                    } else {
                                                                        var result17 = null;
                                                                        pos = savedPos3;
                                                                    }
                                                                } else {
                                                                    var result17 = null;
                                                                    pos = savedPos3;
                                                                }
                                                            } else {
                                                                var result17 = null;
                                                                pos = savedPos3;
                                                            }
                                                        } else {
                                                            var result17 = null;
                                                            pos = savedPos3;
                                                        }
                                                    } else {
                                                        var result17 = null;
                                                        pos = savedPos3;
                                                    }
                                                } else {
                                                    var result17 = null;
                                                    pos = savedPos3;
                                                }
                                            } else {
                                                var result17 = null;
                                                pos = savedPos3;
                                            }
                                            if (result17 !== null) {
                                                var result16 = result17;
                                            } else {
                                                var result16 = null;;
                                            };
                                        }
                                        if (result16 !== null) {
                                            var result15 = [];
                                            while (result16 !== null) {
                                                result15.push(result16);
                                                var savedPos4 = pos;
                                                var result38 = [];
                                                var result42 = parse_WS();
                                                while (result42 !== null) {
                                                    result38.push(result42);
                                                    var result42 = parse_WS();
                                                }
                                                if (result38 !== null) {
                                                    var result39 = parse_Var();
                                                    if (result39 !== null) {
                                                        var result40 = [];
                                                        var result41 = parse_WS();
                                                        while (result41 !== null) {
                                                            result40.push(result41);
                                                            var result41 = parse_WS();
                                                        }
                                                        if (result40 !== null) {
                                                            var result37 = [result38, result39, result40];
                                                        } else {
                                                            var result37 = null;
                                                            pos = savedPos4;
                                                        }
                                                    } else {
                                                        var result37 = null;
                                                        pos = savedPos4;
                                                    }
                                                } else {
                                                    var result37 = null;
                                                    pos = savedPos4;
                                                }
                                                if (result37 !== null) {
                                                    var result16 = result37;
                                                } else {
                                                    var savedPos3 = pos;
                                                    var result18 = [];
                                                    var result36 = parse_WS();
                                                    while (result36 !== null) {
                                                        result18.push(result36);
                                                        var result36 = parse_WS();
                                                    }
                                                    if (result18 !== null) {
                                                        if (input.substr(pos, 1) === "(") {
                                                            var result19 = "(";
                                                            pos += 1;
                                                        } else {
                                                            var result19 = null;
                                                            if (reportMatchFailures) {
                                                                matchFailed("\"(\"");
                                                            }
                                                        }
                                                        if (result19 !== null) {
                                                            var result20 = [];
                                                            var result35 = parse_WS();
                                                            while (result35 !== null) {
                                                                result20.push(result35);
                                                                var result35 = parse_WS();
                                                            }
                                                            if (result20 !== null) {
                                                                var result21 = parse_ConditionalOrExpression();
                                                                if (result21 !== null) {
                                                                    var result22 = [];
                                                                    var result34 = parse_WS();
                                                                    while (result34 !== null) {
                                                                        result22.push(result34);
                                                                        var result34 = parse_WS();
                                                                    }
                                                                    if (result22 !== null) {
                                                                        if (input.substr(pos, 2) === "AS") {
                                                                            var result33 = "AS";
                                                                            pos += 2;
                                                                        } else {
                                                                            var result33 = null;
                                                                            if (reportMatchFailures) {
                                                                                matchFailed("\"AS\"");
                                                                            }
                                                                        }
                                                                        if (result33 !== null) {
                                                                            var result23 = result33;
                                                                        } else {
                                                                            if (input.substr(pos, 2) === "as") {
                                                                                var result32 = "as";
                                                                                pos += 2;
                                                                            } else {
                                                                                var result32 = null;
                                                                                if (reportMatchFailures) {
                                                                                    matchFailed("\"as\"");
                                                                                }
                                                                            }
                                                                            if (result32 !== null) {
                                                                                var result23 = result32;
                                                                            } else {
                                                                                var result23 = null;;
                                                                            };
                                                                        }
                                                                        if (result23 !== null) {
                                                                            var result24 = [];
                                                                            var result31 = parse_WS();
                                                                            while (result31 !== null) {
                                                                                result24.push(result31);
                                                                                var result31 = parse_WS();
                                                                            }
                                                                            if (result24 !== null) {
                                                                                var result25 = parse_Var();
                                                                                if (result25 !== null) {
                                                                                    var result26 = [];
                                                                                    var result30 = parse_WS();
                                                                                    while (result30 !== null) {
                                                                                        result26.push(result30);
                                                                                        var result30 = parse_WS();
                                                                                    }
                                                                                    if (result26 !== null) {
                                                                                        if (input.substr(pos, 1) === ")") {
                                                                                            var result27 = ")";
                                                                                            pos += 1;
                                                                                        } else {
                                                                                            var result27 = null;
                                                                                            if (reportMatchFailures) {
                                                                                                matchFailed("\")\"");
                                                                                            }
                                                                                        }
                                                                                        if (result27 !== null) {
                                                                                            var result28 = [];
                                                                                            var result29 = parse_WS();
                                                                                            while (result29 !== null) {
                                                                                                result28.push(result29);
                                                                                                var result29 = parse_WS();
                                                                                            }
                                                                                            if (result28 !== null) {
                                                                                                var result17 = [result18, result19, result20, result21, result22, result23, result24, result25, result26, result27, result28];
                                                                                            } else {
                                                                                                var result17 = null;
                                                                                                pos = savedPos3;
                                                                                            }
                                                                                        } else {
                                                                                            var result17 = null;
                                                                                            pos = savedPos3;
                                                                                        }
                                                                                    } else {
                                                                                        var result17 = null;
                                                                                        pos = savedPos3;
                                                                                    }
                                                                                } else {
                                                                                    var result17 = null;
                                                                                    pos = savedPos3;
                                                                                }
                                                                            } else {
                                                                                var result17 = null;
                                                                                pos = savedPos3;
                                                                            }
                                                                        } else {
                                                                            var result17 = null;
                                                                            pos = savedPos3;
                                                                        }
                                                                    } else {
                                                                        var result17 = null;
                                                                        pos = savedPos3;
                                                                    }
                                                                } else {
                                                                    var result17 = null;
                                                                    pos = savedPos3;
                                                                }
                                                            } else {
                                                                var result17 = null;
                                                                pos = savedPos3;
                                                            }
                                                        } else {
                                                            var result17 = null;
                                                            pos = savedPos3;
                                                        }
                                                    } else {
                                                        var result17 = null;
                                                        pos = savedPos3;
                                                    }
                                                    if (result17 !== null) {
                                                        var result16 = result17;
                                                    } else {
                                                        var result16 = null;;
                                                    };
                                                }
                                            }
                                        } else {
                                            var result15 = null;
                                        }
                                        if (result15 !== null) {
                                            var result8 = result15;
                                        } else {
                                            var savedPos2 = pos;
                                            var result10 = [];
                                            var result14 = parse_WS();
                                            while (result14 !== null) {
                                                result10.push(result14);
                                                var result14 = parse_WS();
                                            }
                                            if (result10 !== null) {
                                                if (input.substr(pos, 1) === "*") {
                                                    var result11 = "*";
                                                    pos += 1;
                                                } else {
                                                    var result11 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"*\"");
                                                    }
                                                }
                                                if (result11 !== null) {
                                                    var result12 = [];
                                                    var result13 = parse_WS();
                                                    while (result13 !== null) {
                                                        result12.push(result13);
                                                        var result13 = parse_WS();
                                                    }
                                                    if (result12 !== null) {
                                                        var result9 = [result10, result11, result12];
                                                    } else {
                                                        var result9 = null;
                                                        pos = savedPos2;
                                                    }
                                                } else {
                                                    var result9 = null;
                                                    pos = savedPos2;
                                                }
                                            } else {
                                                var result9 = null;
                                                pos = savedPos2;
                                            }
                                            if (result9 !== null) {
                                                var result8 = result9;
                                            } else {
                                                var result8 = null;;
                                            };
                                        }
                                        if (result8 !== null) {
                                            var result1 = [result3, result4, result5, result6, result7, result8];
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(mod, proj) {
                        var vars = [];
                        if(proj.length === 3 && proj[1]==="*") {
                            return {vars: [{token: 'variable', kind:'*'}], modifier:arrayToString(mod)};
                        }

                        for(var i=0; i< proj.length; i++) {
                            var aVar = proj[i];

                            if(aVar.length === 3) {
                                vars.push({token: 'variable', kind:'var', value:aVar[1]});
                            } else {
                                vars.push({token: 'variable', kind:'aliased', expression: aVar[3], alias:aVar[7]})
                            }
                        }

                        return {vars: vars, modifier:arrayToString(mod)};
                    })(result1[3], result1[5])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[8] SelectClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ConstructQuery() {
                    var cacheKey = 'ConstructQuery@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result20 = parse_WS();
                    while (result20 !== null) {
                        result3.push(result20);
                        var result20 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 9) === "CONSTRUCT") {
                            var result19 = "CONSTRUCT";
                            pos += 9;
                        } else {
                            var result19 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"CONSTRUCT\"");
                            }
                        }
                        if (result19 !== null) {
                            var result4 = result19;
                        } else {
                            if (input.substr(pos, 9) === "construct") {
                                var result18 = "construct";
                                pos += 9;
                            } else {
                                var result18 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"construct\"");
                                }
                            }
                            if (result18 !== null) {
                                var result4 = result18;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result17 = parse_WS();
                            while (result17 !== null) {
                                result5.push(result17);
                                var result17 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_ConstructTemplate();
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result16 = parse_WS();
                                    while (result16 !== null) {
                                        result7.push(result16);
                                        var result16 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        var result8 = [];
                                        var result15 = parse_DatasetClause();
                                        while (result15 !== null) {
                                            result8.push(result15);
                                            var result15 = parse_DatasetClause();
                                        }
                                        if (result8 !== null) {
                                            var result9 = [];
                                            var result14 = parse_WS();
                                            while (result14 !== null) {
                                                result9.push(result14);
                                                var result14 = parse_WS();
                                            }
                                            if (result9 !== null) {
                                                var result10 = parse_WhereClause();
                                                if (result10 !== null) {
                                                    var result11 = [];
                                                    var result13 = parse_WS();
                                                    while (result13 !== null) {
                                                        result11.push(result13);
                                                        var result13 = parse_WS();
                                                    }
                                                    if (result11 !== null) {
                                                        var result12 = parse_SolutionModifier();
                                                        if (result12 !== null) {
                                                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                                        } else {
                                                            var result1 = null;
                                                            pos = savedPos1;
                                                        }
                                                    } else {
                                                        var result1 = null;
                                                        pos = savedPos1;
                                                    }
                                                } else {
                                                    var result1 = null;
                                                    pos = savedPos1;
                                                }
                                            } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(t, gs, w, sm) {
                        var dataset = {'named':[], 'implicit':[]};
                        for(var i=0; i<gs.length; i++) {
                            var g = gs[i];
                            if(g.kind === 'default') {
                                dataset['implicit'].push(g.graph);
                            } else {
                                dataset['named'].push(g.graph)
                            }
                        }


                        if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
                            dataset['implicit'].push({token:'uri',
                                prefix:null,
                                suffix:null,
                                value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
                        }

                        var query = {};
                        query.kind = 'construct';
                        query.token = 'executableunit'
                        query.dataset = dataset;
                        query.template = t;
                        query.pattern = w

                        if(sm!=null && sm.limit!=null) {
                            query.limit = sm.limit;
                        }
                        if(sm!=null && sm.offset!=null) {
                            query.offset = sm.offset;
                        }
                        if(sm!=null && (sm.order!=null && sm.order!="")) {
                            query.order = sm.order;
                        }
                        return query

                    })(result1[3], result1[5], result1[7], result1[9])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[9] ConstructQuery");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DescribeQuery() {
                    var cacheKey = 'DescribeQuery@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    if (input.substr(pos, 8) === "DESCRIBE") {
                        var result1 = "DESCRIBE";
                        pos += 8;
                    } else {
                        var result1 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"DESCRIBE\"");
                        }
                    }
                    if (result1 !== null) {
                        var result10 = parse_VarOrIRIref();
                        if (result10 !== null) {
                            var result9 = [];
                            while (result10 !== null) {
                                result9.push(result10);
                                var result10 = parse_VarOrIRIref();
                            }
                        } else {
                            var result9 = null;
                        }
                        if (result9 !== null) {
                            var result2 = result9;
                        } else {
                            if (input.substr(pos, 1) === "*") {
                                var result8 = "*";
                                pos += 1;
                            } else {
                                var result8 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"*\"");
                                }
                            }
                            if (result8 !== null) {
                                var result2 = result8;
                            } else {
                                var result2 = null;;
                            };
                        }
                        if (result2 !== null) {
                            var result3 = [];
                            var result7 = parse_DatasetClause();
                            while (result7 !== null) {
                                result3.push(result7);
                                var result7 = parse_DatasetClause();
                            }
                            if (result3 !== null) {
                                var result6 = parse_WhereClause();
                                var result4 = result6 !== null ? result6 : '';
                                if (result4 !== null) {
                                    var result5 = parse_SolutionModifier();
                                    if (result5 !== null) {
                                        var result0 = [result1, result2, result3, result4, result5];
                                    } else {
                                        var result0 = null;
                                        pos = savedPos0;
                                    }
                                } else {
                                    var result0 = null;
                                    pos = savedPos0;
                                }
                            } else {
                                var result0 = null;
                                pos = savedPos0;
                            }
                        } else {
                            var result0 = null;
                            pos = savedPos0;
                        }
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[10] DescribeQuery");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_AskQuery() {
                    var cacheKey = 'AskQuery@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result14 = parse_WS();
                    while (result14 !== null) {
                        result3.push(result14);
                        var result14 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 3) === "ASK") {
                            var result13 = "ASK";
                            pos += 3;
                        } else {
                            var result13 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"ASK\"");
                            }
                        }
                        if (result13 !== null) {
                            var result4 = result13;
                        } else {
                            if (input.substr(pos, 3) === "ask") {
                                var result12 = "ask";
                                pos += 3;
                            } else {
                                var result12 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"ask\"");
                                }
                            }
                            if (result12 !== null) {
                                var result4 = result12;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result11 = parse_WS();
                            while (result11 !== null) {
                                result5.push(result11);
                                var result11 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result10 = parse_DatasetClause();
                                while (result10 !== null) {
                                    result6.push(result10);
                                    var result10 = parse_DatasetClause();
                                }
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result9 = parse_WS();
                                    while (result9 !== null) {
                                        result7.push(result9);
                                        var result9 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        var result8 = parse_WhereClause();
                                        if (result8 !== null) {
                                            var result1 = [result3, result4, result5, result6, result7, result8];
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(gs, w) {
                        var dataset = {'named':[], 'implicit':[]};
                        for(var i=0; i<gs.length; i++) {
                            var g = gs[i];
                            if(g.kind === 'implicit') {
                                dataset['implicit'].push(g.graph);
                            } else {
                                dataset['named'].push(g.graph)
                            }
                        }


                        if(dataset['named'].length === 0 && dataset['implicit'].length === 0) {
                            dataset['implicit'].push({token:'uri',
                                prefix:null,
                                suffix:null,
                                value:'https://github.com/antoniogarrote/rdfstore-js#default_graph'});
                        }

                        var query = {};
                        query.kind = 'ask';
                        query.token = 'executableunit'
                        query.dataset = dataset;
                        query.pattern = w

                        return query
                    })(result1[3], result1[5])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[11] AskQuery");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DatasetClause() {
                    var cacheKey = 'DatasetClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 4) === "FROM") {
                        var result12 = "FROM";
                        pos += 4;
                    } else {
                        var result12 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"FROM\"");
                        }
                    }
                    if (result12 !== null) {
                        var result3 = result12;
                    } else {
                        if (input.substr(pos, 4) === "from") {
                            var result11 = "from";
                            pos += 4;
                        } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"from\"");
                            }
                        }
                        if (result11 !== null) {
                            var result3 = result11;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result10 = parse_WS();
                        while (result10 !== null) {
                            result4.push(result10);
                            var result10 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result9 = parse_DefaultGraphClause();
                            if (result9 !== null) {
                                var result5 = result9;
                            } else {
                                var result8 = parse_NamedGraphClause();
                                if (result8 !== null) {
                                    var result5 = result8;
                                } else {
                                    var result5 = null;;
                                };
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result7 = parse_WS();
                                while (result7 !== null) {
                                    result6.push(result7);
                                    var result7 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(gs) {
                        return gs;
                    })(result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[12] DatasetClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DefaultGraphClause() {
                    var cacheKey = 'DefaultGraphClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result5 = parse_WS();
                    while (result5 !== null) {
                        result3.push(result5);
                        var result5 = parse_WS();
                    }
                    if (result3 !== null) {
                        var result4 = parse_IRIref();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(s) {
                        return {graph:s , kind:'default', token:'graphClause'}
                    })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[13] DefaultGraphClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_NamedGraphClause() {
                    var cacheKey = 'NamedGraphClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 5) === "NAMED") {
                        var result8 = "NAMED";
                        pos += 5;
                    } else {
                        var result8 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"NAMED\"");
                        }
                    }
                    if (result8 !== null) {
                        var result3 = result8;
                    } else {
                        if (input.substr(pos, 5) === "named") {
                            var result7 = "named";
                            pos += 5;
                        } else {
                            var result7 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"named\"");
                            }
                        }
                        if (result7 !== null) {
                            var result3 = result7;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result6 = parse_WS();
                        while (result6 !== null) {
                            result4.push(result6);
                            var result6 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_IRIref();
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(s) {
                        return {graph:s, kind:'named', token:'graphCluase'};
                    })(result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[14] NamedGraphClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_WhereClause() {
                    var cacheKey = 'WhereClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 5) === "WHERE") {
                        var result11 = "WHERE";
                        pos += 5;
                    } else {
                        var result11 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"WHERE\"");
                        }
                    }
                    if (result11 !== null) {
                        var result9 = result11;
                    } else {
                        if (input.substr(pos, 5) === "where") {
                            var result10 = "where";
                            pos += 5;
                        } else {
                            var result10 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"where\"");
                            }
                        }
                        if (result10 !== null) {
                            var result9 = result10;
                        } else {
                            var result9 = null;;
                        };
                    }
                    var result3 = result9 !== null ? result9 : '';
                    if (result3 !== null) {
                        var result4 = [];
                        var result8 = parse_WS();
                        while (result8 !== null) {
                            result4.push(result8);
                            var result8 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_GroupGraphPattern();
                            if (result5 !== null) {
                                var result6 = [];
                                var result7 = parse_WS();
                                while (result7 !== null) {
                                    result6.push(result7);
                                    var result7 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(g) {
                        return g;
                    })(result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[16] WhereClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_SolutionModifier() {
                    var cacheKey = 'SolutionModifier@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result10 = parse_GroupClause();
                    var result3 = result10 !== null ? result10 : '';
                    if (result3 !== null) {
                        var result9 = parse_HavingClause();
                        var result4 = result9 !== null ? result9 : '';
                        if (result4 !== null) {
                            var result8 = parse_OrderClause();
                            var result5 = result8 !== null ? result8 : '';
                            if (result5 !== null) {
                                var result7 = parse_LimitOffsetClauses();
                                var result6 = result7 !== null ? result7 : '';
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(gc, oc, lo) {
                        var acum = {};
                        if(lo != null) {
                            if(lo.limit != null) {
                                acum.limit = lo.limit;
                            }
                            if(lo.offset != null) {
                                acum.offset = lo.offset;
                            }
                        }

                        if(gc != null) {
                            acum.group = gc;
                        }

                        acum.order = oc;

                        return acum
                    })(result1[0], result1[2], result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[17] SolutionModifier");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GroupClause() {
                    var cacheKey = 'GroupClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 5) === "GROUP") {
                        var result14 = "GROUP";
                        pos += 5;
                    } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"GROUP\"");
                        }
                    }
                    if (result14 !== null) {
                        var result3 = result14;
                    } else {
                        if (input.substr(pos, 5) === "group") {
                            var result13 = "group";
                            pos += 5;
                        } else {
                            var result13 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"group\"");
                            }
                        }
                        if (result13 !== null) {
                            var result3 = result13;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result12 = parse_WS();
                        while (result12 !== null) {
                            result4.push(result12);
                            var result12 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 2) === "BY") {
                                var result11 = "BY";
                                pos += 2;
                            } else {
                                var result11 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"BY\"");
                                }
                            }
                            if (result11 !== null) {
                                var result5 = result11;
                            } else {
                                if (input.substr(pos, 2) === "by") {
                                    var result10 = "by";
                                    pos += 2;
                                } else {
                                    var result10 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"by\"");
                                    }
                                }
                                if (result10 !== null) {
                                    var result5 = result10;
                                } else {
                                    var result5 = null;;
                                };
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result9 = parse_WS();
                                while (result9 !== null) {
                                    result6.push(result9);
                                    var result9 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result8 = parse_GroupCondition();
                                    if (result8 !== null) {
                                        var result7 = [];
                                        while (result8 !== null) {
                                            result7.push(result8);
                                            var result8 = parse_GroupCondition();
                                        }
                                    } else {
                                        var result7 = null;
                                    }
                                    if (result7 !== null) {
                                        var result1 = [result3, result4, result5, result6, result7];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(conds) {
                        return conds;
                    })(result1[4])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[18] GroupClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GroupCondition() {
                    var cacheKey = 'GroupCondition@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos7 = pos;
                    var savedPos8 = pos;
                    var result44 = [];
                    var result48 = parse_WS();
                    while (result48 !== null) {
                        result44.push(result48);
                        var result48 = parse_WS();
                    }
                    if (result44 !== null) {
                        var result45 = parse_BuiltInCall();
                        if (result45 !== null) {
                            var result46 = [];
                            var result47 = parse_WS();
                            while (result47 !== null) {
                                result46.push(result47);
                                var result47 = parse_WS();
                            }
                            if (result46 !== null) {
                                var result42 = [result44, result45, result46];
                            } else {
                                var result42 = null;
                                pos = savedPos8;
                            }
                        } else {
                            var result42 = null;
                            pos = savedPos8;
                        }
                    } else {
                        var result42 = null;
                        pos = savedPos8;
                    }
                    var result43 = result42 !== null
                        ? (function(b) {
                        return b;
                    })(result42[1])
                        : null;
                    if (result43 !== null) {
                        var result41 = result43;
                    } else {
                        var result41 = null;
                        pos = savedPos7;
                    }
                    if (result41 !== null) {
                        var result0 = result41;
                    } else {
                        var savedPos5 = pos;
                        var savedPos6 = pos;
                        var result36 = [];
                        var result40 = parse_WS();
                        while (result40 !== null) {
                            result36.push(result40);
                            var result40 = parse_WS();
                        }
                        if (result36 !== null) {
                            var result37 = parse_FunctionCall();
                            if (result37 !== null) {
                                var result38 = [];
                                var result39 = parse_WS();
                                while (result39 !== null) {
                                    result38.push(result39);
                                    var result39 = parse_WS();
                                }
                                if (result38 !== null) {
                                    var result34 = [result36, result37, result38];
                                } else {
                                    var result34 = null;
                                    pos = savedPos6;
                                }
                            } else {
                                var result34 = null;
                                pos = savedPos6;
                            }
                        } else {
                            var result34 = null;
                            pos = savedPos6;
                        }
                        var result35 = result34 !== null
                            ? (function(f) {
                            return f;
                        })(result34[1])
                            : null;
                        if (result35 !== null) {
                            var result33 = result35;
                        } else {
                            var result33 = null;
                            pos = savedPos5;
                        }
                        if (result33 !== null) {
                            var result0 = result33;
                        } else {
                            var savedPos2 = pos;
                            var savedPos3 = pos;
                            var result12 = [];
                            var result32 = parse_WS();
                            while (result32 !== null) {
                                result12.push(result32);
                                var result32 = parse_WS();
                            }
                            if (result12 !== null) {
                                if (input.substr(pos, 1) === "(") {
                                    var result13 = "(";
                                    pos += 1;
                                } else {
                                    var result13 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"(\"");
                                    }
                                }
                                if (result13 !== null) {
                                    var result14 = [];
                                    var result31 = parse_WS();
                                    while (result31 !== null) {
                                        result14.push(result31);
                                        var result31 = parse_WS();
                                    }
                                    if (result14 !== null) {
                                        var result15 = parse_ConditionalOrExpression();
                                        if (result15 !== null) {
                                            var result16 = [];
                                            var result30 = parse_WS();
                                            while (result30 !== null) {
                                                result16.push(result30);
                                                var result30 = parse_WS();
                                            }
                                            if (result16 !== null) {
                                                var savedPos4 = pos;
                                                if (input.substr(pos, 2) === "AS") {
                                                    var result29 = "AS";
                                                    pos += 2;
                                                } else {
                                                    var result29 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"AS\"");
                                                    }
                                                }
                                                if (result29 !== null) {
                                                    var result24 = result29;
                                                } else {
                                                    if (input.substr(pos, 2) === "as") {
                                                        var result28 = "as";
                                                        pos += 2;
                                                    } else {
                                                        var result28 = null;
                                                        if (reportMatchFailures) {
                                                            matchFailed("\"as\"");
                                                        }
                                                    }
                                                    if (result28 !== null) {
                                                        var result24 = result28;
                                                    } else {
                                                        var result24 = null;;
                                                    };
                                                }
                                                if (result24 !== null) {
                                                    var result25 = [];
                                                    var result27 = parse_WS();
                                                    while (result27 !== null) {
                                                        result25.push(result27);
                                                        var result27 = parse_WS();
                                                    }
                                                    if (result25 !== null) {
                                                        var result26 = parse_Var();
                                                        if (result26 !== null) {
                                                            var result23 = [result24, result25, result26];
                                                        } else {
                                                            var result23 = null;
                                                            pos = savedPos4;
                                                        }
                                                    } else {
                                                        var result23 = null;
                                                        pos = savedPos4;
                                                    }
                                                } else {
                                                    var result23 = null;
                                                    pos = savedPos4;
                                                }
                                                var result17 = result23 !== null ? result23 : '';
                                                if (result17 !== null) {
                                                    var result18 = [];
                                                    var result22 = parse_WS();
                                                    while (result22 !== null) {
                                                        result18.push(result22);
                                                        var result22 = parse_WS();
                                                    }
                                                    if (result18 !== null) {
                                                        if (input.substr(pos, 1) === ")") {
                                                            var result19 = ")";
                                                            pos += 1;
                                                        } else {
                                                            var result19 = null;
                                                            if (reportMatchFailures) {
                                                                matchFailed("\")\"");
                                                            }
                                                        }
                                                        if (result19 !== null) {
                                                            var result20 = [];
                                                            var result21 = parse_WS();
                                                            while (result21 !== null) {
                                                                result20.push(result21);
                                                                var result21 = parse_WS();
                                                            }
                                                            if (result20 !== null) {
                                                                var result10 = [result12, result13, result14, result15, result16, result17, result18, result19, result20];
                                                            } else {
                                                                var result10 = null;
                                                                pos = savedPos3;
                                                            }
                                                        } else {
                                                            var result10 = null;
                                                            pos = savedPos3;
                                                        }
                                                    } else {
                                                        var result10 = null;
                                                        pos = savedPos3;
                                                    }
                                                } else {
                                                    var result10 = null;
                                                    pos = savedPos3;
                                                }
                                            } else {
                                                var result10 = null;
                                                pos = savedPos3;
                                            }
                                        } else {
                                            var result10 = null;
                                            pos = savedPos3;
                                        }
                                    } else {
                                        var result10 = null;
                                        pos = savedPos3;
                                    }
                                } else {
                                    var result10 = null;
                                    pos = savedPos3;
                                }
                            } else {
                                var result10 = null;
                                pos = savedPos3;
                            }
                            var result11 = result10 !== null
                                ? (function(e, alias) {
                                if(alias.length != 0) {
                                    return {token: 'aliased_expression',
                                        expression: e,
                                        alias: alias[2] };
                                } else {
                                    return e;
                                }
                            })(result10[3], result10[5])
                                : null;
                            if (result11 !== null) {
                                var result9 = result11;
                            } else {
                                var result9 = null;
                                pos = savedPos2;
                            }
                            if (result9 !== null) {
                                var result0 = result9;
                            } else {
                                var savedPos0 = pos;
                                var savedPos1 = pos;
                                var result4 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result4.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result4 !== null) {
                                    var result5 = parse_Var();
                                    if (result5 !== null) {
                                        var result6 = [];
                                        var result7 = parse_WS();
                                        while (result7 !== null) {
                                            result6.push(result7);
                                            var result7 = parse_WS();
                                        }
                                        if (result6 !== null) {
                                            var result2 = [result4, result5, result6];
                                        } else {
                                            var result2 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result2 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result2 = null;
                                    pos = savedPos1;
                                }
                                var result3 = result2 !== null
                                    ? (function(v) {
                                    return v;
                                })(result2[1])
                                    : null;
                                if (result3 !== null) {
                                    var result1 = result3;
                                } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                }
                                if (result1 !== null) {
                                    var result0 = result1;
                                } else {
                                    var result0 = null;;
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[19] GroupCondition");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_HavingClause() {
                    var cacheKey = 'HavingClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    if (input.substr(pos, 6) === "HAVING") {
                        var result1 = "HAVING";
                        pos += 6;
                    } else {
                        var result1 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"HAVING\"");
                        }
                    }
                    if (result1 !== null) {
                        var result3 = parse_Constraint();
                        if (result3 !== null) {
                            var result2 = [];
                            while (result3 !== null) {
                                result2.push(result3);
                                var result3 = parse_Constraint();
                            }
                        } else {
                            var result2 = null;
                        }
                        if (result2 !== null) {
                            var result0 = [result1, result2];
                        } else {
                            var result0 = null;
                            pos = savedPos0;
                        }
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[20] HavingClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_OrderClause() {
                    var cacheKey = 'OrderClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 5) === "ORDER") {
                        var result16 = "ORDER";
                        pos += 5;
                    } else {
                        var result16 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"ORDER\"");
                        }
                    }
                    if (result16 !== null) {
                        var result3 = result16;
                    } else {
                        if (input.substr(pos, 5) === "order") {
                            var result15 = "order";
                            pos += 5;
                        } else {
                            var result15 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"order\"");
                            }
                        }
                        if (result15 !== null) {
                            var result3 = result15;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result14 = parse_WS();
                        while (result14 !== null) {
                            result4.push(result14);
                            var result14 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 2) === "BY") {
                                var result13 = "BY";
                                pos += 2;
                            } else {
                                var result13 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"BY\"");
                                }
                            }
                            if (result13 !== null) {
                                var result5 = result13;
                            } else {
                                if (input.substr(pos, 2) === "by") {
                                    var result12 = "by";
                                    pos += 2;
                                } else {
                                    var result12 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"by\"");
                                    }
                                }
                                if (result12 !== null) {
                                    var result5 = result12;
                                } else {
                                    var result5 = null;;
                                };
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result11 = parse_WS();
                                while (result11 !== null) {
                                    result6.push(result11);
                                    var result11 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result10 = parse_OrderCondition();
                                    if (result10 !== null) {
                                        var result7 = [];
                                        while (result10 !== null) {
                                            result7.push(result10);
                                            var result10 = parse_OrderCondition();
                                        }
                                    } else {
                                        var result7 = null;
                                    }
                                    if (result7 !== null) {
                                        var result8 = [];
                                        var result9 = parse_WS();
                                        while (result9 !== null) {
                                            result8.push(result9);
                                            var result9 = parse_WS();
                                        }
                                        if (result8 !== null) {
                                            var result1 = [result3, result4, result5, result6, result7, result8];
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(os) {
                        return os;
                    })(result1[4])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[22] OrderClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_OrderCondition() {
                    var cacheKey = 'OrderCondition@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos2 = pos;
                    var savedPos3 = pos;
                    if (input.substr(pos, 3) === "ASC") {
                        var result21 = "ASC";
                        pos += 3;
                    } else {
                        var result21 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"ASC\"");
                        }
                    }
                    if (result21 !== null) {
                        var result12 = result21;
                    } else {
                        if (input.substr(pos, 3) === "asc") {
                            var result20 = "asc";
                            pos += 3;
                        } else {
                            var result20 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"asc\"");
                            }
                        }
                        if (result20 !== null) {
                            var result12 = result20;
                        } else {
                            if (input.substr(pos, 4) === "DESC") {
                                var result19 = "DESC";
                                pos += 4;
                            } else {
                                var result19 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"DESC\"");
                                }
                            }
                            if (result19 !== null) {
                                var result12 = result19;
                            } else {
                                if (input.substr(pos, 4) === "desc") {
                                    var result18 = "desc";
                                    pos += 4;
                                } else {
                                    var result18 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"desc\"");
                                    }
                                }
                                if (result18 !== null) {
                                    var result12 = result18;
                                } else {
                                    var result12 = null;;
                                };
                            };
                        };
                    }
                    if (result12 !== null) {
                        var result13 = [];
                        var result17 = parse_WS();
                        while (result17 !== null) {
                            result13.push(result17);
                            var result17 = parse_WS();
                        }
                        if (result13 !== null) {
                            var result14 = parse_BrackettedExpression();
                            if (result14 !== null) {
                                var result15 = [];
                                var result16 = parse_WS();
                                while (result16 !== null) {
                                    result15.push(result16);
                                    var result16 = parse_WS();
                                }
                                if (result15 !== null) {
                                    var result10 = [result12, result13, result14, result15];
                                } else {
                                    var result10 = null;
                                    pos = savedPos3;
                                }
                            } else {
                                var result10 = null;
                                pos = savedPos3;
                            }
                        } else {
                            var result10 = null;
                            pos = savedPos3;
                        }
                    } else {
                        var result10 = null;
                        pos = savedPos3;
                    }
                    var result11 = result10 !== null
                        ? (function(direction, e) {
                        return { direction: direction.toUpperCase(), expression:e };
                    })(result10[0], result10[2])
                        : null;
                    if (result11 !== null) {
                        var result9 = result11;
                    } else {
                        var result9 = null;
                        pos = savedPos2;
                    }
                    if (result9 !== null) {
                        var result0 = result9;
                    } else {
                        var savedPos0 = pos;
                        var savedPos1 = pos;
                        var result8 = parse_Constraint();
                        if (result8 !== null) {
                            var result4 = result8;
                        } else {
                            var result7 = parse_Var();
                            if (result7 !== null) {
                                var result4 = result7;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result6 = parse_WS();
                            while (result6 !== null) {
                                result5.push(result6);
                                var result6 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result2 = [result4, result5];
                            } else {
                                var result2 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result2 = null;
                            pos = savedPos1;
                        }
                        var result3 = result2 !== null
                            ? (function(e) {
                            if(e.token === 'var') {
                                var e = { token:'expression',
                                    expressionType:'atomic',
                                    primaryexpression: 'var',
                                    value: e };
                            }
                            return { direction: 'ASC', expression:e };
                        })(result2[0])
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[23] OrderCondition");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_LimitOffsetClauses() {
                    var cacheKey = 'LimitOffsetClauses@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos2 = pos;
                    var result8 = parse_LimitClause();
                    if (result8 !== null) {
                        var result10 = parse_OffsetClause();
                        var result9 = result10 !== null ? result10 : '';
                        if (result9 !== null) {
                            var result7 = [result8, result9];
                        } else {
                            var result7 = null;
                            pos = savedPos2;
                        }
                    } else {
                        var result7 = null;
                        pos = savedPos2;
                    }
                    if (result7 !== null) {
                        var result1 = result7;
                    } else {
                        var savedPos1 = pos;
                        var result4 = parse_OffsetClause();
                        if (result4 !== null) {
                            var result6 = parse_LimitClause();
                            var result5 = result6 !== null ? result6 : '';
                            if (result5 !== null) {
                                var result3 = [result4, result5];
                            } else {
                                var result3 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result3 = null;
                            pos = savedPos1;
                        }
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;;
                        };
                    }
                    var result2 = result1 !== null
                        ? (function(cls) {
                        var acum = {};
                        for(var i=0; i<cls.length; i++) {
                            var cl = cls[i];
                            if(cl.limit != null) {
                                acum['limit'] = cl.limit;
                            } else if(cl.offset != null){
                                acum['offset'] = cl.offset;
                            }
                        }

                        return acum;
                    })(result1)
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[24] LimitOffsetClauses");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_LimitClause() {
                    var cacheKey = 'LimitClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 5) === "LIMIT") {
                        var result10 = "LIMIT";
                        pos += 5;
                    } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"LIMIT\"");
                        }
                    }
                    if (result10 !== null) {
                        var result3 = result10;
                    } else {
                        if (input.substr(pos, 5) === "limit") {
                            var result9 = "limit";
                            pos += 5;
                        } else {
                            var result9 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"limit\"");
                            }
                        }
                        if (result9 !== null) {
                            var result3 = result9;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result8 = parse_WS();
                        while (result8 !== null) {
                            result4.push(result8);
                            var result8 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_INTEGER();
                            if (result5 !== null) {
                                var result6 = [];
                                var result7 = parse_WS();
                                while (result7 !== null) {
                                    result6.push(result7);
                                    var result7 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(i) {
                        return { limit:parseInt(i.value) };
                    })(result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[25] LimitClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_OffsetClause() {
                    var cacheKey = 'OffsetClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 6) === "OFFSET") {
                        var result10 = "OFFSET";
                        pos += 6;
                    } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"OFFSET\"");
                        }
                    }
                    if (result10 !== null) {
                        var result3 = result10;
                    } else {
                        if (input.substr(pos, 6) === "offset") {
                            var result9 = "offset";
                            pos += 6;
                        } else {
                            var result9 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"offset\"");
                            }
                        }
                        if (result9 !== null) {
                            var result3 = result9;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result8 = parse_WS();
                        while (result8 !== null) {
                            result4.push(result8);
                            var result8 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_INTEGER();
                            if (result5 !== null) {
                                var result6 = [];
                                var result7 = parse_WS();
                                while (result7 !== null) {
                                    result6.push(result7);
                                    var result7 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(i) {
                        return { offset:parseInt(i.value) };
                    })(result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[26] OffsetClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_BindingsClause() {
                    var cacheKey = 'BindingsClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    if (input.substr(pos, 8) === "BINDINGS") {
                        var result2 = "BINDINGS";
                        pos += 8;
                    } else {
                        var result2 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"BINDINGS\"");
                        }
                    }
                    if (result2 !== null) {
                        var result3 = [];
                        var result14 = parse_Var();
                        while (result14 !== null) {
                            result3.push(result14);
                            var result14 = parse_Var();
                        }
                        if (result3 !== null) {
                            if (input.substr(pos, 1) === "{") {
                                var result4 = "{";
                                pos += 1;
                            } else {
                                var result4 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"{\"");
                                }
                            }
                            if (result4 !== null) {
                                var result5 = [];
                                var savedPos1 = pos;
                                if (input.substr(pos, 1) === "(") {
                                    var result10 = "(";
                                    pos += 1;
                                } else {
                                    var result10 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"(\"");
                                    }
                                }
                                if (result10 !== null) {
                                    var result13 = parse_BindingValue();
                                    if (result13 !== null) {
                                        var result11 = [];
                                        while (result13 !== null) {
                                            result11.push(result13);
                                            var result13 = parse_BindingValue();
                                        }
                                    } else {
                                        var result11 = null;
                                    }
                                    if (result11 !== null) {
                                        if (input.substr(pos, 1) === ")") {
                                            var result12 = ")";
                                            pos += 1;
                                        } else {
                                            var result12 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\")\"");
                                            }
                                        }
                                        if (result12 !== null) {
                                            var result9 = [result10, result11, result12];
                                        } else {
                                            var result9 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result9 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result9 = null;
                                    pos = savedPos1;
                                }
                                if (result9 !== null) {
                                    var result7 = result9;
                                } else {
                                    var result8 = parse_NIL();
                                    if (result8 !== null) {
                                        var result7 = result8;
                                    } else {
                                        var result7 = null;;
                                    };
                                }
                                while (result7 !== null) {
                                    result5.push(result7);
                                    var savedPos1 = pos;
                                    if (input.substr(pos, 1) === "(") {
                                        var result10 = "(";
                                        pos += 1;
                                    } else {
                                        var result10 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"(\"");
                                        }
                                    }
                                    if (result10 !== null) {
                                        var result13 = parse_BindingValue();
                                        if (result13 !== null) {
                                            var result11 = [];
                                            while (result13 !== null) {
                                                result11.push(result13);
                                                var result13 = parse_BindingValue();
                                            }
                                        } else {
                                            var result11 = null;
                                        }
                                        if (result11 !== null) {
                                            if (input.substr(pos, 1) === ")") {
                                                var result12 = ")";
                                                pos += 1;
                                            } else {
                                                var result12 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\")\"");
                                                }
                                            }
                                            if (result12 !== null) {
                                                var result9 = [result10, result11, result12];
                                            } else {
                                                var result9 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result9 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result9 = null;
                                        pos = savedPos1;
                                    }
                                    if (result9 !== null) {
                                        var result7 = result9;
                                    } else {
                                        var result8 = parse_NIL();
                                        if (result8 !== null) {
                                            var result7 = result8;
                                        } else {
                                            var result7 = null;;
                                        };
                                    }
                                }
                                if (result5 !== null) {
                                    if (input.substr(pos, 1) === "}") {
                                        var result6 = "}";
                                        pos += 1;
                                    } else {
                                        var result6 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"}\"");
                                        }
                                    }
                                    if (result6 !== null) {
                                        var result1 = [result2, result3, result4, result5, result6];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos0;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos0;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos0;
                    }
                    var result0 = result1 !== null ? result1 : '';
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[27] BindingsClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_BindingValue() {
                    var cacheKey = 'BindingValue@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result5 = parse_IRIref();
                    if (result5 !== null) {
                        var result0 = result5;
                    } else {
                        var result4 = parse_RDFLiteral();
                        if (result4 !== null) {
                            var result0 = result4;
                        } else {
                            var result3 = parse_NumericLiteral();
                            if (result3 !== null) {
                                var result0 = result3;
                            } else {
                                var result2 = parse_BooleanLiteral();
                                if (result2 !== null) {
                                    var result0 = result2;
                                } else {
                                    if (input.substr(pos, 5) === "UNDEF") {
                                        var result1 = "UNDEF";
                                        pos += 5;
                                    } else {
                                        var result1 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"UNDEF\"");
                                        }
                                    }
                                    if (result1 !== null) {
                                        var result0 = result1;
                                    } else {
                                        var result0 = null;;
                                    };
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[28] BindingValue");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Update() {
                    var cacheKey = 'Update@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_Prologue();
                    if (result3 !== null) {
                        var result4 = [];
                        var result15 = parse_WS();
                        while (result15 !== null) {
                            result4.push(result15);
                            var result15 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_Update1();
                            if (result5 !== null) {
                                var savedPos2 = pos;
                                var result8 = [];
                                var result14 = parse_WS();
                                while (result14 !== null) {
                                    result8.push(result14);
                                    var result14 = parse_WS();
                                }
                                if (result8 !== null) {
                                    if (input.substr(pos, 1) === ";") {
                                        var result9 = ";";
                                        pos += 1;
                                    } else {
                                        var result9 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\";\"");
                                        }
                                    }
                                    if (result9 !== null) {
                                        var result10 = [];
                                        var result13 = parse_WS();
                                        while (result13 !== null) {
                                            result10.push(result13);
                                            var result13 = parse_WS();
                                        }
                                        if (result10 !== null) {
                                            var result12 = parse_Update();
                                            var result11 = result12 !== null ? result12 : '';
                                            if (result11 !== null) {
                                                var result7 = [result8, result9, result10, result11];
                                            } else {
                                                var result7 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result7 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result7 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result7 = null;
                                    pos = savedPos2;
                                }
                                var result6 = result7 !== null ? result7 : '';
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(p, u, us) {

                        var query = {};
                        query.token = 'query';
                        query.kind = 'update'
                        query.prologue = p;

                        var units = [u];

                        if(us.length != null && us[3] != null && us[3].units != null) {
                            units = units.concat(us[3].units);
                        }

                        query.units = units;
                        return query;
                    })(result1[0], result1[2], result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[30] Update");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Update1() {
                    var cacheKey = 'Update1@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result8 = parse_Load();
                    if (result8 !== null) {
                        var result0 = result8;
                    } else {
                        var result7 = parse_Clear();
                        if (result7 !== null) {
                            var result0 = result7;
                        } else {
                            var result6 = parse_Drop();
                            if (result6 !== null) {
                                var result0 = result6;
                            } else {
                                var result5 = parse_Create();
                                if (result5 !== null) {
                                    var result0 = result5;
                                } else {
                                    var result4 = parse_InsertData();
                                    if (result4 !== null) {
                                        var result0 = result4;
                                    } else {
                                        var result3 = parse_DeleteData();
                                        if (result3 !== null) {
                                            var result0 = result3;
                                        } else {
                                            var result2 = parse_DeleteWhere();
                                            if (result2 !== null) {
                                                var result0 = result2;
                                            } else {
                                                var result1 = parse_Modify();
                                                if (result1 !== null) {
                                                    var result0 = result1;
                                                } else {
                                                    var result0 = null;;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[31] Update1");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Load() {
                    var cacheKey = 'Load@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 4) === "LOAD") {
                        var result18 = "LOAD";
                        pos += 4;
                    } else {
                        var result18 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"LOAD\"");
                        }
                    }
                    if (result18 !== null) {
                        var result3 = result18;
                    } else {
                        if (input.substr(pos, 4) === "load") {
                            var result17 = "load";
                            pos += 4;
                        } else {
                            var result17 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"load\"");
                            }
                        }
                        if (result17 !== null) {
                            var result3 = result17;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result16 = parse_WS();
                        while (result16 !== null) {
                            result4.push(result16);
                            var result16 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_IRIref();
                            if (result5 !== null) {
                                var result6 = [];
                                var result15 = parse_WS();
                                while (result15 !== null) {
                                    result6.push(result15);
                                    var result15 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var savedPos2 = pos;
                                    if (input.substr(pos, 4) === "INTO") {
                                        var result14 = "INTO";
                                        pos += 4;
                                    } else {
                                        var result14 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"INTO\"");
                                        }
                                    }
                                    if (result14 !== null) {
                                        var result9 = result14;
                                    } else {
                                        if (input.substr(pos, 4) === "into") {
                                            var result13 = "into";
                                            pos += 4;
                                        } else {
                                            var result13 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"into\"");
                                            }
                                        }
                                        if (result13 !== null) {
                                            var result9 = result13;
                                        } else {
                                            var result9 = null;;
                                        };
                                    }
                                    if (result9 !== null) {
                                        var result10 = [];
                                        var result12 = parse_WS();
                                        while (result12 !== null) {
                                            result10.push(result12);
                                            var result12 = parse_WS();
                                        }
                                        if (result10 !== null) {
                                            var result11 = parse_GraphRef();
                                            if (result11 !== null) {
                                                var result8 = [result9, result10, result11];
                                            } else {
                                                var result8 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result8 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result8 = null;
                                        pos = savedPos2;
                                    }
                                    var result7 = result8 !== null ? result8 : '';
                                    if (result7 !== null) {
                                        var result1 = [result3, result4, result5, result6, result7];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(sg, dg) {
                        var query = {};
                        query.kind = 'load';
                        query.token = 'executableunit'
                        query.sourceGraph = sg;
                        query.destinyGraph = dg[2];

                        return query;
                    })(result1[2], result1[4])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[32] Load");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Clear() {
                    var cacheKey = 'Clear@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 5) === "CLEAR") {
                        var result14 = "CLEAR";
                        pos += 5;
                    } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"CLEAR\"");
                        }
                    }
                    if (result14 !== null) {
                        var result3 = result14;
                    } else {
                        if (input.substr(pos, 5) === "clear") {
                            var result13 = "clear";
                            pos += 5;
                        } else {
                            var result13 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"clear\"");
                            }
                        }
                        if (result13 !== null) {
                            var result3 = result13;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result12 = parse_WS();
                        while (result12 !== null) {
                            result4.push(result12);
                            var result12 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 6) === "SILENT") {
                                var result11 = "SILENT";
                                pos += 6;
                            } else {
                                var result11 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"SILENT\"");
                                }
                            }
                            if (result11 !== null) {
                                var result9 = result11;
                            } else {
                                if (input.substr(pos, 6) === "silent") {
                                    var result10 = "silent";
                                    pos += 6;
                                } else {
                                    var result10 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"silent\"");
                                    }
                                }
                                if (result10 !== null) {
                                    var result9 = result10;
                                } else {
                                    var result9 = null;;
                                };
                            }
                            var result5 = result9 !== null ? result9 : '';
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_GraphRefAll();
                                    if (result7 !== null) {
                                        var result1 = [result3, result4, result5, result6, result7];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(ref) {
                        var query = {};
                        query.kind = 'clear';
                        query.token = 'executableunit'
                        query.destinyGraph = ref;

                        return query;
                    })(result1[4])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[33] Clear");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Drop() {
                    var cacheKey = 'Drop@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 4) === "DROP") {
                        var result14 = "DROP";
                        pos += 4;
                    } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"DROP\"");
                        }
                    }
                    if (result14 !== null) {
                        var result3 = result14;
                    } else {
                        if (input.substr(pos, 4) === "drop") {
                            var result13 = "drop";
                            pos += 4;
                        } else {
                            var result13 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"drop\"");
                            }
                        }
                        if (result13 !== null) {
                            var result3 = result13;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result12 = parse_WS();
                        while (result12 !== null) {
                            result4.push(result12);
                            var result12 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 6) === "SILENT") {
                                var result11 = "SILENT";
                                pos += 6;
                            } else {
                                var result11 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"SILENT\"");
                                }
                            }
                            if (result11 !== null) {
                                var result9 = result11;
                            } else {
                                if (input.substr(pos, 6) === "silent") {
                                    var result10 = "silent";
                                    pos += 6;
                                } else {
                                    var result10 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"silent\"");
                                    }
                                }
                                if (result10 !== null) {
                                    var result9 = result10;
                                } else {
                                    var result9 = null;;
                                };
                            }
                            var result5 = result9 !== null ? result9 : '';
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_GraphRefAll();
                                    if (result7 !== null) {
                                        var result1 = [result3, result4, result5, result6, result7];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(ref) {
                        var query = {};
                        query.kind = 'drop';
                        query.token = 'executableunit'
                        query.destinyGraph = ref;

                        return query;
                    })(result1[4])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[34] Drop");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Create() {
                    var cacheKey = 'Create@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 6) === "CREATE") {
                        var result14 = "CREATE";
                        pos += 6;
                    } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"CREATE\"");
                        }
                    }
                    if (result14 !== null) {
                        var result3 = result14;
                    } else {
                        if (input.substr(pos, 6) === "create") {
                            var result13 = "create";
                            pos += 6;
                        } else {
                            var result13 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"create\"");
                            }
                        }
                        if (result13 !== null) {
                            var result3 = result13;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result12 = parse_WS();
                        while (result12 !== null) {
                            result4.push(result12);
                            var result12 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 6) === "SILENT") {
                                var result11 = "SILENT";
                                pos += 6;
                            } else {
                                var result11 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"SILENT\"");
                                }
                            }
                            if (result11 !== null) {
                                var result9 = result11;
                            } else {
                                if (input.substr(pos, 6) === "silent") {
                                    var result10 = "silent";
                                    pos += 6;
                                } else {
                                    var result10 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"silent\"");
                                    }
                                }
                                if (result10 !== null) {
                                    var result9 = result10;
                                } else {
                                    var result9 = null;;
                                };
                            }
                            var result5 = result9 !== null ? result9 : '';
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_GraphRef();
                                    if (result7 !== null) {
                                        var result1 = [result3, result4, result5, result6, result7];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(ref) {
                        var query = {};
                        query.kind = 'create';
                        query.token = 'executableunit'
                        query.destinyGraph = ref;

                        return query;
                    })(result1[4])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[35] Create");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_InsertData() {
                    var cacheKey = 'InsertData@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 6) === "INSERT") {
                        var result13 = "INSERT";
                        pos += 6;
                    } else {
                        var result13 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"INSERT\"");
                        }
                    }
                    if (result13 !== null) {
                        var result3 = result13;
                    } else {
                        if (input.substr(pos, 6) === "insert") {
                            var result12 = "insert";
                            pos += 6;
                        } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"insert\"");
                            }
                        }
                        if (result12 !== null) {
                            var result3 = result12;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result11 = parse_WS();
                        while (result11 !== null) {
                            result4.push(result11);
                            var result11 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 4) === "DATA") {
                                var result10 = "DATA";
                                pos += 4;
                            } else {
                                var result10 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"DATA\"");
                                }
                            }
                            if (result10 !== null) {
                                var result5 = result10;
                            } else {
                                if (input.substr(pos, 4) === "data") {
                                    var result9 = "data";
                                    pos += 4;
                                } else {
                                    var result9 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"data\"");
                                    }
                                }
                                if (result9 !== null) {
                                    var result5 = result9;
                                } else {
                                    var result5 = null;;
                                };
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_QuadData();
                                    if (result7 !== null) {
                                        var result1 = [result3, result4, result5, result6, result7];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(qs) {
                        var query = {};
                        query.kind = 'insertdata';
                        query.token = 'executableunit'
                        query.quads = qs;

                        return query;
                    })(result1[4])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[36] InsertData");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DeleteData() {
                    var cacheKey = 'DeleteData@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 6) === "DELETE") {
                        var result11 = "DELETE";
                        pos += 6;
                    } else {
                        var result11 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"DELETE\"");
                        }
                    }
                    if (result11 !== null) {
                        var result3 = result11;
                    } else {
                        if (input.substr(pos, 6) === "delete") {
                            var result10 = "delete";
                            pos += 6;
                        } else {
                            var result10 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"delete\"");
                            }
                        }
                        if (result10 !== null) {
                            var result3 = result10;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result9 = parse_WS();
                        while (result9 !== null) {
                            result4.push(result9);
                            var result9 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 4) === "DATA") {
                                var result8 = "DATA";
                                pos += 4;
                            } else {
                                var result8 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"DATA\"");
                                }
                            }
                            if (result8 !== null) {
                                var result5 = result8;
                            } else {
                                if (input.substr(pos, 4) === "data") {
                                    var result7 = "data";
                                    pos += 4;
                                } else {
                                    var result7 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"data\"");
                                    }
                                }
                                if (result7 !== null) {
                                    var result5 = result7;
                                } else {
                                    var result5 = null;;
                                };
                            }
                            if (result5 !== null) {
                                var result6 = parse_QuadData();
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(qs) {
                        var query = {};
                        query.kind = 'deletedata';
                        query.token = 'executableunit'
                        query.quads = qs;

                        return query;
                    })(result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[37] DeleteData");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DeleteWhere() {
                    var cacheKey = 'DeleteWhere@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 6) === "DELETE") {
                        var result13 = "DELETE";
                        pos += 6;
                    } else {
                        var result13 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"DELETE\"");
                        }
                    }
                    if (result13 !== null) {
                        var result3 = result13;
                    } else {
                        if (input.substr(pos, 6) === "delete") {
                            var result12 = "delete";
                            pos += 6;
                        } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"delete\"");
                            }
                        }
                        if (result12 !== null) {
                            var result3 = result12;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result11 = parse_WS();
                        while (result11 !== null) {
                            result4.push(result11);
                            var result11 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 5) === "WHERE") {
                                var result10 = "WHERE";
                                pos += 5;
                            } else {
                                var result10 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"WHERE\"");
                                }
                            }
                            if (result10 !== null) {
                                var result5 = result10;
                            } else {
                                if (input.substr(pos, 5) === "where") {
                                    var result9 = "where";
                                    pos += 5;
                                } else {
                                    var result9 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"where\"");
                                    }
                                }
                                if (result9 !== null) {
                                    var result5 = result9;
                                } else {
                                    var result5 = null;;
                                };
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_GroupGraphPattern();
                                    if (result7 !== null) {
                                        var result1 = [result3, result4, result5, result6, result7];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(p) {
                        var query = {};
                        query.kind = 'modify';
                        query.pattern = p;
                        query.with = null;
                        query.using = null;

                        var quads = [];


                        var patternsCollection = p.patterns[0];
                        if(patternsCollection.triplesContext == null && patternsCollection.patterns!=null) {
                            patternsCollection = patternsCollection.patterns[0].triplesContext;
                        } else {
                            patternsCollection = patternsCollection.triplesContext;
                        }

                        for(var i=0; i<patternsCollection.length; i++) {
                            var quad = {};
                            var contextQuad = patternsCollection[i];

                            quad['subject'] = contextQuad['subject'];
                            quad['predicate'] = contextQuad['predicate'];
                            quad['object'] = contextQuad['object'];
                            quad['graph'] = contextQuad['graph'];

                            quads.push(quad);
                        }

                        query.delete = quads;

                        return query;
                    })(result1[4])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[38] DeleteWhere");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Modify() {
                    var cacheKey = 'Modify@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var savedPos3 = pos;
                    if (input.substr(pos, 4) === "WITH") {
                        var result34 = "WITH";
                        pos += 4;
                    } else {
                        var result34 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"WITH\"");
                        }
                    }
                    if (result34 !== null) {
                        var result29 = result34;
                    } else {
                        if (input.substr(pos, 4) === "with") {
                            var result33 = "with";
                            pos += 4;
                        } else {
                            var result33 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"with\"");
                            }
                        }
                        if (result33 !== null) {
                            var result29 = result33;
                        } else {
                            var result29 = null;;
                        };
                    }
                    if (result29 !== null) {
                        var result30 = [];
                        var result32 = parse_WS();
                        while (result32 !== null) {
                            result30.push(result32);
                            var result32 = parse_WS();
                        }
                        if (result30 !== null) {
                            var result31 = parse_IRIref();
                            if (result31 !== null) {
                                var result28 = [result29, result30, result31];
                            } else {
                                var result28 = null;
                                pos = savedPos3;
                            }
                        } else {
                            var result28 = null;
                            pos = savedPos3;
                        }
                    } else {
                        var result28 = null;
                        pos = savedPos3;
                    }
                    var result3 = result28 !== null ? result28 : '';
                    if (result3 !== null) {
                        var result4 = [];
                        var result27 = parse_WS();
                        while (result27 !== null) {
                            result4.push(result27);
                            var result27 = parse_WS();
                        }
                        if (result4 !== null) {
                            var savedPos2 = pos;
                            var result22 = parse_DeleteClause();
                            if (result22 !== null) {
                                var result23 = [];
                                var result26 = parse_WS();
                                while (result26 !== null) {
                                    result23.push(result26);
                                    var result26 = parse_WS();
                                }
                                if (result23 !== null) {
                                    var result25 = parse_InsertClause();
                                    var result24 = result25 !== null ? result25 : '';
                                    if (result24 !== null) {
                                        var result21 = [result22, result23, result24];
                                    } else {
                                        var result21 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result21 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result21 = null;
                                pos = savedPos2;
                            }
                            if (result21 !== null) {
                                var result5 = result21;
                            } else {
                                var result20 = parse_InsertClause();
                                if (result20 !== null) {
                                    var result5 = result20;
                                } else {
                                    var result5 = null;;
                                };
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result19 = parse_WS();
                                while (result19 !== null) {
                                    result6.push(result19);
                                    var result19 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result18 = parse_UsingClause();
                                    while (result18 !== null) {
                                        result7.push(result18);
                                        var result18 = parse_UsingClause();
                                    }
                                    if (result7 !== null) {
                                        var result8 = [];
                                        var result17 = parse_WS();
                                        while (result17 !== null) {
                                            result8.push(result17);
                                            var result17 = parse_WS();
                                        }
                                        if (result8 !== null) {
                                            if (input.substr(pos, 5) === "WHERE") {
                                                var result16 = "WHERE";
                                                pos += 5;
                                            } else {
                                                var result16 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"WHERE\"");
                                                }
                                            }
                                            if (result16 !== null) {
                                                var result9 = result16;
                                            } else {
                                                if (input.substr(pos, 5) === "where") {
                                                    var result15 = "where";
                                                    pos += 5;
                                                } else {
                                                    var result15 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"where\"");
                                                    }
                                                }
                                                if (result15 !== null) {
                                                    var result9 = result15;
                                                } else {
                                                    var result9 = null;;
                                                };
                                            }
                                            if (result9 !== null) {
                                                var result10 = [];
                                                var result14 = parse_WS();
                                                while (result14 !== null) {
                                                    result10.push(result14);
                                                    var result14 = parse_WS();
                                                }
                                                if (result10 !== null) {
                                                    var result11 = parse_GroupGraphPattern();
                                                    if (result11 !== null) {
                                                        var result12 = [];
                                                        var result13 = parse_WS();
                                                        while (result13 !== null) {
                                                            result12.push(result13);
                                                            var result13 = parse_WS();
                                                        }
                                                        if (result12 !== null) {
                                                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                                        } else {
                                                            var result1 = null;
                                                            pos = savedPos1;
                                                        }
                                                    } else {
                                                        var result1 = null;
                                                        pos = savedPos1;
                                                    }
                                                } else {
                                                    var result1 = null;
                                                    pos = savedPos1;
                                                }
                                            } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(wg, dic, uc, p) {
                        var query = {};
                        query.kind = 'modify';

                        if(wg != "") {
                            query.with = wg[2];
                        } else {
                            query.with = null;
                        }


                        if(dic.length === 3 && dic[2] === '') {
                            query.delete = dic[0];
                            query.insert = null;
                        } else if(dic.length === 3 && dic[0].length != null && dic[1].length != null && dic[2].length != null) {
                            query.delete = dic[0];
                            query.insert = dic[2];
                        } else  {
                            query.insert = dic;
                            query.delete = null;
                        }

                        if(uc != '') {
                            query.using = uc;
                        }

                        query.pattern = p;

                        return query;
                    })(result1[0], result1[2], result1[4], result1[8])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[39] Modify");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DeleteClause() {
                    var cacheKey = 'DeleteClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 6) === "DELETE") {
                        var result6 = "DELETE";
                        pos += 6;
                    } else {
                        var result6 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"DELETE\"");
                        }
                    }
                    if (result6 !== null) {
                        var result3 = result6;
                    } else {
                        if (input.substr(pos, 6) === "delete") {
                            var result5 = "delete";
                            pos += 6;
                        } else {
                            var result5 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"delete\"");
                            }
                        }
                        if (result5 !== null) {
                            var result3 = result5;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = parse_QuadPattern();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(q) {
                        return q;
                    })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[40] DeleteClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_InsertClause() {
                    var cacheKey = 'InsertClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 6) === "INSERT") {
                        var result6 = "INSERT";
                        pos += 6;
                    } else {
                        var result6 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"INSERT\"");
                        }
                    }
                    if (result6 !== null) {
                        var result3 = result6;
                    } else {
                        if (input.substr(pos, 6) === "insert") {
                            var result5 = "insert";
                            pos += 6;
                        } else {
                            var result5 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"insert\"");
                            }
                        }
                        if (result5 !== null) {
                            var result3 = result5;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = parse_QuadPattern();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(q) {
                        return q;
                    })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[41] InsertClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_UsingClause() {
                    var cacheKey = 'UsingClause@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result18 = parse_WS();
                    while (result18 !== null) {
                        result3.push(result18);
                        var result18 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 5) === "USING") {
                            var result17 = "USING";
                            pos += 5;
                        } else {
                            var result17 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"USING\"");
                            }
                        }
                        if (result17 !== null) {
                            var result4 = result17;
                        } else {
                            if (input.substr(pos, 5) === "using") {
                                var result16 = "using";
                                pos += 5;
                            } else {
                                var result16 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"using\"");
                                }
                            }
                            if (result16 !== null) {
                                var result4 = result16;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result15 = parse_WS();
                            while (result15 !== null) {
                                result5.push(result15);
                                var result15 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result14 = parse_IRIref();
                                if (result14 !== null) {
                                    var result6 = result14;
                                } else {
                                    var savedPos2 = pos;
                                    if (input.substr(pos, 5) === "NAMED") {
                                        var result13 = "NAMED";
                                        pos += 5;
                                    } else {
                                        var result13 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"NAMED\"");
                                        }
                                    }
                                    if (result13 !== null) {
                                        var result8 = result13;
                                    } else {
                                        if (input.substr(pos, 5) === "named") {
                                            var result12 = "named";
                                            pos += 5;
                                        } else {
                                            var result12 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"named\"");
                                            }
                                        }
                                        if (result12 !== null) {
                                            var result8 = result12;
                                        } else {
                                            var result8 = null;;
                                        };
                                    }
                                    if (result8 !== null) {
                                        var result9 = [];
                                        var result11 = parse_WS();
                                        while (result11 !== null) {
                                            result9.push(result11);
                                            var result11 = parse_WS();
                                        }
                                        if (result9 !== null) {
                                            var result10 = parse_IRIref();
                                            if (result10 !== null) {
                                                var result7 = [result8, result9, result10];
                                            } else {
                                                var result7 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result7 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result7 = null;
                                        pos = savedPos2;
                                    }
                                    if (result7 !== null) {
                                        var result6 = result7;
                                    } else {
                                        var result6 = null;;
                                    };
                                }
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(g) {
                        if(g.length!=null) {
                            return {kind: 'named', uri: g[2]};
                        } else {
                            return {kind: 'default', uri: g};
                        }
                    })(result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[42] UsingClause");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GraphRef() {
                    var cacheKey = 'GraphRef@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 5) === "GRAPH") {
                        var result8 = "GRAPH";
                        pos += 5;
                    } else {
                        var result8 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"GRAPH\"");
                        }
                    }
                    if (result8 !== null) {
                        var result3 = result8;
                    } else {
                        if (input.substr(pos, 5) === "graph") {
                            var result7 = "graph";
                            pos += 5;
                        } else {
                            var result7 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"graph\"");
                            }
                        }
                        if (result7 !== null) {
                            var result3 = result7;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result6 = parse_WS();
                        while (result6 !== null) {
                            result4.push(result6);
                            var result6 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_IRIref();
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(i) {
                        return i;
                    })(result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[43] GraphRef");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GraphRefAll() {
                    var cacheKey = 'GraphRefAll@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos3 = pos;
                    var result17 = parse_GraphRef();
                    var result18 = result17 !== null
                        ? (function(g) {
                        return g;
                    })(result17)
                        : null;
                    if (result18 !== null) {
                        var result16 = result18;
                    } else {
                        var result16 = null;
                        pos = savedPos3;
                    }
                    if (result16 !== null) {
                        var result0 = result16;
                    } else {
                        var savedPos2 = pos;
                        if (input.substr(pos, 7) === "DEFAULT") {
                            var result15 = "DEFAULT";
                            pos += 7;
                        } else {
                            var result15 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"DEFAULT\"");
                            }
                        }
                        if (result15 !== null) {
                            var result12 = result15;
                        } else {
                            if (input.substr(pos, 7) === "default") {
                                var result14 = "default";
                                pos += 7;
                            } else {
                                var result14 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"default\"");
                                }
                            }
                            if (result14 !== null) {
                                var result12 = result14;
                            } else {
                                var result12 = null;;
                            };
                        }
                        var result13 = result12 !== null
                            ? (function() {
                            return 'default';
                        })()
                            : null;
                        if (result13 !== null) {
                            var result11 = result13;
                        } else {
                            var result11 = null;
                            pos = savedPos2;
                        }
                        if (result11 !== null) {
                            var result0 = result11;
                        } else {
                            var savedPos1 = pos;
                            if (input.substr(pos, 5) === "NAMED") {
                                var result10 = "NAMED";
                                pos += 5;
                            } else {
                                var result10 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"NAMED\"");
                                }
                            }
                            if (result10 !== null) {
                                var result7 = result10;
                            } else {
                                if (input.substr(pos, 5) === "named") {
                                    var result9 = "named";
                                    pos += 5;
                                } else {
                                    var result9 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"named\"");
                                    }
                                }
                                if (result9 !== null) {
                                    var result7 = result9;
                                } else {
                                    var result7 = null;;
                                };
                            }
                            var result8 = result7 !== null
                                ? (function() {
                                return 'named';
                            })()
                                : null;
                            if (result8 !== null) {
                                var result6 = result8;
                            } else {
                                var result6 = null;
                                pos = savedPos1;
                            }
                            if (result6 !== null) {
                                var result0 = result6;
                            } else {
                                var savedPos0 = pos;
                                if (input.substr(pos, 3) === "ALL") {
                                    var result5 = "ALL";
                                    pos += 3;
                                } else {
                                    var result5 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"ALL\"");
                                    }
                                }
                                if (result5 !== null) {
                                    var result2 = result5;
                                } else {
                                    if (input.substr(pos, 3) === "all") {
                                        var result4 = "all";
                                        pos += 3;
                                    } else {
                                        var result4 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"all\"");
                                        }
                                    }
                                    if (result4 !== null) {
                                        var result2 = result4;
                                    } else {
                                        var result2 = null;;
                                    };
                                }
                                var result3 = result2 !== null
                                    ? (function() {
                                    return 'all';
                                })()
                                    : null;
                                if (result3 !== null) {
                                    var result1 = result3;
                                } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                }
                                if (result1 !== null) {
                                    var result0 = result1;
                                } else {
                                    var result0 = null;;
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[44] GraphRefAll");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_QuadPattern() {
                    var cacheKey = 'QuadPattern@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result13 = parse_WS();
                    while (result13 !== null) {
                        result3.push(result13);
                        var result13 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 1) === "{") {
                            var result4 = "{";
                            pos += 1;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"{\"");
                            }
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result12 = parse_WS();
                            while (result12 !== null) {
                                result5.push(result12);
                                var result12 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_Quads();
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result11 = parse_WS();
                                    while (result11 !== null) {
                                        result7.push(result11);
                                        var result11 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        if (input.substr(pos, 1) === "}") {
                                            var result8 = "}";
                                            pos += 1;
                                        } else {
                                            var result8 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"}\"");
                                            }
                                        }
                                        if (result8 !== null) {
                                            var result9 = [];
                                            var result10 = parse_WS();
                                            while (result10 !== null) {
                                                result9.push(result10);
                                                var result10 = parse_WS();
                                            }
                                            if (result9 !== null) {
                                                var result1 = [result3, result4, result5, result6, result7, result8, result9];
                                            } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(qs) {
                        return qs.quadsContext;
                    })(result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[45] QuadPattern");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_QuadData() {
                    var cacheKey = 'QuadData@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result13 = parse_WS();
                    while (result13 !== null) {
                        result3.push(result13);
                        var result13 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 1) === "{") {
                            var result4 = "{";
                            pos += 1;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"{\"");
                            }
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result12 = parse_WS();
                            while (result12 !== null) {
                                result5.push(result12);
                                var result12 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_Quads();
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result11 = parse_WS();
                                    while (result11 !== null) {
                                        result7.push(result11);
                                        var result11 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        if (input.substr(pos, 1) === "}") {
                                            var result8 = "}";
                                            pos += 1;
                                        } else {
                                            var result8 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"}\"");
                                            }
                                        }
                                        if (result8 !== null) {
                                            var result9 = [];
                                            var result10 = parse_WS();
                                            while (result10 !== null) {
                                                result9.push(result10);
                                                var result10 = parse_WS();
                                            }
                                            if (result9 !== null) {
                                                var result1 = [result3, result4, result5, result6, result7, result8, result9];
                                            } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(qs) {
                        return qs.quadsContext;
                    })(result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[46] QuadData");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Quads() {
                    var cacheKey = 'Quads@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result11 = parse_TriplesTemplate();
                    var result3 = result11 !== null ? result11 : '';
                    if (result3 !== null) {
                        var result4 = [];
                        var savedPos2 = pos;
                        var result6 = parse_QuadsNotTriples();
                        if (result6 !== null) {
                            if (input.substr(pos, 1) === ".") {
                                var result10 = ".";
                                pos += 1;
                            } else {
                                var result10 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\".\"");
                                }
                            }
                            var result7 = result10 !== null ? result10 : '';
                            if (result7 !== null) {
                                var result9 = parse_TriplesTemplate();
                                var result8 = result9 !== null ? result9 : '';
                                if (result8 !== null) {
                                    var result5 = [result6, result7, result8];
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        } else {
                            var result5 = null;
                            pos = savedPos2;
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var savedPos2 = pos;
                            var result6 = parse_QuadsNotTriples();
                            if (result6 !== null) {
                                if (input.substr(pos, 1) === ".") {
                                    var result10 = ".";
                                    pos += 1;
                                } else {
                                    var result10 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\".\"");
                                    }
                                }
                                var result7 = result10 !== null ? result10 : '';
                                if (result7 !== null) {
                                    var result9 = parse_TriplesTemplate();
                                    var result8 = result9 !== null ? result9 : '';
                                    if (result8 !== null) {
                                        var result5 = [result6, result7, result8];
                                    } else {
                                        var result5 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(ts, qs) {
                        var quads = []
                        if(ts.triplesContext != null && ts.triplesContext != null) {
                            for(var i=0; i<ts.triplesContext.length; i++) {
                                var triple = ts.triplesContext[i]
                                triple.graph = null;
                                quads.push(triple)
                            }
                        }

                        if(qs && qs.length>0 && qs[0].length > 0) {
                            quads = quads.concat(qs[0][0].quadsContext);

                            if( qs[0][2] != null && qs[0][2].triplesContext != null) {
                                for(var i=0; i<qs[0][2].triplesContext.length; i++) {
                                    var triple = qs[0][2].triplesContext[i]
                                    triple.graph = null;
                                    quads.push(triple)
                                }
                            }
                        }

                        return {token:'quads',
                            quadsContext: quads}
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[47] Quads");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_QuadsNotTriples() {
                    var cacheKey = 'QuadsNotTriples@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result22 = parse_WS();
                    while (result22 !== null) {
                        result3.push(result22);
                        var result22 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 5) === "GRAPH") {
                            var result21 = "GRAPH";
                            pos += 5;
                        } else {
                            var result21 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"GRAPH\"");
                            }
                        }
                        if (result21 !== null) {
                            var result4 = result21;
                        } else {
                            if (input.substr(pos, 5) === "graph") {
                                var result20 = "graph";
                                pos += 5;
                            } else {
                                var result20 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"graph\"");
                                }
                            }
                            if (result20 !== null) {
                                var result4 = result20;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result19 = parse_WS();
                            while (result19 !== null) {
                                result5.push(result19);
                                var result19 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_VarOrIRIref();
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result18 = parse_WS();
                                    while (result18 !== null) {
                                        result7.push(result18);
                                        var result18 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        if (input.substr(pos, 1) === "{") {
                                            var result8 = "{";
                                            pos += 1;
                                        } else {
                                            var result8 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"{\"");
                                            }
                                        }
                                        if (result8 !== null) {
                                            var result9 = [];
                                            var result17 = parse_WS();
                                            while (result17 !== null) {
                                                result9.push(result17);
                                                var result17 = parse_WS();
                                            }
                                            if (result9 !== null) {
                                                var result16 = parse_TriplesTemplate();
                                                var result10 = result16 !== null ? result16 : '';
                                                if (result10 !== null) {
                                                    var result11 = [];
                                                    var result15 = parse_WS();
                                                    while (result15 !== null) {
                                                        result11.push(result15);
                                                        var result15 = parse_WS();
                                                    }
                                                    if (result11 !== null) {
                                                        if (input.substr(pos, 1) === "}") {
                                                            var result12 = "}";
                                                            pos += 1;
                                                        } else {
                                                            var result12 = null;
                                                            if (reportMatchFailures) {
                                                                matchFailed("\"}\"");
                                                            }
                                                        }
                                                        if (result12 !== null) {
                                                            var result13 = [];
                                                            var result14 = parse_WS();
                                                            while (result14 !== null) {
                                                                result13.push(result14);
                                                                var result14 = parse_WS();
                                                            }
                                                            if (result13 !== null) {
                                                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                                            } else {
                                                                var result1 = null;
                                                                pos = savedPos1;
                                                            }
                                                        } else {
                                                            var result1 = null;
                                                            pos = savedPos1;
                                                        }
                                                    } else {
                                                        var result1 = null;
                                                        pos = savedPos1;
                                                    }
                                                } else {
                                                    var result1 = null;
                                                    pos = savedPos1;
                                                }
                                            } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(g, ts) {
                        var quads = []
                        for(var i=0; i<ts.triplesContext.length; i++) {
                            var triple = ts.triplesContext[i]
                            triple.graph = g;
                            quads.push(triple)
                        }

                        return {token:'quadsnottriples',
                            quadsContext: quads}
                    })(result1[3], result1[7])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[48] QuadsNotTriples");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_TriplesTemplate() {
                    var cacheKey = 'TriplesTemplate@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_TriplesSameSubject();
                    if (result3 !== null) {
                        var savedPos2 = pos;
                        var result6 = [];
                        var result12 = parse_WS();
                        while (result12 !== null) {
                            result6.push(result12);
                            var result12 = parse_WS();
                        }
                        if (result6 !== null) {
                            if (input.substr(pos, 1) === ".") {
                                var result7 = ".";
                                pos += 1;
                            } else {
                                var result7 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\".\"");
                                }
                            }
                            if (result7 !== null) {
                                var result8 = [];
                                var result11 = parse_WS();
                                while (result11 !== null) {
                                    result8.push(result11);
                                    var result11 = parse_WS();
                                }
                                if (result8 !== null) {
                                    var result10 = parse_TriplesTemplate();
                                    var result9 = result10 !== null ? result10 : '';
                                    if (result9 !== null) {
                                        var result5 = [result6, result7, result8, result9];
                                    } else {
                                        var result5 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        } else {
                            var result5 = null;
                            pos = savedPos2;
                        }
                        var result4 = result5 !== null ? result5 : '';
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(b, bs) {
                        var triples = b.triplesContext;
                        var toTest = null;
                        if(typeof(bs) === 'object') {
                            if(bs.length != null) {
                                if(bs[3].triplesContext!=null) {
                                    triples = triples.concat(bs[3].triplesContext);
                                }
                            }
                        }

                        return {token:'triplestemplate',
                            triplesContext: triples}
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[49] TriplesTemplate");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GroupGraphPattern() {
                    var cacheKey = 'GroupGraphPattern@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos2 = pos;
                    var savedPos3 = pos;
                    if (input.substr(pos, 1) === "{") {
                        var result14 = "{";
                        pos += 1;
                    } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"{\"");
                        }
                    }
                    if (result14 !== null) {
                        var result15 = [];
                        var result20 = parse_WS();
                        while (result20 !== null) {
                            result15.push(result20);
                            var result20 = parse_WS();
                        }
                        if (result15 !== null) {
                            var result16 = parse_SubSelect();
                            if (result16 !== null) {
                                var result17 = [];
                                var result19 = parse_WS();
                                while (result19 !== null) {
                                    result17.push(result19);
                                    var result19 = parse_WS();
                                }
                                if (result17 !== null) {
                                    if (input.substr(pos, 1) === "}") {
                                        var result18 = "}";
                                        pos += 1;
                                    } else {
                                        var result18 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"}\"");
                                        }
                                    }
                                    if (result18 !== null) {
                                        var result12 = [result14, result15, result16, result17, result18];
                                    } else {
                                        var result12 = null;
                                        pos = savedPos3;
                                    }
                                } else {
                                    var result12 = null;
                                    pos = savedPos3;
                                }
                            } else {
                                var result12 = null;
                                pos = savedPos3;
                            }
                        } else {
                            var result12 = null;
                            pos = savedPos3;
                        }
                    } else {
                        var result12 = null;
                        pos = savedPos3;
                    }
                    var result13 = result12 !== null
                        ? (function(p) {
                        return p;
                    })(result12[2])
                        : null;
                    if (result13 !== null) {
                        var result11 = result13;
                    } else {
                        var result11 = null;
                        pos = savedPos2;
                    }
                    if (result11 !== null) {
                        var result0 = result11;
                    } else {
                        var savedPos0 = pos;
                        var savedPos1 = pos;
                        if (input.substr(pos, 1) === "{") {
                            var result4 = "{";
                            pos += 1;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"{\"");
                            }
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result10 = parse_WS();
                            while (result10 !== null) {
                                result5.push(result10);
                                var result10 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_GroupGraphPatternSub();
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result9 = parse_WS();
                                    while (result9 !== null) {
                                        result7.push(result9);
                                        var result9 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        if (input.substr(pos, 1) === "}") {
                                            var result8 = "}";
                                            pos += 1;
                                        } else {
                                            var result8 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"}\"");
                                            }
                                        }
                                        if (result8 !== null) {
                                            var result2 = [result4, result5, result6, result7, result8];
                                        } else {
                                            var result2 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result2 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result2 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result2 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result2 = null;
                            pos = savedPos1;
                        }
                        var result3 = result2 !== null
                            ? (function(p) {
                            return p;
                        })(result2[2])
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[50] GroupGraphPattern");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GroupGraphPatternSub() {
                    var cacheKey = 'GroupGraphPatternSub@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result17 = parse_TriplesBlock();
                    var result3 = result17 !== null ? result17 : '';
                    if (result3 !== null) {
                        var result4 = [];
                        var result16 = parse_WS();
                        while (result16 !== null) {
                            result4.push(result16);
                            var result16 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var savedPos2 = pos;
                            var result7 = parse_GraphPatternNotTriples();
                            if (result7 !== null) {
                                var result8 = [];
                                var result15 = parse_WS();
                                while (result15 !== null) {
                                    result8.push(result15);
                                    var result15 = parse_WS();
                                }
                                if (result8 !== null) {
                                    if (input.substr(pos, 1) === ".") {
                                        var result14 = ".";
                                        pos += 1;
                                    } else {
                                        var result14 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\".\"");
                                        }
                                    }
                                    var result9 = result14 !== null ? result14 : '';
                                    if (result9 !== null) {
                                        var result10 = [];
                                        var result13 = parse_WS();
                                        while (result13 !== null) {
                                            result10.push(result13);
                                            var result13 = parse_WS();
                                        }
                                        if (result10 !== null) {
                                            var result12 = parse_TriplesBlock();
                                            var result11 = result12 !== null ? result12 : '';
                                            if (result11 !== null) {
                                                var result6 = [result7, result8, result9, result10, result11];
                                            } else {
                                                var result6 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result6 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result6 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result6 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result6 = null;
                                pos = savedPos2;
                            }
                            while (result6 !== null) {
                                result5.push(result6);
                                var savedPos2 = pos;
                                var result7 = parse_GraphPatternNotTriples();
                                if (result7 !== null) {
                                    var result8 = [];
                                    var result15 = parse_WS();
                                    while (result15 !== null) {
                                        result8.push(result15);
                                        var result15 = parse_WS();
                                    }
                                    if (result8 !== null) {
                                        if (input.substr(pos, 1) === ".") {
                                            var result14 = ".";
                                            pos += 1;
                                        } else {
                                            var result14 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\".\"");
                                            }
                                        }
                                        var result9 = result14 !== null ? result14 : '';
                                        if (result9 !== null) {
                                            var result10 = [];
                                            var result13 = parse_WS();
                                            while (result13 !== null) {
                                                result10.push(result13);
                                                var result13 = parse_WS();
                                            }
                                            if (result10 !== null) {
                                                var result12 = parse_TriplesBlock();
                                                var result11 = result12 !== null ? result12 : '';
                                                if (result11 !== null) {
                                                    var result6 = [result7, result8, result9, result10, result11];
                                                } else {
                                                    var result6 = null;
                                                    pos = savedPos2;
                                                }
                                            } else {
                                                var result6 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result6 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result6 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result6 = null;
                                    pos = savedPos2;
                                }
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(tb, tbs) {
                        var subpatterns = [];
                        if(tb != null && tb != []) {
                            subpatterns.push(tb);
                        }

                        for(var i=0; i<tbs.length; i++) {
                            for(var j=0; j< tbs[i].length; j++) {
                                if(tbs[i][j].token != null) {
                                    subpatterns.push(tbs[i][j]);
                                }
                            }
                        }

                        var compactedSubpatterns = [];

                        var currentBasicGraphPatterns = [];
                        var currentFilters = [];

                        for(var i=0; i<subpatterns.length; i++) {
                            if(subpatterns[i].token!='triplespattern' && subpatterns[i].token != 'filter') {
                                if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                                    var triplesContext = [];
                                    for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                                        triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                                    }
                                    if(triplesContext.length > 0) {
                                        compactedSubpatterns.push({token: 'basicgraphpattern',
                                            triplesContext: triplesContext});
                                    }
                                    currentBasicGraphPatterns = [];
                                }
                                compactedSubpatterns.push(subpatterns[i]);
                            } else {
                                if(subpatterns[i].token === 'triplespattern') {
                                    currentBasicGraphPatterns.push(subpatterns[i]);
                                } else {
                                    currentFilters.push(subpatterns[i]);
                                }
                            }
                        }

                        if(currentBasicGraphPatterns.length != 0 || currentFilters.length != 0) {
                            var triplesContext = [];
                            for(var j=0; j<currentBasicGraphPatterns.length; j++) {
                                triplesContext = triplesContext.concat(currentBasicGraphPatterns[j].triplesContext);
                            }
                            if(triplesContext.length > 0) {
                                compactedSubpatterns.push({token: 'basicgraphpattern',
                                    triplesContext: triplesContext});
                            }
                        }

                        //      if(compactedSubpatterns.length == 1) {
                        //          compactedSubpatterns[0].filters = currentFilters;
                        //          return compactedSubpatterns[0];
                        //      } else  {
                        return { token: 'groupgraphpattern',
                            patterns: compactedSubpatterns,
                            filters: currentFilters }
                        //      }
                    })(result1[0], result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[51] GroupGraphPatternSub");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_TriplesBlock() {
                    var cacheKey = 'TriplesBlock@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_TriplesSameSubjectPath();
                    if (result3 !== null) {
                        var savedPos2 = pos;
                        var result6 = [];
                        var result10 = parse_WS();
                        while (result10 !== null) {
                            result6.push(result10);
                            var result10 = parse_WS();
                        }
                        if (result6 !== null) {
                            if (input.substr(pos, 1) === ".") {
                                var result7 = ".";
                                pos += 1;
                            } else {
                                var result7 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\".\"");
                                }
                            }
                            if (result7 !== null) {
                                var result9 = parse_TriplesBlock();
                                var result8 = result9 !== null ? result9 : '';
                                if (result8 !== null) {
                                    var result5 = [result6, result7, result8];
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        } else {
                            var result5 = null;
                            pos = savedPos2;
                        }
                        var result4 = result5 !== null ? result5 : '';
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(b, bs) {
                        var triples = b.triplesContext;
                        var toTest = null;
                        if(typeof(bs) === 'object') {
                            if(bs.length != null) {
                                if(bs[2].triplesContext!=null) {
                                    triples = triples.concat(bs[2].triplesContext);
                                }
                            }
                        }

                        return {token:'triplespattern',
                            triplesContext: triples}
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[54] TriplesBlock");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GraphPatternNotTriples() {
                    var cacheKey = 'GraphPatternNotTriples@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result6 = parse_GroupOrUnionGraphPattern();
                    if (result6 !== null) {
                        var result0 = result6;
                    } else {
                        var result5 = parse_OptionalGraphPattern();
                        if (result5 !== null) {
                            var result0 = result5;
                        } else {
                            var result4 = parse_MinusGraphPattern();
                            if (result4 !== null) {
                                var result0 = result4;
                            } else {
                                var result3 = parse_GraphGraphPattern();
                                if (result3 !== null) {
                                    var result0 = result3;
                                } else {
                                    var result2 = parse_ServiceGraphPattern();
                                    if (result2 !== null) {
                                        var result0 = result2;
                                    } else {
                                        var result1 = parse_Filter();
                                        if (result1 !== null) {
                                            var result0 = result1;
                                        } else {
                                            var result0 = null;;
                                        };
                                    };
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[53] GraphPatternNotTriples");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_OptionalGraphPattern() {
                    var cacheKey = 'OptionalGraphPattern@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result10 = parse_WS();
                    while (result10 !== null) {
                        result3.push(result10);
                        var result10 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 8) === "OPTIONAL") {
                            var result9 = "OPTIONAL";
                            pos += 8;
                        } else {
                            var result9 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"OPTIONAL\"");
                            }
                        }
                        if (result9 !== null) {
                            var result4 = result9;
                        } else {
                            if (input.substr(pos, 8) === "optional") {
                                var result8 = "optional";
                                pos += 8;
                            } else {
                                var result8 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"optional\"");
                                }
                            }
                            if (result8 !== null) {
                                var result4 = result8;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result7 = parse_WS();
                            while (result7 !== null) {
                                result5.push(result7);
                                var result7 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_GroupGraphPattern();
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(v) {
                        return { token: 'optionalgraphpattern',
                            value: v }
                    })(result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[54] OptionalGraphPattern");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GraphGraphPattern() {
                    var cacheKey = 'GraphGraphPattern@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result13 = parse_WS();
                    while (result13 !== null) {
                        result3.push(result13);
                        var result13 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 5) === "GRAPH") {
                            var result12 = "GRAPH";
                            pos += 5;
                        } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"GRAPH\"");
                            }
                        }
                        if (result12 !== null) {
                            var result4 = result12;
                        } else {
                            if (input.substr(pos, 5) === "graph") {
                                var result11 = "graph";
                                pos += 5;
                            } else {
                                var result11 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"graph\"");
                                }
                            }
                            if (result11 !== null) {
                                var result4 = result11;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result10 = parse_WS();
                            while (result10 !== null) {
                                result5.push(result10);
                                var result10 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_VarOrIRIref();
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result9 = parse_WS();
                                    while (result9 !== null) {
                                        result7.push(result9);
                                        var result9 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        var result8 = parse_GroupGraphPattern();
                                        if (result8 !== null) {
                                            var result1 = [result3, result4, result5, result6, result7, result8];
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(g, gg) {
                        for(var i=0; i<gg.patterns.length; i++) {
                            var quads = []
                            var ts = gg.patterns[i];
                            for(var j=0; j<ts.triplesContext.length; j++) {
                                var triple = ts.triplesContext[j]
                                triple.graph = g;
                            }
                        }

                        gg.token = 'groupgraphpattern'
                        return gg;
                    })(result1[3], result1[5])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[55] GraphGraphPattern");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ServiceGraphPattern() {
                    var cacheKey = 'ServiceGraphPattern@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 7) === "SERVICE") {
                        var result3 = "SERVICE";
                        pos += 7;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"SERVICE\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_VarOrIRIref();
                        if (result4 !== null) {
                            var result5 = parse_GroupGraphPattern();
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(v, ts) {
                        return {token: 'servicegraphpattern',
                            status: 'todo',
                            value: [v,ts] }
                    })(result1[1], result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[56] ServiceGraphPattern");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_MinusGraphPattern() {
                    var cacheKey = 'MinusGraphPattern@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 5) === "MINUS") {
                        var result3 = "MINUS";
                        pos += 5;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"MINUS\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_GroupGraphPattern();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(ts) {
                        return {token: 'minusgraphpattern',
                            status: 'todo',
                            value: ts}
                    })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[57] MinusGraphPattern");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GroupOrUnionGraphPattern() {
                    var cacheKey = 'GroupOrUnionGraphPattern@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_GroupGraphPattern();
                    if (result3 !== null) {
                        var result4 = [];
                        var savedPos2 = pos;
                        var result6 = [];
                        var result13 = parse_WS();
                        while (result13 !== null) {
                            result6.push(result13);
                            var result13 = parse_WS();
                        }
                        if (result6 !== null) {
                            if (input.substr(pos, 5) === "UNION") {
                                var result12 = "UNION";
                                pos += 5;
                            } else {
                                var result12 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"UNION\"");
                                }
                            }
                            if (result12 !== null) {
                                var result7 = result12;
                            } else {
                                if (input.substr(pos, 5) === "union") {
                                    var result11 = "union";
                                    pos += 5;
                                } else {
                                    var result11 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"union\"");
                                    }
                                }
                                if (result11 !== null) {
                                    var result7 = result11;
                                } else {
                                    var result7 = null;;
                                };
                            }
                            if (result7 !== null) {
                                var result8 = [];
                                var result10 = parse_WS();
                                while (result10 !== null) {
                                    result8.push(result10);
                                    var result10 = parse_WS();
                                }
                                if (result8 !== null) {
                                    var result9 = parse_GroupGraphPattern();
                                    if (result9 !== null) {
                                        var result5 = [result6, result7, result8, result9];
                                    } else {
                                        var result5 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        } else {
                            var result5 = null;
                            pos = savedPos2;
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var savedPos2 = pos;
                            var result6 = [];
                            var result13 = parse_WS();
                            while (result13 !== null) {
                                result6.push(result13);
                                var result13 = parse_WS();
                            }
                            if (result6 !== null) {
                                if (input.substr(pos, 5) === "UNION") {
                                    var result12 = "UNION";
                                    pos += 5;
                                } else {
                                    var result12 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"UNION\"");
                                    }
                                }
                                if (result12 !== null) {
                                    var result7 = result12;
                                } else {
                                    if (input.substr(pos, 5) === "union") {
                                        var result11 = "union";
                                        pos += 5;
                                    } else {
                                        var result11 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"union\"");
                                        }
                                    }
                                    if (result11 !== null) {
                                        var result7 = result11;
                                    } else {
                                        var result7 = null;;
                                    };
                                }
                                if (result7 !== null) {
                                    var result8 = [];
                                    var result10 = parse_WS();
                                    while (result10 !== null) {
                                        result8.push(result10);
                                        var result10 = parse_WS();
                                    }
                                    if (result8 !== null) {
                                        var result9 = parse_GroupGraphPattern();
                                        if (result9 !== null) {
                                            var result5 = [result6, result7, result8, result9];
                                        } else {
                                            var result5 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result5 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(a, b) {
                        if(b.length === 0) {
                            return a;
                        } else {

                            var lastToken = {token: 'graphunionpattern',
                                value: [a]};

                            for(var i=0; i<b.length; i++) {
                                if(i==b.length-1) {
                                    lastToken.value.push(b[i][3]);
                                } else {
                                    lastToken.value.push(b[i][3]);
                                    var newToken = {token: 'graphunionpattern',
                                        value: [lastToken]}

                                    lastToken = newToken;
                                }
                            }

                            return lastToken;

                        }
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[58] GroupOrUnionGraphPattern");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Filter() {
                    var cacheKey = 'Filter@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result10 = parse_WS();
                    while (result10 !== null) {
                        result3.push(result10);
                        var result10 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 6) === "FILTER") {
                            var result9 = "FILTER";
                            pos += 6;
                        } else {
                            var result9 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"FILTER\"");
                            }
                        }
                        if (result9 !== null) {
                            var result4 = result9;
                        } else {
                            if (input.substr(pos, 6) === "filter") {
                                var result8 = "filter";
                                pos += 6;
                            } else {
                                var result8 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"filter\"");
                                }
                            }
                            if (result8 !== null) {
                                var result4 = result8;
                            } else {
                                var result4 = null;;
                            };
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result7 = parse_WS();
                            while (result7 !== null) {
                                result5.push(result7);
                                var result7 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_Constraint();
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(c) {
                        return {token: 'filter',
                            value: c}
                    })(result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[59] Filter");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Constraint() {
                    var cacheKey = 'Constraint@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result3 = parse_BrackettedExpression();
                    if (result3 !== null) {
                        var result0 = result3;
                    } else {
                        var result2 = parse_BuiltInCall();
                        if (result2 !== null) {
                            var result0 = result2;
                        } else {
                            var result1 = parse_FunctionCall();
                            if (result1 !== null) {
                                var result0 = result1;
                            } else {
                                var result0 = null;;
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[60] Constraint");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_FunctionCall() {
                    var cacheKey = 'FunctionCall@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_IRIref();
                    if (result3 !== null) {
                        var result4 = parse_ArgList();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(i, args) {
                        var fcall = {};
                        fcall.token = "expression";
                        fcall.expressionType = 'irireforfunction'
                        fcall.iriref = i;
                        fcall.args = args.value;

                        return fcall;
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[61] FunctionCall");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ArgList() {
                    var cacheKey = 'ArgList@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos3 = pos;
                    var result16 = parse_NIL();
                    var result17 = result16 !== null
                        ? (function() {
                        var args = {};
                        args.token = 'args';
                        args.value = [];
                        return args;
                    })()
                        : null;
                    if (result17 !== null) {
                        var result15 = result17;
                    } else {
                        var result15 = null;
                        pos = savedPos3;
                    }
                    if (result15 !== null) {
                        var result0 = result15;
                    } else {
                        var savedPos0 = pos;
                        var savedPos1 = pos;
                        if (input.substr(pos, 1) === "(") {
                            var result4 = "(";
                            pos += 1;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"(\"");
                            }
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 8) === "DISTINCT") {
                                var result14 = "DISTINCT";
                                pos += 8;
                            } else {
                                var result14 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"DISTINCT\"");
                                }
                            }
                            if (result14 !== null) {
                                var result12 = result14;
                            } else {
                                if (input.substr(pos, 8) === "distinct") {
                                    var result13 = "distinct";
                                    pos += 8;
                                } else {
                                    var result13 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"distinct\"");
                                    }
                                }
                                if (result13 !== null) {
                                    var result12 = result13;
                                } else {
                                    var result12 = null;;
                                };
                            }
                            var result5 = result12 !== null ? result12 : '';
                            if (result5 !== null) {
                                var result6 = parse_ConditionalOrExpression();
                                if (result6 !== null) {
                                    var result7 = [];
                                    var savedPos2 = pos;
                                    if (input.substr(pos, 1) === ",") {
                                        var result10 = ",";
                                        pos += 1;
                                    } else {
                                        var result10 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\",\"");
                                        }
                                    }
                                    if (result10 !== null) {
                                        var result11 = parse_ConditionalOrExpression();
                                        if (result11 !== null) {
                                            var result9 = [result10, result11];
                                        } else {
                                            var result9 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result9 = null;
                                        pos = savedPos2;
                                    }
                                    while (result9 !== null) {
                                        result7.push(result9);
                                        var savedPos2 = pos;
                                        if (input.substr(pos, 1) === ",") {
                                            var result10 = ",";
                                            pos += 1;
                                        } else {
                                            var result10 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\",\"");
                                            }
                                        }
                                        if (result10 !== null) {
                                            var result11 = parse_ConditionalOrExpression();
                                            if (result11 !== null) {
                                                var result9 = [result10, result11];
                                            } else {
                                                var result9 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result9 = null;
                                            pos = savedPos2;
                                        }
                                    }
                                    if (result7 !== null) {
                                        if (input.substr(pos, 1) === ")") {
                                            var result8 = ")";
                                            pos += 1;
                                        } else {
                                            var result8 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\")\"");
                                            }
                                        }
                                        if (result8 !== null) {
                                            var result2 = [result4, result5, result6, result7, result8];
                                        } else {
                                            var result2 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result2 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result2 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result2 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result2 = null;
                            pos = savedPos1;
                        }
                        var result3 = result2 !== null
                            ? (function(d, e, es) {
                            var cleanEx = [];

                            for(var i=0; i<es.length; i++) {
                                cleanEx.push(es[i][1]);
                            }
                            var args = {};
                            args.token = 'args';
                            args.value = [e].concat(cleanEx);

                            if(d!=null && d.toUpperCase()==="DISTINCT") {
                                args.distinct = true;
                            } else {
                                args.distinct = false;
                            }

                            return args;
                        })(result2[1], result2[2], result2[3])
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[62] ArgList");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ExpressionList() {
                    var cacheKey = 'ExpressionList@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos3 = pos;
                    var result12 = parse_NIL();
                    var result13 = result12 !== null
                        ? (function() {
                        var args = {};
                        args.token = 'args';
                        args.value = [];
                        return args;
                    })()
                        : null;
                    if (result13 !== null) {
                        var result11 = result13;
                    } else {
                        var result11 = null;
                        pos = savedPos3;
                    }
                    if (result11 !== null) {
                        var result0 = result11;
                    } else {
                        var savedPos0 = pos;
                        var savedPos1 = pos;
                        if (input.substr(pos, 1) === "(") {
                            var result4 = "(";
                            pos += 1;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"(\"");
                            }
                        }
                        if (result4 !== null) {
                            var result5 = parse_ConditionalOrExpression();
                            if (result5 !== null) {
                                var result6 = [];
                                var savedPos2 = pos;
                                if (input.substr(pos, 1) === ",") {
                                    var result9 = ",";
                                    pos += 1;
                                } else {
                                    var result9 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\",\"");
                                    }
                                }
                                if (result9 !== null) {
                                    var result10 = parse_ConditionalOrExpression();
                                    if (result10 !== null) {
                                        var result8 = [result9, result10];
                                    } else {
                                        var result8 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result8 = null;
                                    pos = savedPos2;
                                }
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var savedPos2 = pos;
                                    if (input.substr(pos, 1) === ",") {
                                        var result9 = ",";
                                        pos += 1;
                                    } else {
                                        var result9 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\",\"");
                                        }
                                    }
                                    if (result9 !== null) {
                                        var result10 = parse_ConditionalOrExpression();
                                        if (result10 !== null) {
                                            var result8 = [result9, result10];
                                        } else {
                                            var result8 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result8 = null;
                                        pos = savedPos2;
                                    }
                                }
                                if (result6 !== null) {
                                    if (input.substr(pos, 1) === ")") {
                                        var result7 = ")";
                                        pos += 1;
                                    } else {
                                        var result7 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\")\"");
                                        }
                                    }
                                    if (result7 !== null) {
                                        var result2 = [result4, result5, result6, result7];
                                    } else {
                                        var result2 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result2 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result2 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result2 = null;
                            pos = savedPos1;
                        }
                        var result3 = result2 !== null
                            ? (function(e, es) {
                            var cleanEx = [];

                            for(var i=0; i<es.length; i++) {
                                cleanEx.push(es[i][1]);
                            }
                            var args = {};
                            args.token = 'args';
                            args.value = [e].concat(cleanEx);

                            return args;
                        })(result2[1], result2[2])
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[63] ExpressionList");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ConstructTemplate() {
                    var cacheKey = 'ConstructTemplate@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "{") {
                        var result3 = "{";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"{\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result10 = parse_WS();
                        while (result10 !== null) {
                            result4.push(result10);
                            var result10 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result9 = parse_ConstructTriples();
                            var result5 = result9 !== null ? result9 : '';
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    if (input.substr(pos, 1) === "}") {
                                        var result7 = "}";
                                        pos += 1;
                                    } else {
                                        var result7 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"}\"");
                                        }
                                    }
                                    if (result7 !== null) {
                                        var result1 = [result3, result4, result5, result6, result7];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(ts) {
                        return ts;
                    })(result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[64] ConstructTemplate");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ConstructTriples() {
                    var cacheKey = 'ConstructTriples@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_TriplesSameSubject();
                    if (result3 !== null) {
                        var savedPos2 = pos;
                        var result6 = [];
                        var result12 = parse_WS();
                        while (result12 !== null) {
                            result6.push(result12);
                            var result12 = parse_WS();
                        }
                        if (result6 !== null) {
                            if (input.substr(pos, 1) === ".") {
                                var result7 = ".";
                                pos += 1;
                            } else {
                                var result7 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\".\"");
                                }
                            }
                            if (result7 !== null) {
                                var result8 = [];
                                var result11 = parse_WS();
                                while (result11 !== null) {
                                    result8.push(result11);
                                    var result11 = parse_WS();
                                }
                                if (result8 !== null) {
                                    var result10 = parse_ConstructTriples();
                                    var result9 = result10 !== null ? result10 : '';
                                    if (result9 !== null) {
                                        var result5 = [result6, result7, result8, result9];
                                    } else {
                                        var result5 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        } else {
                            var result5 = null;
                            pos = savedPos2;
                        }
                        var result4 = result5 !== null ? result5 : '';
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(b, bs) {
                        var triples = b.triplesContext;
                        var toTest = null;
                        if(typeof(bs) === 'object') {
                            if(bs.length != null) {
                                if(bs[3].triplesContext!=null) {
                                    triples = triples.concat(bs[3].triplesContext);
                                }
                            }
                        }

                        return {token:'triplestemplate',
                            triplesContext: triples}
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[65] ConstructTriples");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_TriplesSameSubject() {
                    var cacheKey = 'TriplesSameSubject@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos2 = pos;
                    var savedPos3 = pos;
                    var result13 = [];
                    var result18 = parse_WS();
                    while (result18 !== null) {
                        result13.push(result18);
                        var result18 = parse_WS();
                    }
                    if (result13 !== null) {
                        var result14 = parse_VarOrTerm();
                        if (result14 !== null) {
                            var result15 = [];
                            var result17 = parse_WS();
                            while (result17 !== null) {
                                result15.push(result17);
                                var result17 = parse_WS();
                            }
                            if (result15 !== null) {
                                var result16 = parse_PropertyListNotEmpty();
                                if (result16 !== null) {
                                    var result11 = [result13, result14, result15, result16];
                                } else {
                                    var result11 = null;
                                    pos = savedPos3;
                                }
                            } else {
                                var result11 = null;
                                pos = savedPos3;
                            }
                        } else {
                            var result11 = null;
                            pos = savedPos3;
                        }
                    } else {
                        var result11 = null;
                        pos = savedPos3;
                    }
                    var result12 = result11 !== null
                        ? (function(s, pairs) {
                        var triplesContext = pairs.triplesContext;
                        var subject = s;
                        if(pairs.pairs) {
                            for(var i=0; i< pairs.pairs.length; i++) {
                                var pair = pairs.pairs[i];
                                var triple = null;
                                if(pair[1].length != null)
                                    pair[1] = pair[1][0]
                                if(subject.token && subject.token==='triplesnodecollection') {
                                    triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]}
                                    triplesContext.push(triple);
                                    triplesContext = triplesContext.concat(subject.triplesContext);
                                } else {
                                    triple = {subject: subject, predicate: pair[0], object: pair[1]}
                                    triplesContext.push(triple);
                                }
                            }
                        }

                        var token = {};
                        token.token = "triplessamesubject";
                        token.triplesContext = triplesContext;
                        token.chainSubject = subject;

                        return token;
                    })(result11[1], result11[3])
                        : null;
                    if (result12 !== null) {
                        var result10 = result12;
                    } else {
                        var result10 = null;
                        pos = savedPos2;
                    }
                    if (result10 !== null) {
                        var result0 = result10;
                    } else {
                        var savedPos0 = pos;
                        var savedPos1 = pos;
                        var result4 = [];
                        var result9 = parse_WS();
                        while (result9 !== null) {
                            result4.push(result9);
                            var result9 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_TriplesNode();
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_PropertyList();
                                    if (result7 !== null) {
                                        var result2 = [result4, result5, result6, result7];
                                    } else {
                                        var result2 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result2 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result2 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result2 = null;
                            pos = savedPos1;
                        }
                        var result3 = result2 !== null
                            ? (function(tn, pairs) {
                            var triplesContext = tn.triplesContext;
                            var subject = tn.chainSubject;

                            if(pairs.pairs) {
                                for(var i=0; i< pairs.pairs.length; i++) {
                                    var pair = pairs.pairs[i];
                                    if(pair[1].length != null)
                                        pair[1] = pair[1][0]

                                    if(tn.token === "triplesnodecollection") {
                                        for(var j=0; j<subject.length; j++) {
                                            var subj = subject[j];
                                            if(subj.triplesContext != null) {
                                                var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                                triplesContext.concat(subj.triplesContext);
                                            } else {
                                                var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                                triplesContext.push(triple);
                                            }
                                        }
                                    } else {
                                        var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                                        triplesContext.push(triple);
                                    }
                                }
                            }

                            var token = {};
                            token.token = "triplessamesubject";
                            token.triplesContext = triplesContext;
                            token.chainSubject = subject;

                            return token;
                        })(result2[1], result2[3])
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[66] TriplesSameSubject");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PropertyListNotEmpty() {
                    var cacheKey = 'PropertyListNotEmpty@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_Verb();
                    if (result3 !== null) {
                        var result4 = [];
                        var result19 = parse_WS();
                        while (result19 !== null) {
                            result4.push(result19);
                            var result19 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_ObjectList();
                            if (result5 !== null) {
                                var result6 = [];
                                var savedPos2 = pos;
                                var result8 = [];
                                var result18 = parse_WS();
                                while (result18 !== null) {
                                    result8.push(result18);
                                    var result18 = parse_WS();
                                }
                                if (result8 !== null) {
                                    if (input.substr(pos, 1) === ";") {
                                        var result9 = ";";
                                        pos += 1;
                                    } else {
                                        var result9 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\";\"");
                                        }
                                    }
                                    if (result9 !== null) {
                                        var result10 = [];
                                        var result17 = parse_WS();
                                        while (result17 !== null) {
                                            result10.push(result17);
                                            var result17 = parse_WS();
                                        }
                                        if (result10 !== null) {
                                            var savedPos3 = pos;
                                            var result13 = parse_Verb();
                                            if (result13 !== null) {
                                                var result14 = [];
                                                var result16 = parse_WS();
                                                while (result16 !== null) {
                                                    result14.push(result16);
                                                    var result16 = parse_WS();
                                                }
                                                if (result14 !== null) {
                                                    var result15 = parse_ObjectList();
                                                    if (result15 !== null) {
                                                        var result12 = [result13, result14, result15];
                                                    } else {
                                                        var result12 = null;
                                                        pos = savedPos3;
                                                    }
                                                } else {
                                                    var result12 = null;
                                                    pos = savedPos3;
                                                }
                                            } else {
                                                var result12 = null;
                                                pos = savedPos3;
                                            }
                                            var result11 = result12 !== null ? result12 : '';
                                            if (result11 !== null) {
                                                var result7 = [result8, result9, result10, result11];
                                            } else {
                                                var result7 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result7 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result7 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result7 = null;
                                    pos = savedPos2;
                                }
                                while (result7 !== null) {
                                    result6.push(result7);
                                    var savedPos2 = pos;
                                    var result8 = [];
                                    var result18 = parse_WS();
                                    while (result18 !== null) {
                                        result8.push(result18);
                                        var result18 = parse_WS();
                                    }
                                    if (result8 !== null) {
                                        if (input.substr(pos, 1) === ";") {
                                            var result9 = ";";
                                            pos += 1;
                                        } else {
                                            var result9 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\";\"");
                                            }
                                        }
                                        if (result9 !== null) {
                                            var result10 = [];
                                            var result17 = parse_WS();
                                            while (result17 !== null) {
                                                result10.push(result17);
                                                var result17 = parse_WS();
                                            }
                                            if (result10 !== null) {
                                                var savedPos3 = pos;
                                                var result13 = parse_Verb();
                                                if (result13 !== null) {
                                                    var result14 = [];
                                                    var result16 = parse_WS();
                                                    while (result16 !== null) {
                                                        result14.push(result16);
                                                        var result16 = parse_WS();
                                                    }
                                                    if (result14 !== null) {
                                                        var result15 = parse_ObjectList();
                                                        if (result15 !== null) {
                                                            var result12 = [result13, result14, result15];
                                                        } else {
                                                            var result12 = null;
                                                            pos = savedPos3;
                                                        }
                                                    } else {
                                                        var result12 = null;
                                                        pos = savedPos3;
                                                    }
                                                } else {
                                                    var result12 = null;
                                                    pos = savedPos3;
                                                }
                                                var result11 = result12 !== null ? result12 : '';
                                                if (result11 !== null) {
                                                    var result7 = [result8, result9, result10, result11];
                                                } else {
                                                    var result7 = null;
                                                    pos = savedPos2;
                                                }
                                            } else {
                                                var result7 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result7 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result7 = null;
                                        pos = savedPos2;
                                    }
                                }
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(v, ol, rest) {
                        var token = {}
                        token.token = 'propertylist';
                        var triplesContext = [];
                        var pairs = [];
                        var test = [];

                        for( var i=0; i<ol.length; i++) {

                            if(ol[i].triplesContext != null) {
                                triplesContext = triplesContext.concat(ol[i].triplesContext);
                                if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                                    pairs.push([v, ol[i].chainSubject[0]]);
                                } else {
                                    pairs.push([v, ol[i].chainSubject]);
                                }

                            } else {
                                pairs.push([v, ol[i]])
                            }

                        }


                        for(var i=0; i<rest.length; i++) {
                            var tok = rest[i][3];
                            var newVerb  = tok[0];
                            var newObjsList = tok[2] || [];

                            for(var j=0; j<newObjsList.length; j++) {
                                if(newObjsList[j].triplesContext != null) {
                                    triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                                    pairs.push([newVerb, newObjsList[j].chainSubject]);
                                } else {
                                    pairs.push([newVerb, newObjsList[j]])
                                }
                            }
                        }

                        token.pairs = pairs;
                        token.triplesContext = triplesContext;

                        return token;

                    })(result1[0], result1[2], result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[67] PropertyListNotEmpty");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PropertyList() {
                    var cacheKey = 'PropertyList@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result1 = parse_PropertyListNotEmpty();
                    var result0 = result1 !== null ? result1 : '';
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[68] PropertyList");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ObjectList() {
                    var cacheKey = 'ObjectList@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_GraphNode();
                    if (result3 !== null) {
                        var result4 = [];
                        var result11 = parse_WS();
                        while (result11 !== null) {
                            result4.push(result11);
                            var result11 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var savedPos2 = pos;
                            if (input.substr(pos, 1) === ",") {
                                var result7 = ",";
                                pos += 1;
                            } else {
                                var result7 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\",\"");
                                }
                            }
                            if (result7 !== null) {
                                var result8 = [];
                                var result10 = parse_WS();
                                while (result10 !== null) {
                                    result8.push(result10);
                                    var result10 = parse_WS();
                                }
                                if (result8 !== null) {
                                    var result9 = parse_GraphNode();
                                    if (result9 !== null) {
                                        var result6 = [result7, result8, result9];
                                    } else {
                                        var result6 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result6 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result6 = null;
                                pos = savedPos2;
                            }
                            while (result6 !== null) {
                                result5.push(result6);
                                var savedPos2 = pos;
                                if (input.substr(pos, 1) === ",") {
                                    var result7 = ",";
                                    pos += 1;
                                } else {
                                    var result7 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\",\"");
                                    }
                                }
                                if (result7 !== null) {
                                    var result8 = [];
                                    var result10 = parse_WS();
                                    while (result10 !== null) {
                                        result8.push(result10);
                                        var result10 = parse_WS();
                                    }
                                    if (result8 !== null) {
                                        var result9 = parse_GraphNode();
                                        if (result9 !== null) {
                                            var result6 = [result7, result8, result9];
                                        } else {
                                            var result6 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result6 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result6 = null;
                                    pos = savedPos2;
                                }
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(obj, objs) {

                        var toReturn = [];

                        toReturn.push(obj);

                        for(var i=0; i<objs.length; i++) {
                            for(var j=0; j<objs[i].length; j++) {
                                if(typeof(objs[i][j])=="object" && objs[i][j].token != null) {
                                    toReturn.push(objs[i][j]);
                                }
                            }
                        }

                        return toReturn;
                    })(result1[0], result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[69] ObjectList");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Verb() {
                    var cacheKey = 'Verb@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result4 = parse_VarOrIRIref();
                    if (result4 !== null) {
                        var result0 = result4;
                    } else {
                        var savedPos0 = pos;
                        if (input.substr(pos, 1) === "a") {
                            var result2 = "a";
                            pos += 1;
                        } else {
                            var result2 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"a\"");
                            }
                        }
                        var result3 = result2 !== null
                            ? (function() {
                            return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
                        })()
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[71] Verb");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_TriplesSameSubjectPath() {
                    var cacheKey = 'TriplesSameSubjectPath@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos2 = pos;
                    var savedPos3 = pos;
                    var result13 = [];
                    var result18 = parse_WS();
                    while (result18 !== null) {
                        result13.push(result18);
                        var result18 = parse_WS();
                    }
                    if (result13 !== null) {
                        var result14 = parse_VarOrTerm();
                        if (result14 !== null) {
                            var result15 = [];
                            var result17 = parse_WS();
                            while (result17 !== null) {
                                result15.push(result17);
                                var result17 = parse_WS();
                            }
                            if (result15 !== null) {
                                var result16 = parse_PropertyListNotEmptyPath();
                                if (result16 !== null) {
                                    var result11 = [result13, result14, result15, result16];
                                } else {
                                    var result11 = null;
                                    pos = savedPos3;
                                }
                            } else {
                                var result11 = null;
                                pos = savedPos3;
                            }
                        } else {
                            var result11 = null;
                            pos = savedPos3;
                        }
                    } else {
                        var result11 = null;
                        pos = savedPos3;
                    }
                    var result12 = result11 !== null
                        ? (function(s, pairs) {
                        var triplesContext = pairs.triplesContext;
                        var subject = s;
                        if(pairs.pairs) {
                            for(var i=0; i< pairs.pairs.length; i++) {
                                var pair = pairs.pairs[i];
                                var triple = null;
                                if(pair[1].length != null)
                                    pair[1] = pair[1][0]
                                if(subject.token && subject.token==='triplesnodecollection') {
                                    triple = {subject: subject.chainSubject[0], predicate: pair[0], object: pair[1]}
                                    triplesContext.push(triple);
                                    triplesContext = triplesContext.concat(subject.triplesContext);
                                } else {
                                    triple = {subject: subject, predicate: pair[0], object: pair[1]}
                                    triplesContext.push(triple);
                                }
                            }
                        }

                        var token = {};
                        token.token = "triplessamesubject";
                        token.triplesContext = triplesContext;
                        token.chainSubject = subject;

                        return token;
                    })(result11[1], result11[3])
                        : null;
                    if (result12 !== null) {
                        var result10 = result12;
                    } else {
                        var result10 = null;
                        pos = savedPos2;
                    }
                    if (result10 !== null) {
                        var result0 = result10;
                    } else {
                        var savedPos0 = pos;
                        var savedPos1 = pos;
                        var result4 = [];
                        var result9 = parse_WS();
                        while (result9 !== null) {
                            result4.push(result9);
                            var result9 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_TriplesNode();
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_PropertyListPath();
                                    if (result7 !== null) {
                                        var result2 = [result4, result5, result6, result7];
                                    } else {
                                        var result2 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result2 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result2 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result2 = null;
                            pos = savedPos1;
                        }
                        var result3 = result2 !== null
                            ? (function(tn, pairs) {
                            var triplesContext = tn.triplesContext;
                            var subject = tn.chainSubject;

                            if(pairs.pairs) {
                                for(var i=0; i< pairs.pairs.length; i++) {
                                    var pair = pairs.pairs[i];
                                    if(pair[1].length != null)
                                        pair[1] = pair[1][0]

                                    if(tn.token === "triplesnodecollection") {
                                        for(var j=0; j<subject.length; j++) {
                                            var subj = subject[j];
                                            if(subj.triplesContext != null) {
                                                var triple = {subject: subj.chainSubject, predicate: pair[0], object: pair[1]}
                                                triplesContext.concat(subj.triplesContext);
                                            } else {
                                                var triple = {subject: subject[j], predicate: pair[0], object: pair[1]}
                                                triplesContext.push(triple);
                                            }
                                        }
                                    } else {
                                        var triple = {subject: subject, predicate: pair[0], object: pair[1]}
                                        triplesContext.push(triple);
                                    }
                                }
                            }

                            var token = {};
                            token.token = "triplessamesubject";
                            token.triplesContext = triplesContext;
                            token.chainSubject = subject;

                            return token;

                        })(result2[1], result2[3])
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[72] TriplesSameSubjectPath");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PropertyListNotEmptyPath() {
                    var cacheKey = 'PropertyListNotEmptyPath@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result21 = parse_VerbPath();
                    if (result21 !== null) {
                        var result3 = result21;
                    } else {
                        var result20 = parse_Var();
                        if (result20 !== null) {
                            var result3 = result20;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result19 = parse_WS();
                        while (result19 !== null) {
                            result4.push(result19);
                            var result19 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_ObjectList();
                            if (result5 !== null) {
                                var result6 = [];
                                var savedPos2 = pos;
                                var result8 = [];
                                var result18 = parse_WS();
                                while (result18 !== null) {
                                    result8.push(result18);
                                    var result18 = parse_WS();
                                }
                                if (result8 !== null) {
                                    if (input.substr(pos, 1) === ";") {
                                        var result9 = ";";
                                        pos += 1;
                                    } else {
                                        var result9 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\";\"");
                                        }
                                    }
                                    if (result9 !== null) {
                                        var result10 = [];
                                        var result17 = parse_WS();
                                        while (result17 !== null) {
                                            result10.push(result17);
                                            var result17 = parse_WS();
                                        }
                                        if (result10 !== null) {
                                            var savedPos3 = pos;
                                            var result16 = parse_VerbPath();
                                            if (result16 !== null) {
                                                var result13 = result16;
                                            } else {
                                                var result15 = parse_Var();
                                                if (result15 !== null) {
                                                    var result13 = result15;
                                                } else {
                                                    var result13 = null;;
                                                };
                                            }
                                            if (result13 !== null) {
                                                var result14 = parse_ObjectList();
                                                if (result14 !== null) {
                                                    var result12 = [result13, result14];
                                                } else {
                                                    var result12 = null;
                                                    pos = savedPos3;
                                                }
                                            } else {
                                                var result12 = null;
                                                pos = savedPos3;
                                            }
                                            var result11 = result12 !== null ? result12 : '';
                                            if (result11 !== null) {
                                                var result7 = [result8, result9, result10, result11];
                                            } else {
                                                var result7 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result7 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result7 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result7 = null;
                                    pos = savedPos2;
                                }
                                while (result7 !== null) {
                                    result6.push(result7);
                                    var savedPos2 = pos;
                                    var result8 = [];
                                    var result18 = parse_WS();
                                    while (result18 !== null) {
                                        result8.push(result18);
                                        var result18 = parse_WS();
                                    }
                                    if (result8 !== null) {
                                        if (input.substr(pos, 1) === ";") {
                                            var result9 = ";";
                                            pos += 1;
                                        } else {
                                            var result9 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\";\"");
                                            }
                                        }
                                        if (result9 !== null) {
                                            var result10 = [];
                                            var result17 = parse_WS();
                                            while (result17 !== null) {
                                                result10.push(result17);
                                                var result17 = parse_WS();
                                            }
                                            if (result10 !== null) {
                                                var savedPos3 = pos;
                                                var result16 = parse_VerbPath();
                                                if (result16 !== null) {
                                                    var result13 = result16;
                                                } else {
                                                    var result15 = parse_Var();
                                                    if (result15 !== null) {
                                                        var result13 = result15;
                                                    } else {
                                                        var result13 = null;;
                                                    };
                                                }
                                                if (result13 !== null) {
                                                    var result14 = parse_ObjectList();
                                                    if (result14 !== null) {
                                                        var result12 = [result13, result14];
                                                    } else {
                                                        var result12 = null;
                                                        pos = savedPos3;
                                                    }
                                                } else {
                                                    var result12 = null;
                                                    pos = savedPos3;
                                                }
                                                var result11 = result12 !== null ? result12 : '';
                                                if (result11 !== null) {
                                                    var result7 = [result8, result9, result10, result11];
                                                } else {
                                                    var result7 = null;
                                                    pos = savedPos2;
                                                }
                                            } else {
                                                var result7 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result7 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result7 = null;
                                        pos = savedPos2;
                                    }
                                }
                                if (result6 !== null) {
                                    var result1 = [result3, result4, result5, result6];
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(v, ol, rest) {
                        token = {}
                        token.token = 'propertylist';
                        var triplesContext = [];
                        var pairs = [];
                        var test = [];

                        for( var i=0; i<ol.length; i++) {

                            if(ol[i].triplesContext != null) {
                                triplesContext = triplesContext.concat(ol[i].triplesContext);
                                if(ol[i].token==='triplesnodecollection' && ol[i].chainSubject.length != null) {
                                    pairs.push([v, ol[i].chainSubject[0]]);
                                } else {
                                    pairs.push([v, ol[i].chainSubject]);
                                }

                            } else {
                                pairs.push([v, ol[i]])
                            }

                        }


                        for(var i=0; i<rest.length; i++) {
                            var tok = rest[i][3];
                            var newVerb  = tok[0];
                            var newObjsList = tok[1] || [];

                            for(var j=0; j<newObjsList.length; j++) {
                                if(newObjsList[j].triplesContext != null) {
                                    triplesContext = triplesContext.concat(newObjsList[j].triplesContext);
                                    pairs.push([newVerb, newObjsList[j].chainSubject]);
                                } else {
                                    pairs.push([newVerb, newObjsList[j]])
                                }
                            }
                        }

                        token.pairs = pairs;
                        token.triplesContext = triplesContext;

                        return token;
                    })(result1[0], result1[2], result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[73] PropertyListNotEmptyPath");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PropertyListPath() {
                    var cacheKey = 'PropertyListPath@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result1 = parse_PropertyListNotEmpty();
                    var result0 = result1 !== null ? result1 : '';
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[74] PropertyListPath");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_VerbPath() {
                    var cacheKey = 'VerbPath@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var result1 = parse_PathAlternative();
                    var result2 = result1 !== null
                        ? (function(p) {
                        var path = {};
                        path.token = 'path';
                        path.kind = 'element';
                        path.value = p;

                        return p;
                    })(result1)
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[75]");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PathAlternative() {
                    var cacheKey = 'PathAlternative@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_PathSequence();
                    if (result3 !== null) {
                        var result4 = [];
                        var savedPos2 = pos;
                        if (input.substr(pos, 1) === "|") {
                            var result6 = "|";
                            pos += 1;
                        } else {
                            var result6 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"|\"");
                            }
                        }
                        if (result6 !== null) {
                            var result7 = parse_PathSequence();
                            if (result7 !== null) {
                                var result5 = [result6, result7];
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        } else {
                            var result5 = null;
                            pos = savedPos2;
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var savedPos2 = pos;
                            if (input.substr(pos, 1) === "|") {
                                var result6 = "|";
                                pos += 1;
                            } else {
                                var result6 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"|\"");
                                }
                            }
                            if (result6 !== null) {
                                var result7 = parse_PathSequence();
                                if (result7 !== null) {
                                    var result5 = [result6, result7];
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(first, rest) {
                        if(rest == null || rest.length === 0) {
                            return first;
                        } else {
                            var acum = [];
                            for(var i=0; i<rest.length; i++)
                                acum.push(rest[1]);

                            var path = {};
                            path.token = 'path';
                            path.kind = 'alternative';
                            path.value = acum;

                            return path;
                        }
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[78] PathAlternative");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PathSequence() {
                    var cacheKey = 'PathSequence@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_PathEltOrInverse();
                    if (result3 !== null) {
                        var result4 = [];
                        var savedPos2 = pos;
                        if (input.substr(pos, 1) === "/") {
                            var result6 = "/";
                            pos += 1;
                        } else {
                            var result6 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"/\"");
                            }
                        }
                        if (result6 !== null) {
                            var result7 = parse_PathEltOrInverse();
                            if (result7 !== null) {
                                var result5 = [result6, result7];
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        } else {
                            var result5 = null;
                            pos = savedPos2;
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var savedPos2 = pos;
                            if (input.substr(pos, 1) === "/") {
                                var result6 = "/";
                                pos += 1;
                            } else {
                                var result6 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"/\"");
                                }
                            }
                            if (result6 !== null) {
                                var result7 = parse_PathEltOrInverse();
                                if (result7 !== null) {
                                    var result5 = [result6, result7];
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(first, rest) {
                        if(rest == null || rest.length === 0) {
                            return first;
                        } else {
                            var acum = [first];

                            for(var i=0; i<rest.length; i++)
                                acum.push(rest[i][1]);

                            var path = {};
                            path.token = 'path';
                            path.kind = 'sequence';

                            path.value = acum;

                            return path;
                        }
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[79] PathSequence");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PathElt() {
                    var cacheKey = 'PathElt@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_PathPrimary();
                    if (result3 !== null) {
                        var result5 = parse_PathMod();
                        var result4 = result5 !== null ? result5 : '';
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(p, mod) {
                        if(p.token && p.token != 'path' && mod == '') {
                            return p;
                        } else if(p.token && p.token != path && mod != '') {
                            var path = {};
                            path.token = 'path';
                            path.kind = 'element';
                            path.value = p;
                            path.modifier = mod;
                            return path;
                        } else {
                            p.modifier = mod;
                            return p;
                        }
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[88] PathElt");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PathEltOrInverse() {
                    var cacheKey = 'PathEltOrInverse@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result6 = parse_PathElt();
                    if (result6 !== null) {
                        var result0 = result6;
                    } else {
                        var savedPos0 = pos;
                        var savedPos1 = pos;
                        if (input.substr(pos, 1) === "^") {
                            var result4 = "^";
                            pos += 1;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"^\"");
                            }
                        }
                        if (result4 !== null) {
                            var result5 = parse_PathElt();
                            if (result5 !== null) {
                                var result2 = [result4, result5];
                            } else {
                                var result2 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result2 = null;
                            pos = savedPos1;
                        }
                        var result3 = result2 !== null
                            ? (function(elt) {
                            var path = {};
                            path.token = 'path';
                            path.kind = 'inversePath';
                            path.value = elt;

                            return path;
                        })(result2[1])
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[81] PathEltOrInverse");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PathMod() {
                    var cacheKey = 'PathMod@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    if (input.substr(pos, 1) === "*") {
                        var result21 = "*";
                        pos += 1;
                    } else {
                        var result21 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"*\"");
                        }
                    }
                    if (result21 !== null) {
                        var result0 = result21;
                    } else {
                        if (input.substr(pos, 1) === "?") {
                            var result20 = "?";
                            pos += 1;
                        } else {
                            var result20 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"?\"");
                            }
                        }
                        if (result20 !== null) {
                            var result0 = result20;
                        } else {
                            if (input.substr(pos, 1) === "+") {
                                var result19 = "+";
                                pos += 1;
                            } else {
                                var result19 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"+\"");
                                }
                            }
                            if (result19 !== null) {
                                var result0 = result19;
                            } else {
                                var savedPos0 = pos;
                                if (input.substr(pos, 1) === "{") {
                                    var result2 = "{";
                                    pos += 1;
                                } else {
                                    var result2 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"{\"");
                                    }
                                }
                                if (result2 !== null) {
                                    var savedPos2 = pos;
                                    var result9 = parse_INTEGER();
                                    if (result9 !== null) {
                                        var savedPos3 = pos;
                                        if (input.substr(pos, 1) === ",") {
                                            var result13 = ",";
                                            pos += 1;
                                        } else {
                                            var result13 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\",\"");
                                            }
                                        }
                                        if (result13 !== null) {
                                            if (input.substr(pos, 1) === "}") {
                                                var result18 = "}";
                                                pos += 1;
                                            } else {
                                                var result18 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"}\"");
                                                }
                                            }
                                            if (result18 !== null) {
                                                var result14 = result18;
                                            } else {
                                                var savedPos4 = pos;
                                                var result16 = parse_INTEGER();
                                                if (result16 !== null) {
                                                    if (input.substr(pos, 1) === "}") {
                                                        var result17 = "}";
                                                        pos += 1;
                                                    } else {
                                                        var result17 = null;
                                                        if (reportMatchFailures) {
                                                            matchFailed("\"}\"");
                                                        }
                                                    }
                                                    if (result17 !== null) {
                                                        var result15 = [result16, result17];
                                                    } else {
                                                        var result15 = null;
                                                        pos = savedPos4;
                                                    }
                                                } else {
                                                    var result15 = null;
                                                    pos = savedPos4;
                                                }
                                                if (result15 !== null) {
                                                    var result14 = result15;
                                                } else {
                                                    var result14 = null;;
                                                };
                                            }
                                            if (result14 !== null) {
                                                var result12 = [result13, result14];
                                            } else {
                                                var result12 = null;
                                                pos = savedPos3;
                                            }
                                        } else {
                                            var result12 = null;
                                            pos = savedPos3;
                                        }
                                        if (result12 !== null) {
                                            var result10 = result12;
                                        } else {
                                            if (input.substr(pos, 1) === "}") {
                                                var result11 = "}";
                                                pos += 1;
                                            } else {
                                                var result11 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"}\"");
                                                }
                                            }
                                            if (result11 !== null) {
                                                var result10 = result11;
                                            } else {
                                                var result10 = null;;
                                            };
                                        }
                                        if (result10 !== null) {
                                            var result8 = [result9, result10];
                                        } else {
                                            var result8 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result8 = null;
                                        pos = savedPos2;
                                    }
                                    if (result8 !== null) {
                                        var result3 = result8;
                                    } else {
                                        var savedPos1 = pos;
                                        if (input.substr(pos, 1) === ",") {
                                            var result5 = ",";
                                            pos += 1;
                                        } else {
                                            var result5 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\",\"");
                                            }
                                        }
                                        if (result5 !== null) {
                                            var result6 = parse_INTEGER();
                                            if (result6 !== null) {
                                                if (input.substr(pos, 1) === "}") {
                                                    var result7 = "}";
                                                    pos += 1;
                                                } else {
                                                    var result7 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"}\"");
                                                    }
                                                }
                                                if (result7 !== null) {
                                                    var result4 = [result5, result6, result7];
                                                } else {
                                                    var result4 = null;
                                                    pos = savedPos1;
                                                }
                                            } else {
                                                var result4 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result4 = null;
                                            pos = savedPos1;
                                        }
                                        if (result4 !== null) {
                                            var result3 = result4;
                                        } else {
                                            var result3 = null;;
                                        };
                                    }
                                    if (result3 !== null) {
                                        var result1 = [result2, result3];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos0;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                }
                                if (result1 !== null) {
                                    var result0 = result1;
                                } else {
                                    var result0 = null;;
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[82] PathMod");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PathPrimary() {
                    var cacheKey = 'PathPrimary@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result13 = parse_IRIref();
                    if (result13 !== null) {
                        var result0 = result13;
                    } else {
                        var savedPos3 = pos;
                        if (input.substr(pos, 1) === "a") {
                            var result11 = "a";
                            pos += 1;
                        } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"a\"");
                            }
                        }
                        var result12 = result11 !== null
                            ? (function() {
                            return{token: 'uri', prefix:null, suffix:null, value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"}
                        })()
                            : null;
                        if (result12 !== null) {
                            var result10 = result12;
                        } else {
                            var result10 = null;
                            pos = savedPos3;
                        }
                        if (result10 !== null) {
                            var result0 = result10;
                        } else {
                            var savedPos2 = pos;
                            if (input.substr(pos, 1) === "!") {
                                var result8 = "!";
                                pos += 1;
                            } else {
                                var result8 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"!\"");
                                }
                            }
                            if (result8 !== null) {
                                var result9 = parse_PathNegatedPropertySet();
                                if (result9 !== null) {
                                    var result7 = [result8, result9];
                                } else {
                                    var result7 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result7 = null;
                                pos = savedPos2;
                            }
                            if (result7 !== null) {
                                var result0 = result7;
                            } else {
                                var savedPos0 = pos;
                                var savedPos1 = pos;
                                if (input.substr(pos, 1) === "(") {
                                    var result4 = "(";
                                    pos += 1;
                                } else {
                                    var result4 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"(\"");
                                    }
                                }
                                if (result4 !== null) {
                                    var result5 = parse_PathAlternative();
                                    if (result5 !== null) {
                                        if (input.substr(pos, 1) === ")") {
                                            var result6 = ")";
                                            pos += 1;
                                        } else {
                                            var result6 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\")\"");
                                            }
                                        }
                                        if (result6 !== null) {
                                            var result2 = [result4, result5, result6];
                                        } else {
                                            var result2 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result2 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result2 = null;
                                    pos = savedPos1;
                                }
                                var result3 = result2 !== null
                                    ? (function(p) {
                                    return p;
                                })(result2[1])
                                    : null;
                                if (result3 !== null) {
                                    var result1 = result3;
                                } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                }
                                if (result1 !== null) {
                                    var result0 = result1;
                                } else {
                                    var result0 = null;;
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[83] PathPrimary");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PathNegatedPropertySet() {
                    var cacheKey = 'PathNegatedPropertySet@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }


                    var result11 = parse_PathOneInPropertySet();
                    if (result11 !== null) {
                        var result0 = result11;
                    } else {
                        var savedPos0 = pos;
                        if (input.substr(pos, 1) === "(") {
                            var result2 = "(";
                            pos += 1;
                        } else {
                            var result2 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"(\"");
                            }
                        }
                        if (result2 !== null) {
                            var savedPos1 = pos;
                            var result6 = parse_PathOneInPropertySet();
                            if (result6 !== null) {
                                var result7 = [];
                                var savedPos2 = pos;
                                if (input.substr(pos, 1) === "|") {
                                    var result9 = "|";
                                    pos += 1;
                                } else {
                                    var result9 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"|\"");
                                    }
                                }
                                if (result9 !== null) {
                                    var result10 = parse_PathOneInPropertySet();
                                    if (result10 !== null) {
                                        var result8 = [result9, result10];
                                    } else {
                                        var result8 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result8 = null;
                                    pos = savedPos2;
                                }
                                while (result8 !== null) {
                                    result7.push(result8);
                                    var savedPos2 = pos;
                                    if (input.substr(pos, 1) === "|") {
                                        var result9 = "|";
                                        pos += 1;
                                    } else {
                                        var result9 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"|\"");
                                        }
                                    }
                                    if (result9 !== null) {
                                        var result10 = parse_PathOneInPropertySet();
                                        if (result10 !== null) {
                                            var result8 = [result9, result10];
                                        } else {
                                            var result8 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result8 = null;
                                        pos = savedPos2;
                                    }
                                }
                                if (result7 !== null) {
                                    var result5 = [result6, result7];
                                } else {
                                    var result5 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos1;
                            }
                            var result3 = result5 !== null ? result5 : '';
                            if (result3 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                    var result4 = ")";
                                    pos += 1;
                                } else {
                                    var result4 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\")\"");
                                    }
                                }
                                if (result4 !== null) {
                                    var result1 = [result2, result3, result4];
                                } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos0;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }



                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PathOneInPropertySet() {
                    var cacheKey = 'PathOneInPropertySet@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result7 = parse_IRIref();
                    if (result7 !== null) {
                        var result0 = result7;
                    } else {
                        if (input.substr(pos, 1) === "a") {
                            var result6 = "a";
                            pos += 1;
                        } else {
                            var result6 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"a\"");
                            }
                        }
                        if (result6 !== null) {
                            var result0 = result6;
                        } else {
                            var savedPos0 = pos;
                            if (input.substr(pos, 1) === "^") {
                                var result2 = "^";
                                pos += 1;
                            } else {
                                var result2 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"^\"");
                                }
                            }
                            if (result2 !== null) {
                                var result5 = parse_IRIref();
                                if (result5 !== null) {
                                    var result3 = result5;
                                } else {
                                    if (input.substr(pos, 1) === "a") {
                                        var result4 = "a";
                                        pos += 1;
                                    } else {
                                        var result4 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"a\"");
                                        }
                                    }
                                    if (result4 !== null) {
                                        var result3 = result4;
                                    } else {
                                        var result3 = null;;
                                    };
                                }
                                if (result3 !== null) {
                                    var result1 = [result2, result3];
                                } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos0;
                            }
                            if (result1 !== null) {
                                var result0 = result1;
                            } else {
                                var result0 = null;;
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[85] PathOneInPropertySet");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_TriplesNode() {
                    var cacheKey = 'TriplesNode@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var result3 = parse_Collection();
                    var result4 = result3 !== null
                        ? (function(c) {
                        var triplesContext = [];
                        var chainSubject = [];

                        var triple = null;

                        // catch NIL
                        /*
                         if(c.length == 1 && c[0].token && c[0].token === 'nil') {
                         GlobalBlankNodeCounter++;
                         return  {token: "triplesnodecollection", 
                         triplesContext:[{subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                         predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                         object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))}}], 
                         chainSubject:{token:'blank', value:("_:"+GlobalBlankNodeCounter)}};

                         }
                         */

                        // other cases
                        for(var i=0; i<c.length; i++) {
                            GlobalBlankNodeCounter++;
                            //_:b0  rdf:first  1 ;
                            //rdf:rest   _:b1 .
                            var nextObject = null;
                            if(c[i].chainSubject == null && c[i].triplesContext == null) {
                                nextObject = c[i];
                            } else {
                                nextObject = c[i].chainSubject;
                                triplesContext = triplesContext.concat(nextSubject.triplesContext);
                            }
                            var currentSubject = null;
                            triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                                predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#first'},
                                object:nextObject };

                            if(i==0) {
                                chainSubject.push(triple.subject);
                            }

                            triplesContext.push(triple);

                            if(i===(c.length-1)) {
                                triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                                    predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                    object:   {token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#nil'}};
                            } else {
                                triple = {subject: {token:'blank', value:("_:"+GlobalBlankNodeCounter)},
                                    predicate:{token:'uri', prefix:null, suffix:null, value:'http://www.w3.org/1999/02/22-rdf-syntax-ns#rest'},
                                    object:  {token:'blank', value:("_:"+(GlobalBlankNodeCounter+1))} };
                            }

                            triplesContext.push(triple);
                        }

                        return {token:"triplesnodecollection", triplesContext:triplesContext, chainSubject:chainSubject};
                    })(result3)
                        : null;
                    if (result4 !== null) {
                        var result2 = result4;
                    } else {
                        var result2 = null;
                        pos = savedPos0;
                    }
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result1 = parse_BlankNodePropertyList();
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[87] TriplesNode");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_BlankNodePropertyList() {
                    var cacheKey = 'BlankNodePropertyList@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result13 = parse_WS();
                    while (result13 !== null) {
                        result3.push(result13);
                        var result13 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 1) === "[") {
                            var result4 = "[";
                            pos += 1;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"[\"");
                            }
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result12 = parse_WS();
                            while (result12 !== null) {
                                result5.push(result12);
                                var result12 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result6 = parse_PropertyListNotEmpty();
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result11 = parse_WS();
                                    while (result11 !== null) {
                                        result7.push(result11);
                                        var result11 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        if (input.substr(pos, 1) === "]") {
                                            var result8 = "]";
                                            pos += 1;
                                        } else {
                                            var result8 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"]\"");
                                            }
                                        }
                                        if (result8 !== null) {
                                            var result9 = [];
                                            var result10 = parse_WS();
                                            while (result10 !== null) {
                                                result9.push(result10);
                                                var result10 = parse_WS();
                                            }
                                            if (result9 !== null) {
                                                var result1 = [result3, result4, result5, result6, result7, result8, result9];
                                            } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(pl) {

                        GlobalBlankNodeCounter++;
                        var subject = {token:'blank', value:'_:'+GlobalBlankNodeCounter};
                        var newTriples =  [];

                        for(var i=0; i< pl.pairs.length; i++) {
                            var pair = pl.pairs[i];
                            var triple = {}
                            triple.subject = subject;
                            triple.predicate = pair[0];
                            if(pair[1].length != null)
                                pair[1] = pair[1][0]
                            triple.object = pair[1];
                            newTriples.push(triple);
                        }

                        return {token: 'triplesnode',
                            kind: 'blanknodepropertylist',
                            triplesContext: pl.triplesContext.concat(newTriples),
                            chainSubject: subject};
                    })(result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[88] BlankNodePropertyList");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Collection() {
                    var cacheKey = 'Collection@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = [];
                    var result14 = parse_WS();
                    while (result14 !== null) {
                        result3.push(result14);
                        var result14 = parse_WS();
                    }
                    if (result3 !== null) {
                        if (input.substr(pos, 1) === "(") {
                            var result4 = "(";
                            pos += 1;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"(\"");
                            }
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var result13 = parse_WS();
                            while (result13 !== null) {
                                result5.push(result13);
                                var result13 = parse_WS();
                            }
                            if (result5 !== null) {
                                var result12 = parse_GraphNode();
                                if (result12 !== null) {
                                    var result6 = [];
                                    while (result12 !== null) {
                                        result6.push(result12);
                                        var result12 = parse_GraphNode();
                                    }
                                } else {
                                    var result6 = null;
                                }
                                if (result6 !== null) {
                                    var result7 = [];
                                    var result11 = parse_WS();
                                    while (result11 !== null) {
                                        result7.push(result11);
                                        var result11 = parse_WS();
                                    }
                                    if (result7 !== null) {
                                        if (input.substr(pos, 1) === ")") {
                                            var result8 = ")";
                                            pos += 1;
                                        } else {
                                            var result8 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\")\"");
                                            }
                                        }
                                        if (result8 !== null) {
                                            var result9 = [];
                                            var result10 = parse_WS();
                                            while (result10 !== null) {
                                                result9.push(result10);
                                                var result10 = parse_WS();
                                            }
                                            if (result9 !== null) {
                                                var result1 = [result3, result4, result5, result6, result7, result8, result9];
                                            } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(gn) {
                        return gn;
                    })(result1[3])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[89] Collection");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GraphNode() {
                    var cacheKey = 'GraphNode@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos2 = pos;
                    var result10 = [];
                    var result14 = parse_WS();
                    while (result14 !== null) {
                        result10.push(result14);
                        var result14 = parse_WS();
                    }
                    if (result10 !== null) {
                        var result11 = parse_VarOrTerm();
                        if (result11 !== null) {
                            var result12 = [];
                            var result13 = parse_WS();
                            while (result13 !== null) {
                                result12.push(result13);
                                var result13 = parse_WS();
                            }
                            if (result12 !== null) {
                                var result9 = [result10, result11, result12];
                            } else {
                                var result9 = null;
                                pos = savedPos2;
                            }
                        } else {
                            var result9 = null;
                            pos = savedPos2;
                        }
                    } else {
                        var result9 = null;
                        pos = savedPos2;
                    }
                    if (result9 !== null) {
                        var result1 = result9;
                    } else {
                        var savedPos1 = pos;
                        var result4 = [];
                        var result8 = parse_WS();
                        while (result8 !== null) {
                            result4.push(result8);
                            var result8 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_TriplesNode();
                            if (result5 !== null) {
                                var result6 = [];
                                var result7 = parse_WS();
                                while (result7 !== null) {
                                    result6.push(result7);
                                    var result7 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result3 = [result4, result5, result6];
                                } else {
                                    var result3 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result3 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result3 = null;
                            pos = savedPos1;
                        }
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;;
                        };
                    }
                    var result2 = result1 !== null
                        ? (function(gn) {
                        return gn[1];
                    })(result1)
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[90] GraphNode");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_VarOrTerm() {
                    var cacheKey = 'VarOrTerm@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result2 = parse_Var();
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result1 = parse_GraphTerm();
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[91] VarOrTerm");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_VarOrIRIref() {
                    var cacheKey = 'VarOrIRIref@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result2 = parse_Var();
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result1 = parse_IRIref();
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[92] VarOrIRIref");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Var() {
                    var cacheKey = 'Var@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var result4 = parse_VAR1();
                    if (result4 !== null) {
                        var result1 = result4;
                    } else {
                        var result3 = parse_VAR2();
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;;
                        };
                    }
                    var result2 = result1 !== null
                        ? (function(v) {
                        var term = {};
                        term.token = 'var';
                        term.value = v;
                        return term;
                    })(result1)
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[93] Var");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_GraphTerm() {
                    var cacheKey = 'GraphTerm@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result6 = parse_IRIref();
                    if (result6 !== null) {
                        var result0 = result6;
                    } else {
                        var result5 = parse_RDFLiteral();
                        if (result5 !== null) {
                            var result0 = result5;
                        } else {
                            var result4 = parse_NumericLiteral();
                            if (result4 !== null) {
                                var result0 = result4;
                            } else {
                                var result3 = parse_BooleanLiteral();
                                if (result3 !== null) {
                                    var result0 = result3;
                                } else {
                                    var result2 = parse_BlankNode();
                                    if (result2 !== null) {
                                        var result0 = result2;
                                    } else {
                                        var result1 = parse_NIL();
                                        if (result1 !== null) {
                                            var result0 = result1;
                                        } else {
                                            var result0 = null;;
                                        };
                                    };
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[94] GraphTerm");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ConditionalOrExpression() {
                    var cacheKey = 'ConditionalOrExpression@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_ConditionalAndExpression();
                    if (result3 !== null) {
                        var result4 = [];
                        var savedPos2 = pos;
                        var result6 = [];
                        var result11 = parse_WS();
                        while (result11 !== null) {
                            result6.push(result11);
                            var result11 = parse_WS();
                        }
                        if (result6 !== null) {
                            if (input.substr(pos, 2) === "||") {
                                var result7 = "||";
                                pos += 2;
                            } else {
                                var result7 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"||\"");
                                }
                            }
                            if (result7 !== null) {
                                var result8 = [];
                                var result10 = parse_WS();
                                while (result10 !== null) {
                                    result8.push(result10);
                                    var result10 = parse_WS();
                                }
                                if (result8 !== null) {
                                    var result9 = parse_ConditionalAndExpression();
                                    if (result9 !== null) {
                                        var result5 = [result6, result7, result8, result9];
                                    } else {
                                        var result5 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        } else {
                            var result5 = null;
                            pos = savedPos2;
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var savedPos2 = pos;
                            var result6 = [];
                            var result11 = parse_WS();
                            while (result11 !== null) {
                                result6.push(result11);
                                var result11 = parse_WS();
                            }
                            if (result6 !== null) {
                                if (input.substr(pos, 2) === "||") {
                                    var result7 = "||";
                                    pos += 2;
                                } else {
                                    var result7 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"||\"");
                                    }
                                }
                                if (result7 !== null) {
                                    var result8 = [];
                                    var result10 = parse_WS();
                                    while (result10 !== null) {
                                        result8.push(result10);
                                        var result10 = parse_WS();
                                    }
                                    if (result8 !== null) {
                                        var result9 = parse_ConditionalAndExpression();
                                        if (result9 !== null) {
                                            var result5 = [result6, result7, result8, result9];
                                        } else {
                                            var result5 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result5 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(v, vs) {
                        if(vs.length === 0) {
                            return v;
                        }

                        var exp = {};
                        exp.token = "expression";
                        exp.expressionType = "conditionalor";
                        var ops = [v];

                        for(var i=0; i<vs.length; i++) {
                            ops.push(vs[i][3]);
                        }

                        exp.operands = ops;

                        return exp;
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[96] ConditionalOrExpression");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ConditionalAndExpression() {
                    var cacheKey = 'ConditionalAndExpression@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_RelationalExpression();
                    if (result3 !== null) {
                        var result4 = [];
                        var savedPos2 = pos;
                        var result6 = [];
                        var result11 = parse_WS();
                        while (result11 !== null) {
                            result6.push(result11);
                            var result11 = parse_WS();
                        }
                        if (result6 !== null) {
                            if (input.substr(pos, 2) === "&&") {
                                var result7 = "&&";
                                pos += 2;
                            } else {
                                var result7 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"&&\"");
                                }
                            }
                            if (result7 !== null) {
                                var result8 = [];
                                var result10 = parse_WS();
                                while (result10 !== null) {
                                    result8.push(result10);
                                    var result10 = parse_WS();
                                }
                                if (result8 !== null) {
                                    var result9 = parse_RelationalExpression();
                                    if (result9 !== null) {
                                        var result5 = [result6, result7, result8, result9];
                                    } else {
                                        var result5 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        } else {
                            var result5 = null;
                            pos = savedPos2;
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var savedPos2 = pos;
                            var result6 = [];
                            var result11 = parse_WS();
                            while (result11 !== null) {
                                result6.push(result11);
                                var result11 = parse_WS();
                            }
                            if (result6 !== null) {
                                if (input.substr(pos, 2) === "&&") {
                                    var result7 = "&&";
                                    pos += 2;
                                } else {
                                    var result7 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"&&\"");
                                    }
                                }
                                if (result7 !== null) {
                                    var result8 = [];
                                    var result10 = parse_WS();
                                    while (result10 !== null) {
                                        result8.push(result10);
                                        var result10 = parse_WS();
                                    }
                                    if (result8 !== null) {
                                        var result9 = parse_RelationalExpression();
                                        if (result9 !== null) {
                                            var result5 = [result6, result7, result8, result9];
                                        } else {
                                            var result5 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result5 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result5 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result5 = null;
                                pos = savedPos2;
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(v, vs) {
                        if(vs.length === 0) {
                            return v;
                        }
                        var exp = {};
                        exp.token = "expression";
                        exp.expressionType = "conditionaland";
                        var ops = [v];

                        for(var i=0; i<vs.length; i++) {
                            ops.push(vs[i][3]);
                        }

                        exp.operands = ops;

                        return exp;
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[97] ConditionalAndExpression");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_RelationalExpression() {
                    var cacheKey = 'RelationalExpression@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_AdditiveExpression();
                    if (result3 !== null) {
                        var result4 = [];
                        var savedPos7 = pos;
                        var result42 = [];
                        var result47 = parse_WS();
                        while (result47 !== null) {
                            result42.push(result47);
                            var result47 = parse_WS();
                        }
                        if (result42 !== null) {
                            if (input.substr(pos, 1) === "=") {
                                var result43 = "=";
                                pos += 1;
                            } else {
                                var result43 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"=\"");
                                }
                            }
                            if (result43 !== null) {
                                var result44 = [];
                                var result46 = parse_WS();
                                while (result46 !== null) {
                                    result44.push(result46);
                                    var result46 = parse_WS();
                                }
                                if (result44 !== null) {
                                    var result45 = parse_AdditiveExpression();
                                    if (result45 !== null) {
                                        var result41 = [result42, result43, result44, result45];
                                    } else {
                                        var result41 = null;
                                        pos = savedPos7;
                                    }
                                } else {
                                    var result41 = null;
                                    pos = savedPos7;
                                }
                            } else {
                                var result41 = null;
                                pos = savedPos7;
                            }
                        } else {
                            var result41 = null;
                            pos = savedPos7;
                        }
                        if (result41 !== null) {
                            var result5 = result41;
                        } else {
                            var savedPos6 = pos;
                            var result35 = [];
                            var result40 = parse_WS();
                            while (result40 !== null) {
                                result35.push(result40);
                                var result40 = parse_WS();
                            }
                            if (result35 !== null) {
                                if (input.substr(pos, 2) === "!=") {
                                    var result36 = "!=";
                                    pos += 2;
                                } else {
                                    var result36 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"!=\"");
                                    }
                                }
                                if (result36 !== null) {
                                    var result37 = [];
                                    var result39 = parse_WS();
                                    while (result39 !== null) {
                                        result37.push(result39);
                                        var result39 = parse_WS();
                                    }
                                    if (result37 !== null) {
                                        var result38 = parse_AdditiveExpression();
                                        if (result38 !== null) {
                                            var result34 = [result35, result36, result37, result38];
                                        } else {
                                            var result34 = null;
                                            pos = savedPos6;
                                        }
                                    } else {
                                        var result34 = null;
                                        pos = savedPos6;
                                    }
                                } else {
                                    var result34 = null;
                                    pos = savedPos6;
                                }
                            } else {
                                var result34 = null;
                                pos = savedPos6;
                            }
                            if (result34 !== null) {
                                var result5 = result34;
                            } else {
                                var savedPos5 = pos;
                                var result28 = [];
                                var result33 = parse_WS();
                                while (result33 !== null) {
                                    result28.push(result33);
                                    var result33 = parse_WS();
                                }
                                if (result28 !== null) {
                                    if (input.substr(pos, 1) === "<") {
                                        var result29 = "<";
                                        pos += 1;
                                    } else {
                                        var result29 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"<\"");
                                        }
                                    }
                                    if (result29 !== null) {
                                        var result30 = [];
                                        var result32 = parse_WS();
                                        while (result32 !== null) {
                                            result30.push(result32);
                                            var result32 = parse_WS();
                                        }
                                        if (result30 !== null) {
                                            var result31 = parse_AdditiveExpression();
                                            if (result31 !== null) {
                                                var result27 = [result28, result29, result30, result31];
                                            } else {
                                                var result27 = null;
                                                pos = savedPos5;
                                            }
                                        } else {
                                            var result27 = null;
                                            pos = savedPos5;
                                        }
                                    } else {
                                        var result27 = null;
                                        pos = savedPos5;
                                    }
                                } else {
                                    var result27 = null;
                                    pos = savedPos5;
                                }
                                if (result27 !== null) {
                                    var result5 = result27;
                                } else {
                                    var savedPos4 = pos;
                                    var result21 = [];
                                    var result26 = parse_WS();
                                    while (result26 !== null) {
                                        result21.push(result26);
                                        var result26 = parse_WS();
                                    }
                                    if (result21 !== null) {
                                        if (input.substr(pos, 1) === ">") {
                                            var result22 = ">";
                                            pos += 1;
                                        } else {
                                            var result22 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\">\"");
                                            }
                                        }
                                        if (result22 !== null) {
                                            var result23 = [];
                                            var result25 = parse_WS();
                                            while (result25 !== null) {
                                                result23.push(result25);
                                                var result25 = parse_WS();
                                            }
                                            if (result23 !== null) {
                                                var result24 = parse_AdditiveExpression();
                                                if (result24 !== null) {
                                                    var result20 = [result21, result22, result23, result24];
                                                } else {
                                                    var result20 = null;
                                                    pos = savedPos4;
                                                }
                                            } else {
                                                var result20 = null;
                                                pos = savedPos4;
                                            }
                                        } else {
                                            var result20 = null;
                                            pos = savedPos4;
                                        }
                                    } else {
                                        var result20 = null;
                                        pos = savedPos4;
                                    }
                                    if (result20 !== null) {
                                        var result5 = result20;
                                    } else {
                                        var savedPos3 = pos;
                                        var result14 = [];
                                        var result19 = parse_WS();
                                        while (result19 !== null) {
                                            result14.push(result19);
                                            var result19 = parse_WS();
                                        }
                                        if (result14 !== null) {
                                            if (input.substr(pos, 2) === "<=") {
                                                var result15 = "<=";
                                                pos += 2;
                                            } else {
                                                var result15 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"<=\"");
                                                }
                                            }
                                            if (result15 !== null) {
                                                var result16 = [];
                                                var result18 = parse_WS();
                                                while (result18 !== null) {
                                                    result16.push(result18);
                                                    var result18 = parse_WS();
                                                }
                                                if (result16 !== null) {
                                                    var result17 = parse_AdditiveExpression();
                                                    if (result17 !== null) {
                                                        var result13 = [result14, result15, result16, result17];
                                                    } else {
                                                        var result13 = null;
                                                        pos = savedPos3;
                                                    }
                                                } else {
                                                    var result13 = null;
                                                    pos = savedPos3;
                                                }
                                            } else {
                                                var result13 = null;
                                                pos = savedPos3;
                                            }
                                        } else {
                                            var result13 = null;
                                            pos = savedPos3;
                                        }
                                        if (result13 !== null) {
                                            var result5 = result13;
                                        } else {
                                            var savedPos2 = pos;
                                            var result7 = [];
                                            var result12 = parse_WS();
                                            while (result12 !== null) {
                                                result7.push(result12);
                                                var result12 = parse_WS();
                                            }
                                            if (result7 !== null) {
                                                if (input.substr(pos, 2) === ">=") {
                                                    var result8 = ">=";
                                                    pos += 2;
                                                } else {
                                                    var result8 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\">=\"");
                                                    }
                                                }
                                                if (result8 !== null) {
                                                    var result9 = [];
                                                    var result11 = parse_WS();
                                                    while (result11 !== null) {
                                                        result9.push(result11);
                                                        var result11 = parse_WS();
                                                    }
                                                    if (result9 !== null) {
                                                        var result10 = parse_AdditiveExpression();
                                                        if (result10 !== null) {
                                                            var result6 = [result7, result8, result9, result10];
                                                        } else {
                                                            var result6 = null;
                                                            pos = savedPos2;
                                                        }
                                                    } else {
                                                        var result6 = null;
                                                        pos = savedPos2;
                                                    }
                                                } else {
                                                    var result6 = null;
                                                    pos = savedPos2;
                                                }
                                            } else {
                                                var result6 = null;
                                                pos = savedPos2;
                                            }
                                            if (result6 !== null) {
                                                var result5 = result6;
                                            } else {
                                                var result5 = null;;
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var savedPos7 = pos;
                            var result42 = [];
                            var result47 = parse_WS();
                            while (result47 !== null) {
                                result42.push(result47);
                                var result47 = parse_WS();
                            }
                            if (result42 !== null) {
                                if (input.substr(pos, 1) === "=") {
                                    var result43 = "=";
                                    pos += 1;
                                } else {
                                    var result43 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"=\"");
                                    }
                                }
                                if (result43 !== null) {
                                    var result44 = [];
                                    var result46 = parse_WS();
                                    while (result46 !== null) {
                                        result44.push(result46);
                                        var result46 = parse_WS();
                                    }
                                    if (result44 !== null) {
                                        var result45 = parse_AdditiveExpression();
                                        if (result45 !== null) {
                                            var result41 = [result42, result43, result44, result45];
                                        } else {
                                            var result41 = null;
                                            pos = savedPos7;
                                        }
                                    } else {
                                        var result41 = null;
                                        pos = savedPos7;
                                    }
                                } else {
                                    var result41 = null;
                                    pos = savedPos7;
                                }
                            } else {
                                var result41 = null;
                                pos = savedPos7;
                            }
                            if (result41 !== null) {
                                var result5 = result41;
                            } else {
                                var savedPos6 = pos;
                                var result35 = [];
                                var result40 = parse_WS();
                                while (result40 !== null) {
                                    result35.push(result40);
                                    var result40 = parse_WS();
                                }
                                if (result35 !== null) {
                                    if (input.substr(pos, 2) === "!=") {
                                        var result36 = "!=";
                                        pos += 2;
                                    } else {
                                        var result36 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"!=\"");
                                        }
                                    }
                                    if (result36 !== null) {
                                        var result37 = [];
                                        var result39 = parse_WS();
                                        while (result39 !== null) {
                                            result37.push(result39);
                                            var result39 = parse_WS();
                                        }
                                        if (result37 !== null) {
                                            var result38 = parse_AdditiveExpression();
                                            if (result38 !== null) {
                                                var result34 = [result35, result36, result37, result38];
                                            } else {
                                                var result34 = null;
                                                pos = savedPos6;
                                            }
                                        } else {
                                            var result34 = null;
                                            pos = savedPos6;
                                        }
                                    } else {
                                        var result34 = null;
                                        pos = savedPos6;
                                    }
                                } else {
                                    var result34 = null;
                                    pos = savedPos6;
                                }
                                if (result34 !== null) {
                                    var result5 = result34;
                                } else {
                                    var savedPos5 = pos;
                                    var result28 = [];
                                    var result33 = parse_WS();
                                    while (result33 !== null) {
                                        result28.push(result33);
                                        var result33 = parse_WS();
                                    }
                                    if (result28 !== null) {
                                        if (input.substr(pos, 1) === "<") {
                                            var result29 = "<";
                                            pos += 1;
                                        } else {
                                            var result29 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"<\"");
                                            }
                                        }
                                        if (result29 !== null) {
                                            var result30 = [];
                                            var result32 = parse_WS();
                                            while (result32 !== null) {
                                                result30.push(result32);
                                                var result32 = parse_WS();
                                            }
                                            if (result30 !== null) {
                                                var result31 = parse_AdditiveExpression();
                                                if (result31 !== null) {
                                                    var result27 = [result28, result29, result30, result31];
                                                } else {
                                                    var result27 = null;
                                                    pos = savedPos5;
                                                }
                                            } else {
                                                var result27 = null;
                                                pos = savedPos5;
                                            }
                                        } else {
                                            var result27 = null;
                                            pos = savedPos5;
                                        }
                                    } else {
                                        var result27 = null;
                                        pos = savedPos5;
                                    }
                                    if (result27 !== null) {
                                        var result5 = result27;
                                    } else {
                                        var savedPos4 = pos;
                                        var result21 = [];
                                        var result26 = parse_WS();
                                        while (result26 !== null) {
                                            result21.push(result26);
                                            var result26 = parse_WS();
                                        }
                                        if (result21 !== null) {
                                            if (input.substr(pos, 1) === ">") {
                                                var result22 = ">";
                                                pos += 1;
                                            } else {
                                                var result22 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\">\"");
                                                }
                                            }
                                            if (result22 !== null) {
                                                var result23 = [];
                                                var result25 = parse_WS();
                                                while (result25 !== null) {
                                                    result23.push(result25);
                                                    var result25 = parse_WS();
                                                }
                                                if (result23 !== null) {
                                                    var result24 = parse_AdditiveExpression();
                                                    if (result24 !== null) {
                                                        var result20 = [result21, result22, result23, result24];
                                                    } else {
                                                        var result20 = null;
                                                        pos = savedPos4;
                                                    }
                                                } else {
                                                    var result20 = null;
                                                    pos = savedPos4;
                                                }
                                            } else {
                                                var result20 = null;
                                                pos = savedPos4;
                                            }
                                        } else {
                                            var result20 = null;
                                            pos = savedPos4;
                                        }
                                        if (result20 !== null) {
                                            var result5 = result20;
                                        } else {
                                            var savedPos3 = pos;
                                            var result14 = [];
                                            var result19 = parse_WS();
                                            while (result19 !== null) {
                                                result14.push(result19);
                                                var result19 = parse_WS();
                                            }
                                            if (result14 !== null) {
                                                if (input.substr(pos, 2) === "<=") {
                                                    var result15 = "<=";
                                                    pos += 2;
                                                } else {
                                                    var result15 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"<=\"");
                                                    }
                                                }
                                                if (result15 !== null) {
                                                    var result16 = [];
                                                    var result18 = parse_WS();
                                                    while (result18 !== null) {
                                                        result16.push(result18);
                                                        var result18 = parse_WS();
                                                    }
                                                    if (result16 !== null) {
                                                        var result17 = parse_AdditiveExpression();
                                                        if (result17 !== null) {
                                                            var result13 = [result14, result15, result16, result17];
                                                        } else {
                                                            var result13 = null;
                                                            pos = savedPos3;
                                                        }
                                                    } else {
                                                        var result13 = null;
                                                        pos = savedPos3;
                                                    }
                                                } else {
                                                    var result13 = null;
                                                    pos = savedPos3;
                                                }
                                            } else {
                                                var result13 = null;
                                                pos = savedPos3;
                                            }
                                            if (result13 !== null) {
                                                var result5 = result13;
                                            } else {
                                                var savedPos2 = pos;
                                                var result7 = [];
                                                var result12 = parse_WS();
                                                while (result12 !== null) {
                                                    result7.push(result12);
                                                    var result12 = parse_WS();
                                                }
                                                if (result7 !== null) {
                                                    if (input.substr(pos, 2) === ">=") {
                                                        var result8 = ">=";
                                                        pos += 2;
                                                    } else {
                                                        var result8 = null;
                                                        if (reportMatchFailures) {
                                                            matchFailed("\">=\"");
                                                        }
                                                    }
                                                    if (result8 !== null) {
                                                        var result9 = [];
                                                        var result11 = parse_WS();
                                                        while (result11 !== null) {
                                                            result9.push(result11);
                                                            var result11 = parse_WS();
                                                        }
                                                        if (result9 !== null) {
                                                            var result10 = parse_AdditiveExpression();
                                                            if (result10 !== null) {
                                                                var result6 = [result7, result8, result9, result10];
                                                            } else {
                                                                var result6 = null;
                                                                pos = savedPos2;
                                                            }
                                                        } else {
                                                            var result6 = null;
                                                            pos = savedPos2;
                                                        }
                                                    } else {
                                                        var result6 = null;
                                                        pos = savedPos2;
                                                    }
                                                } else {
                                                    var result6 = null;
                                                    pos = savedPos2;
                                                }
                                                if (result6 !== null) {
                                                    var result5 = result6;
                                                } else {
                                                    var result5 = null;;
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(op1, op2) {
                        if(op2.length === 0) {
                            return op1;
                        } else {
                            var exp = {};
                            exp.expressionType = "relationalexpression"
                            exp.operator = op2[0][1];
                            exp.op1 = op1;
                            exp.op2 = op2[0][3];
                            exp.token = "expression";

                            return exp;
                        }
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[99] RelationalExpression");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_AdditiveExpression() {
                    var cacheKey = 'AdditiveExpression@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_MultiplicativeExpression();
                    if (result3 !== null) {
                        var result4 = [];
                        var savedPos6 = pos;
                        var result34 = [];
                        var result39 = parse_WS();
                        while (result39 !== null) {
                            result34.push(result39);
                            var result39 = parse_WS();
                        }
                        if (result34 !== null) {
                            if (input.substr(pos, 1) === "+") {
                                var result35 = "+";
                                pos += 1;
                            } else {
                                var result35 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"+\"");
                                }
                            }
                            if (result35 !== null) {
                                var result36 = [];
                                var result38 = parse_WS();
                                while (result38 !== null) {
                                    result36.push(result38);
                                    var result38 = parse_WS();
                                }
                                if (result36 !== null) {
                                    var result37 = parse_MultiplicativeExpression();
                                    if (result37 !== null) {
                                        var result33 = [result34, result35, result36, result37];
                                    } else {
                                        var result33 = null;
                                        pos = savedPos6;
                                    }
                                } else {
                                    var result33 = null;
                                    pos = savedPos6;
                                }
                            } else {
                                var result33 = null;
                                pos = savedPos6;
                            }
                        } else {
                            var result33 = null;
                            pos = savedPos6;
                        }
                        if (result33 !== null) {
                            var result5 = result33;
                        } else {
                            var savedPos5 = pos;
                            var result27 = [];
                            var result32 = parse_WS();
                            while (result32 !== null) {
                                result27.push(result32);
                                var result32 = parse_WS();
                            }
                            if (result27 !== null) {
                                if (input.substr(pos, 1) === "-") {
                                    var result28 = "-";
                                    pos += 1;
                                } else {
                                    var result28 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"-\"");
                                    }
                                }
                                if (result28 !== null) {
                                    var result29 = [];
                                    var result31 = parse_WS();
                                    while (result31 !== null) {
                                        result29.push(result31);
                                        var result31 = parse_WS();
                                    }
                                    if (result29 !== null) {
                                        var result30 = parse_MultiplicativeExpression();
                                        if (result30 !== null) {
                                            var result26 = [result27, result28, result29, result30];
                                        } else {
                                            var result26 = null;
                                            pos = savedPos5;
                                        }
                                    } else {
                                        var result26 = null;
                                        pos = savedPos5;
                                    }
                                } else {
                                    var result26 = null;
                                    pos = savedPos5;
                                }
                            } else {
                                var result26 = null;
                                pos = savedPos5;
                            }
                            if (result26 !== null) {
                                var result5 = result26;
                            } else {
                                var savedPos2 = pos;
                                var result25 = parse_NumericLiteralNegative();
                                if (result25 !== null) {
                                    var result7 = result25;
                                } else {
                                    var result24 = parse_NumericLiteralNegative();
                                    if (result24 !== null) {
                                        var result7 = result24;
                                    } else {
                                        var result7 = null;;
                                    };
                                }
                                if (result7 !== null) {
                                    var savedPos4 = pos;
                                    var result18 = [];
                                    var result23 = parse_WS();
                                    while (result23 !== null) {
                                        result18.push(result23);
                                        var result23 = parse_WS();
                                    }
                                    if (result18 !== null) {
                                        if (input.substr(pos, 1) === "*") {
                                            var result19 = "*";
                                            pos += 1;
                                        } else {
                                            var result19 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"*\"");
                                            }
                                        }
                                        if (result19 !== null) {
                                            var result20 = [];
                                            var result22 = parse_WS();
                                            while (result22 !== null) {
                                                result20.push(result22);
                                                var result22 = parse_WS();
                                            }
                                            if (result20 !== null) {
                                                var result21 = parse_UnaryExpression();
                                                if (result21 !== null) {
                                                    var result17 = [result18, result19, result20, result21];
                                                } else {
                                                    var result17 = null;
                                                    pos = savedPos4;
                                                }
                                            } else {
                                                var result17 = null;
                                                pos = savedPos4;
                                            }
                                        } else {
                                            var result17 = null;
                                            pos = savedPos4;
                                        }
                                    } else {
                                        var result17 = null;
                                        pos = savedPos4;
                                    }
                                    if (result17 !== null) {
                                        var result9 = result17;
                                    } else {
                                        var savedPos3 = pos;
                                        var result11 = [];
                                        var result16 = parse_WS();
                                        while (result16 !== null) {
                                            result11.push(result16);
                                            var result16 = parse_WS();
                                        }
                                        if (result11 !== null) {
                                            if (input.substr(pos, 1) === "/") {
                                                var result12 = "/";
                                                pos += 1;
                                            } else {
                                                var result12 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"/\"");
                                                }
                                            }
                                            if (result12 !== null) {
                                                var result13 = [];
                                                var result15 = parse_WS();
                                                while (result15 !== null) {
                                                    result13.push(result15);
                                                    var result15 = parse_WS();
                                                }
                                                if (result13 !== null) {
                                                    var result14 = parse_UnaryExpression();
                                                    if (result14 !== null) {
                                                        var result10 = [result11, result12, result13, result14];
                                                    } else {
                                                        var result10 = null;
                                                        pos = savedPos3;
                                                    }
                                                } else {
                                                    var result10 = null;
                                                    pos = savedPos3;
                                                }
                                            } else {
                                                var result10 = null;
                                                pos = savedPos3;
                                            }
                                        } else {
                                            var result10 = null;
                                            pos = savedPos3;
                                        }
                                        if (result10 !== null) {
                                            var result9 = result10;
                                        } else {
                                            var result9 = null;;
                                        };
                                    }
                                    var result8 = result9 !== null ? result9 : '';
                                    if (result8 !== null) {
                                        var result6 = [result7, result8];
                                    } else {
                                        var result6 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result6 = null;
                                    pos = savedPos2;
                                }
                                if (result6 !== null) {
                                    var result5 = result6;
                                } else {
                                    var result5 = null;;
                                };
                            };
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var savedPos6 = pos;
                            var result34 = [];
                            var result39 = parse_WS();
                            while (result39 !== null) {
                                result34.push(result39);
                                var result39 = parse_WS();
                            }
                            if (result34 !== null) {
                                if (input.substr(pos, 1) === "+") {
                                    var result35 = "+";
                                    pos += 1;
                                } else {
                                    var result35 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"+\"");
                                    }
                                }
                                if (result35 !== null) {
                                    var result36 = [];
                                    var result38 = parse_WS();
                                    while (result38 !== null) {
                                        result36.push(result38);
                                        var result38 = parse_WS();
                                    }
                                    if (result36 !== null) {
                                        var result37 = parse_MultiplicativeExpression();
                                        if (result37 !== null) {
                                            var result33 = [result34, result35, result36, result37];
                                        } else {
                                            var result33 = null;
                                            pos = savedPos6;
                                        }
                                    } else {
                                        var result33 = null;
                                        pos = savedPos6;
                                    }
                                } else {
                                    var result33 = null;
                                    pos = savedPos6;
                                }
                            } else {
                                var result33 = null;
                                pos = savedPos6;
                            }
                            if (result33 !== null) {
                                var result5 = result33;
                            } else {
                                var savedPos5 = pos;
                                var result27 = [];
                                var result32 = parse_WS();
                                while (result32 !== null) {
                                    result27.push(result32);
                                    var result32 = parse_WS();
                                }
                                if (result27 !== null) {
                                    if (input.substr(pos, 1) === "-") {
                                        var result28 = "-";
                                        pos += 1;
                                    } else {
                                        var result28 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"-\"");
                                        }
                                    }
                                    if (result28 !== null) {
                                        var result29 = [];
                                        var result31 = parse_WS();
                                        while (result31 !== null) {
                                            result29.push(result31);
                                            var result31 = parse_WS();
                                        }
                                        if (result29 !== null) {
                                            var result30 = parse_MultiplicativeExpression();
                                            if (result30 !== null) {
                                                var result26 = [result27, result28, result29, result30];
                                            } else {
                                                var result26 = null;
                                                pos = savedPos5;
                                            }
                                        } else {
                                            var result26 = null;
                                            pos = savedPos5;
                                        }
                                    } else {
                                        var result26 = null;
                                        pos = savedPos5;
                                    }
                                } else {
                                    var result26 = null;
                                    pos = savedPos5;
                                }
                                if (result26 !== null) {
                                    var result5 = result26;
                                } else {
                                    var savedPos2 = pos;
                                    var result25 = parse_NumericLiteralNegative();
                                    if (result25 !== null) {
                                        var result7 = result25;
                                    } else {
                                        var result24 = parse_NumericLiteralNegative();
                                        if (result24 !== null) {
                                            var result7 = result24;
                                        } else {
                                            var result7 = null;;
                                        };
                                    }
                                    if (result7 !== null) {
                                        var savedPos4 = pos;
                                        var result18 = [];
                                        var result23 = parse_WS();
                                        while (result23 !== null) {
                                            result18.push(result23);
                                            var result23 = parse_WS();
                                        }
                                        if (result18 !== null) {
                                            if (input.substr(pos, 1) === "*") {
                                                var result19 = "*";
                                                pos += 1;
                                            } else {
                                                var result19 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"*\"");
                                                }
                                            }
                                            if (result19 !== null) {
                                                var result20 = [];
                                                var result22 = parse_WS();
                                                while (result22 !== null) {
                                                    result20.push(result22);
                                                    var result22 = parse_WS();
                                                }
                                                if (result20 !== null) {
                                                    var result21 = parse_UnaryExpression();
                                                    if (result21 !== null) {
                                                        var result17 = [result18, result19, result20, result21];
                                                    } else {
                                                        var result17 = null;
                                                        pos = savedPos4;
                                                    }
                                                } else {
                                                    var result17 = null;
                                                    pos = savedPos4;
                                                }
                                            } else {
                                                var result17 = null;
                                                pos = savedPos4;
                                            }
                                        } else {
                                            var result17 = null;
                                            pos = savedPos4;
                                        }
                                        if (result17 !== null) {
                                            var result9 = result17;
                                        } else {
                                            var savedPos3 = pos;
                                            var result11 = [];
                                            var result16 = parse_WS();
                                            while (result16 !== null) {
                                                result11.push(result16);
                                                var result16 = parse_WS();
                                            }
                                            if (result11 !== null) {
                                                if (input.substr(pos, 1) === "/") {
                                                    var result12 = "/";
                                                    pos += 1;
                                                } else {
                                                    var result12 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"/\"");
                                                    }
                                                }
                                                if (result12 !== null) {
                                                    var result13 = [];
                                                    var result15 = parse_WS();
                                                    while (result15 !== null) {
                                                        result13.push(result15);
                                                        var result15 = parse_WS();
                                                    }
                                                    if (result13 !== null) {
                                                        var result14 = parse_UnaryExpression();
                                                        if (result14 !== null) {
                                                            var result10 = [result11, result12, result13, result14];
                                                        } else {
                                                            var result10 = null;
                                                            pos = savedPos3;
                                                        }
                                                    } else {
                                                        var result10 = null;
                                                        pos = savedPos3;
                                                    }
                                                } else {
                                                    var result10 = null;
                                                    pos = savedPos3;
                                                }
                                            } else {
                                                var result10 = null;
                                                pos = savedPos3;
                                            }
                                            if (result10 !== null) {
                                                var result9 = result10;
                                            } else {
                                                var result9 = null;;
                                            };
                                        }
                                        var result8 = result9 !== null ? result9 : '';
                                        if (result8 !== null) {
                                            var result6 = [result7, result8];
                                        } else {
                                            var result6 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result6 = null;
                                        pos = savedPos2;
                                    }
                                    if (result6 !== null) {
                                        var result5 = result6;
                                    } else {
                                        var result5 = null;;
                                    };
                                };
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(op1, ops) {
                        if(ops.length === 0) {
                            return op1;
                        }

                        var ex = {};
                        ex.token = 'expression';
                        ex.expressionType = 'additiveexpression';
                        ex.summand = op1;
                        ex.summands = [];

                        for(var i=0; i<ops.length; i++) {
                            var summand = ops[i];
                            var sum = {};
                            if(summand.length == 4 && typeof(summand[1]) === "string") {
                                sum.operator = summand[1];
                                sum.expression = summand[3];
                            } else {
                                var subexp = {}
                                var firstFactor = sum[0];
                                var operator = sum[1][1];
                                var secondFactor = sum[1][3];
                                var operator = null;
                                if(firstFactor.value < 0) {
                                    sum.operator = '-';
                                    firstFactor.value = - firstFactor.value;
                                } else {
                                    sum.operator = '+';
                                }
                                subexp.token = 'expression';
                                subexp.expressionType = 'multiplicativeexpression';
                                subexp.operator = firstFactor;
                                subexp.factors = [{operator: operator, expression: secondFactor}];

                                sum.expression = subexp;
                            }
                            ex.summands.push(sum);
                        }

                        return ex;
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[101] AdditiveExpression");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_MultiplicativeExpression() {
                    var cacheKey = 'MultiplicativeExpression@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_UnaryExpression();
                    if (result3 !== null) {
                        var result4 = [];
                        var savedPos3 = pos;
                        var result14 = [];
                        var result19 = parse_WS();
                        while (result19 !== null) {
                            result14.push(result19);
                            var result19 = parse_WS();
                        }
                        if (result14 !== null) {
                            if (input.substr(pos, 1) === "*") {
                                var result15 = "*";
                                pos += 1;
                            } else {
                                var result15 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"*\"");
                                }
                            }
                            if (result15 !== null) {
                                var result16 = [];
                                var result18 = parse_WS();
                                while (result18 !== null) {
                                    result16.push(result18);
                                    var result18 = parse_WS();
                                }
                                if (result16 !== null) {
                                    var result17 = parse_UnaryExpression();
                                    if (result17 !== null) {
                                        var result13 = [result14, result15, result16, result17];
                                    } else {
                                        var result13 = null;
                                        pos = savedPos3;
                                    }
                                } else {
                                    var result13 = null;
                                    pos = savedPos3;
                                }
                            } else {
                                var result13 = null;
                                pos = savedPos3;
                            }
                        } else {
                            var result13 = null;
                            pos = savedPos3;
                        }
                        if (result13 !== null) {
                            var result5 = result13;
                        } else {
                            var savedPos2 = pos;
                            var result7 = [];
                            var result12 = parse_WS();
                            while (result12 !== null) {
                                result7.push(result12);
                                var result12 = parse_WS();
                            }
                            if (result7 !== null) {
                                if (input.substr(pos, 1) === "/") {
                                    var result8 = "/";
                                    pos += 1;
                                } else {
                                    var result8 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"/\"");
                                    }
                                }
                                if (result8 !== null) {
                                    var result9 = [];
                                    var result11 = parse_WS();
                                    while (result11 !== null) {
                                        result9.push(result11);
                                        var result11 = parse_WS();
                                    }
                                    if (result9 !== null) {
                                        var result10 = parse_UnaryExpression();
                                        if (result10 !== null) {
                                            var result6 = [result7, result8, result9, result10];
                                        } else {
                                            var result6 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result6 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result6 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result6 = null;
                                pos = savedPos2;
                            }
                            if (result6 !== null) {
                                var result5 = result6;
                            } else {
                                var result5 = null;;
                            };
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var savedPos3 = pos;
                            var result14 = [];
                            var result19 = parse_WS();
                            while (result19 !== null) {
                                result14.push(result19);
                                var result19 = parse_WS();
                            }
                            if (result14 !== null) {
                                if (input.substr(pos, 1) === "*") {
                                    var result15 = "*";
                                    pos += 1;
                                } else {
                                    var result15 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"*\"");
                                    }
                                }
                                if (result15 !== null) {
                                    var result16 = [];
                                    var result18 = parse_WS();
                                    while (result18 !== null) {
                                        result16.push(result18);
                                        var result18 = parse_WS();
                                    }
                                    if (result16 !== null) {
                                        var result17 = parse_UnaryExpression();
                                        if (result17 !== null) {
                                            var result13 = [result14, result15, result16, result17];
                                        } else {
                                            var result13 = null;
                                            pos = savedPos3;
                                        }
                                    } else {
                                        var result13 = null;
                                        pos = savedPos3;
                                    }
                                } else {
                                    var result13 = null;
                                    pos = savedPos3;
                                }
                            } else {
                                var result13 = null;
                                pos = savedPos3;
                            }
                            if (result13 !== null) {
                                var result5 = result13;
                            } else {
                                var savedPos2 = pos;
                                var result7 = [];
                                var result12 = parse_WS();
                                while (result12 !== null) {
                                    result7.push(result12);
                                    var result12 = parse_WS();
                                }
                                if (result7 !== null) {
                                    if (input.substr(pos, 1) === "/") {
                                        var result8 = "/";
                                        pos += 1;
                                    } else {
                                        var result8 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"/\"");
                                        }
                                    }
                                    if (result8 !== null) {
                                        var result9 = [];
                                        var result11 = parse_WS();
                                        while (result11 !== null) {
                                            result9.push(result11);
                                            var result11 = parse_WS();
                                        }
                                        if (result9 !== null) {
                                            var result10 = parse_UnaryExpression();
                                            if (result10 !== null) {
                                                var result6 = [result7, result8, result9, result10];
                                            } else {
                                                var result6 = null;
                                                pos = savedPos2;
                                            }
                                        } else {
                                            var result6 = null;
                                            pos = savedPos2;
                                        }
                                    } else {
                                        var result6 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result6 = null;
                                    pos = savedPos2;
                                }
                                if (result6 !== null) {
                                    var result5 = result6;
                                } else {
                                    var result5 = null;;
                                };
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(exp, exps) {
                        if(exps.length === 0) {
                            return exp;
                        }

                        var ex = {};
                        ex.token = 'expression';
                        ex.expressionType = 'multiplicativeexpression';
                        ex.factor = exp;
                        ex.factors = [];
                        for(var i=0; i<exps.length; i++) {
                            var factor = exps[i];
                            var fact = {};
                            fact.operator = factor[1];
                            fact.expression = factor[3];
                            ex.factors.push(fact);
                        }

                        return ex;
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[102] MultiplicativeExpression");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_UnaryExpression() {
                    var cacheKey = 'UnaryExpression@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos4 = pos;
                    var savedPos5 = pos;
                    if (input.substr(pos, 1) === "!") {
                        var result19 = "!";
                        pos += 1;
                    } else {
                        var result19 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"!\"");
                        }
                    }
                    if (result19 !== null) {
                        var result20 = [];
                        var result22 = parse_WS();
                        while (result22 !== null) {
                            result20.push(result22);
                            var result22 = parse_WS();
                        }
                        if (result20 !== null) {
                            var result21 = parse_PrimaryExpression();
                            if (result21 !== null) {
                                var result17 = [result19, result20, result21];
                            } else {
                                var result17 = null;
                                pos = savedPos5;
                            }
                        } else {
                            var result17 = null;
                            pos = savedPos5;
                        }
                    } else {
                        var result17 = null;
                        pos = savedPos5;
                    }
                    var result18 = result17 !== null
                        ? (function(e) {
                        var ex = {};
                        ex.token = 'expression';
                        ex.expressionType = 'unaryexpression';
                        ex.unaryexpression = "!";
                        ex.expression = e;

                        return ex;
                    })(result17[2])
                        : null;
                    if (result18 !== null) {
                        var result16 = result18;
                    } else {
                        var result16 = null;
                        pos = savedPos4;
                    }
                    if (result16 !== null) {
                        var result0 = result16;
                    } else {
                        var savedPos2 = pos;
                        var savedPos3 = pos;
                        if (input.substr(pos, 1) === "+") {
                            var result12 = "+";
                            pos += 1;
                        } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"+\"");
                            }
                        }
                        if (result12 !== null) {
                            var result13 = [];
                            var result15 = parse_WS();
                            while (result15 !== null) {
                                result13.push(result15);
                                var result15 = parse_WS();
                            }
                            if (result13 !== null) {
                                var result14 = parse_PrimaryExpression();
                                if (result14 !== null) {
                                    var result10 = [result12, result13, result14];
                                } else {
                                    var result10 = null;
                                    pos = savedPos3;
                                }
                            } else {
                                var result10 = null;
                                pos = savedPos3;
                            }
                        } else {
                            var result10 = null;
                            pos = savedPos3;
                        }
                        var result11 = result10 !== null
                            ? (function(v) {
                            var ex = {};
                            ex.token = 'expression';
                            ex.expressionType = 'unaryexpression';
                            ex.unaryexpression = "+";
                            ex.expression = v;

                            return ex;
                        })(result10[2])
                            : null;
                        if (result11 !== null) {
                            var result9 = result11;
                        } else {
                            var result9 = null;
                            pos = savedPos2;
                        }
                        if (result9 !== null) {
                            var result0 = result9;
                        } else {
                            var savedPos0 = pos;
                            var savedPos1 = pos;
                            if (input.substr(pos, 1) === "-") {
                                var result5 = "-";
                                pos += 1;
                            } else {
                                var result5 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"-\"");
                                }
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_PrimaryExpression();
                                    if (result7 !== null) {
                                        var result3 = [result5, result6, result7];
                                    } else {
                                        var result3 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result3 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result3 = null;
                                pos = savedPos1;
                            }
                            var result4 = result3 !== null
                                ? (function(v) {
                                var ex = {};
                                ex.token = 'expression';
                                ex.expressionType = 'unaryexpression';
                                ex.unaryexpression = "-";
                                ex.expression = v;

                                return ex;
                            })(result3[2])
                                : null;
                            if (result4 !== null) {
                                var result2 = result4;
                            } else {
                                var result2 = null;
                                pos = savedPos0;
                            }
                            if (result2 !== null) {
                                var result0 = result2;
                            } else {
                                var result1 = parse_PrimaryExpression();
                                if (result1 !== null) {
                                    var result0 = result1;
                                } else {
                                    var result0 = null;;
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[103] UnaryExpression");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PrimaryExpression() {
                    var cacheKey = 'PrimaryExpression@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result16 = parse_BrackettedExpression();
                    if (result16 !== null) {
                        var result0 = result16;
                    } else {
                        var result15 = parse_BuiltInCall();
                        if (result15 !== null) {
                            var result0 = result15;
                        } else {
                            var result14 = parse_IRIrefOrFunction();
                            if (result14 !== null) {
                                var result0 = result14;
                            } else {
                                var savedPos3 = pos;
                                var result12 = parse_RDFLiteral();
                                var result13 = result12 !== null
                                    ? (function(v) {
                                    var ex = {};
                                    ex.token = 'expression';
                                    ex.expressionType = 'atomic';
                                    ex.primaryexpression = 'rdfliteral';
                                    ex.value = v;

                                    return ex;
                                })(result12)
                                    : null;
                                if (result13 !== null) {
                                    var result11 = result13;
                                } else {
                                    var result11 = null;
                                    pos = savedPos3;
                                }
                                if (result11 !== null) {
                                    var result0 = result11;
                                } else {
                                    var savedPos2 = pos;
                                    var result9 = parse_NumericLiteral();
                                    var result10 = result9 !== null
                                        ? (function(v) {
                                        var ex = {};
                                        ex.token = 'expression';
                                        ex.expressionType = 'atomic';
                                        ex.primaryexpression = 'numericliteral';
                                        ex.value = v;

                                        return ex;
                                    })(result9)
                                        : null;
                                    if (result10 !== null) {
                                        var result8 = result10;
                                    } else {
                                        var result8 = null;
                                        pos = savedPos2;
                                    }
                                    if (result8 !== null) {
                                        var result0 = result8;
                                    } else {
                                        var savedPos1 = pos;
                                        var result6 = parse_BooleanLiteral();
                                        var result7 = result6 !== null
                                            ? (function(v) {
                                            var ex = {};
                                            ex.token = 'expression';
                                            ex.expressionType = 'atomic';
                                            ex.primaryexpression = 'booleanliteral';
                                            ex.value = v;

                                            return ex;
                                        })(result6)
                                            : null;
                                        if (result7 !== null) {
                                            var result5 = result7;
                                        } else {
                                            var result5 = null;
                                            pos = savedPos1;
                                        }
                                        if (result5 !== null) {
                                            var result0 = result5;
                                        } else {
                                            var result4 = parse_Aggregate();
                                            if (result4 !== null) {
                                                var result0 = result4;
                                            } else {
                                                var savedPos0 = pos;
                                                var result2 = parse_Var();
                                                var result3 = result2 !== null
                                                    ? (function(v) {
                                                    var ex = {};
                                                    ex.token = 'expression';
                                                    ex.expressionType = 'atomic';
                                                    ex.primaryexpression = 'var';
                                                    ex.value = v;

                                                    return ex;
                                                })(result2)
                                                    : null;
                                                if (result3 !== null) {
                                                    var result1 = result3;
                                                } else {
                                                    var result1 = null;
                                                    pos = savedPos0;
                                                }
                                                if (result1 !== null) {
                                                    var result0 = result1;
                                                } else {
                                                    var result0 = null;;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[104] PrimaryExpression");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_BrackettedExpression() {
                    var cacheKey = 'BrackettedExpression@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "(") {
                        var result3 = "(";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result9 = parse_WS();
                        while (result9 !== null) {
                            result4.push(result9);
                            var result9 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_ConditionalOrExpression();
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    if (input.substr(pos, 1) === ")") {
                                        var result7 = ")";
                                        pos += 1;
                                    } else {
                                        var result7 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\")\"");
                                        }
                                    }
                                    if (result7 !== null) {
                                        var result1 = [result3, result4, result5, result6, result7];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(e) {
                        return e;
                    })(result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[105] BrackettedExpression");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_BuiltInCall() {
                    var cacheKey = 'BuiltInCall@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos27 = pos;
                    var savedPos28 = pos;
                    if (input.substr(pos, 3) === "STR") {
                        var result216 = "STR";
                        pos += 3;
                    } else {
                        var result216 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"STR\"");
                        }
                    }
                    if (result216 !== null) {
                        var result205 = result216;
                    } else {
                        if (input.substr(pos, 3) === "str") {
                            var result215 = "str";
                            pos += 3;
                        } else {
                            var result215 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"str\"");
                            }
                        }
                        if (result215 !== null) {
                            var result205 = result215;
                        } else {
                            var result205 = null;;
                        };
                    }
                    if (result205 !== null) {
                        var result206 = [];
                        var result214 = parse_WS();
                        while (result214 !== null) {
                            result206.push(result214);
                            var result214 = parse_WS();
                        }
                        if (result206 !== null) {
                            if (input.substr(pos, 1) === "(") {
                                var result207 = "(";
                                pos += 1;
                            } else {
                                var result207 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"(\"");
                                }
                            }
                            if (result207 !== null) {
                                var result208 = [];
                                var result213 = parse_WS();
                                while (result213 !== null) {
                                    result208.push(result213);
                                    var result213 = parse_WS();
                                }
                                if (result208 !== null) {
                                    var result209 = parse_ConditionalOrExpression();
                                    if (result209 !== null) {
                                        var result210 = [];
                                        var result212 = parse_WS();
                                        while (result212 !== null) {
                                            result210.push(result212);
                                            var result212 = parse_WS();
                                        }
                                        if (result210 !== null) {
                                            if (input.substr(pos, 1) === ")") {
                                                var result211 = ")";
                                                pos += 1;
                                            } else {
                                                var result211 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\")\"");
                                                }
                                            }
                                            if (result211 !== null) {
                                                var result203 = [result205, result206, result207, result208, result209, result210, result211];
                                            } else {
                                                var result203 = null;
                                                pos = savedPos28;
                                            }
                                        } else {
                                            var result203 = null;
                                            pos = savedPos28;
                                        }
                                    } else {
                                        var result203 = null;
                                        pos = savedPos28;
                                    }
                                } else {
                                    var result203 = null;
                                    pos = savedPos28;
                                }
                            } else {
                                var result203 = null;
                                pos = savedPos28;
                            }
                        } else {
                            var result203 = null;
                            pos = savedPos28;
                        }
                    } else {
                        var result203 = null;
                        pos = savedPos28;
                    }
                    var result204 = result203 !== null
                        ? (function(e) {
                        var ex = {};
                        ex.token = 'expression'
                        ex.expressionType = 'builtincall'
                        ex.builtincall = 'str'
                        ex.args = [e]

                        return ex;
                    })(result203[4])
                        : null;
                    if (result204 !== null) {
                        var result202 = result204;
                    } else {
                        var result202 = null;
                        pos = savedPos27;
                    }
                    if (result202 !== null) {
                        var result0 = result202;
                    } else {
                        var savedPos25 = pos;
                        var savedPos26 = pos;
                        if (input.substr(pos, 4) === "LANG") {
                            var result201 = "LANG";
                            pos += 4;
                        } else {
                            var result201 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"LANG\"");
                            }
                        }
                        if (result201 !== null) {
                            var result190 = result201;
                        } else {
                            if (input.substr(pos, 4) === "lang") {
                                var result200 = "lang";
                                pos += 4;
                            } else {
                                var result200 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"lang\"");
                                }
                            }
                            if (result200 !== null) {
                                var result190 = result200;
                            } else {
                                var result190 = null;;
                            };
                        }
                        if (result190 !== null) {
                            var result191 = [];
                            var result199 = parse_WS();
                            while (result199 !== null) {
                                result191.push(result199);
                                var result199 = parse_WS();
                            }
                            if (result191 !== null) {
                                if (input.substr(pos, 1) === "(") {
                                    var result192 = "(";
                                    pos += 1;
                                } else {
                                    var result192 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"(\"");
                                    }
                                }
                                if (result192 !== null) {
                                    var result193 = [];
                                    var result198 = parse_WS();
                                    while (result198 !== null) {
                                        result193.push(result198);
                                        var result198 = parse_WS();
                                    }
                                    if (result193 !== null) {
                                        var result194 = parse_ConditionalOrExpression();
                                        if (result194 !== null) {
                                            var result195 = [];
                                            var result197 = parse_WS();
                                            while (result197 !== null) {
                                                result195.push(result197);
                                                var result197 = parse_WS();
                                            }
                                            if (result195 !== null) {
                                                if (input.substr(pos, 1) === ")") {
                                                    var result196 = ")";
                                                    pos += 1;
                                                } else {
                                                    var result196 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\")\"");
                                                    }
                                                }
                                                if (result196 !== null) {
                                                    var result188 = [result190, result191, result192, result193, result194, result195, result196];
                                                } else {
                                                    var result188 = null;
                                                    pos = savedPos26;
                                                }
                                            } else {
                                                var result188 = null;
                                                pos = savedPos26;
                                            }
                                        } else {
                                            var result188 = null;
                                            pos = savedPos26;
                                        }
                                    } else {
                                        var result188 = null;
                                        pos = savedPos26;
                                    }
                                } else {
                                    var result188 = null;
                                    pos = savedPos26;
                                }
                            } else {
                                var result188 = null;
                                pos = savedPos26;
                            }
                        } else {
                            var result188 = null;
                            pos = savedPos26;
                        }
                        var result189 = result188 !== null
                            ? (function(e) {
                            var ex = {};
                            ex.token = 'expression'
                            ex.expressionType = 'builtincall'
                            ex.builtincall = 'lang'
                            ex.args = [e]

                            return ex;
                        })(result188[4])
                            : null;
                        if (result189 !== null) {
                            var result187 = result189;
                        } else {
                            var result187 = null;
                            pos = savedPos25;
                        }
                        if (result187 !== null) {
                            var result0 = result187;
                        } else {
                            var savedPos23 = pos;
                            var savedPos24 = pos;
                            if (input.substr(pos, 11) === "LANGMATCHES") {
                                var result171 = "LANGMATCHES";
                                pos += 11;
                            } else {
                                var result171 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"LANGMATCHES\"");
                                }
                            }
                            if (result171 !== null) {
                                var result172 = [];
                                var result186 = parse_WS();
                                while (result186 !== null) {
                                    result172.push(result186);
                                    var result186 = parse_WS();
                                }
                                if (result172 !== null) {
                                    if (input.substr(pos, 1) === "(") {
                                        var result173 = "(";
                                        pos += 1;
                                    } else {
                                        var result173 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"(\"");
                                        }
                                    }
                                    if (result173 !== null) {
                                        var result174 = [];
                                        var result185 = parse_WS();
                                        while (result185 !== null) {
                                            result174.push(result185);
                                            var result185 = parse_WS();
                                        }
                                        if (result174 !== null) {
                                            var result175 = parse_ConditionalOrExpression();
                                            if (result175 !== null) {
                                                var result176 = [];
                                                var result184 = parse_WS();
                                                while (result184 !== null) {
                                                    result176.push(result184);
                                                    var result184 = parse_WS();
                                                }
                                                if (result176 !== null) {
                                                    if (input.substr(pos, 1) === ",") {
                                                        var result177 = ",";
                                                        pos += 1;
                                                    } else {
                                                        var result177 = null;
                                                        if (reportMatchFailures) {
                                                            matchFailed("\",\"");
                                                        }
                                                    }
                                                    if (result177 !== null) {
                                                        var result178 = [];
                                                        var result183 = parse_WS();
                                                        while (result183 !== null) {
                                                            result178.push(result183);
                                                            var result183 = parse_WS();
                                                        }
                                                        if (result178 !== null) {
                                                            var result179 = parse_ConditionalOrExpression();
                                                            if (result179 !== null) {
                                                                var result180 = [];
                                                                var result182 = parse_WS();
                                                                while (result182 !== null) {
                                                                    result180.push(result182);
                                                                    var result182 = parse_WS();
                                                                }
                                                                if (result180 !== null) {
                                                                    if (input.substr(pos, 1) === ")") {
                                                                        var result181 = ")";
                                                                        pos += 1;
                                                                    } else {
                                                                        var result181 = null;
                                                                        if (reportMatchFailures) {
                                                                            matchFailed("\")\"");
                                                                        }
                                                                    }
                                                                    if (result181 !== null) {
                                                                        var result169 = [result171, result172, result173, result174, result175, result176, result177, result178, result179, result180, result181];
                                                                    } else {
                                                                        var result169 = null;
                                                                        pos = savedPos24;
                                                                    }
                                                                } else {
                                                                    var result169 = null;
                                                                    pos = savedPos24;
                                                                }
                                                            } else {
                                                                var result169 = null;
                                                                pos = savedPos24;
                                                            }
                                                        } else {
                                                            var result169 = null;
                                                            pos = savedPos24;
                                                        }
                                                    } else {
                                                        var result169 = null;
                                                        pos = savedPos24;
                                                    }
                                                } else {
                                                    var result169 = null;
                                                    pos = savedPos24;
                                                }
                                            } else {
                                                var result169 = null;
                                                pos = savedPos24;
                                            }
                                        } else {
                                            var result169 = null;
                                            pos = savedPos24;
                                        }
                                    } else {
                                        var result169 = null;
                                        pos = savedPos24;
                                    }
                                } else {
                                    var result169 = null;
                                    pos = savedPos24;
                                }
                            } else {
                                var result169 = null;
                                pos = savedPos24;
                            }
                            var result170 = result169 !== null
                                ? (function(e1, e2) {
                                var ex = {};
                                ex.token = 'expression'
                                ex.expressionType = 'builtincall'
                                ex.builtincall = 'langmatches'
                                ex.args = [e1,e2]

                                return ex;
                            })(result169[4], result169[8])
                                : null;
                            if (result170 !== null) {
                                var result168 = result170;
                            } else {
                                var result168 = null;
                                pos = savedPos23;
                            }
                            if (result168 !== null) {
                                var result0 = result168;
                            } else {
                                var savedPos21 = pos;
                                var savedPos22 = pos;
                                if (input.substr(pos, 8) === "DATATYPE") {
                                    var result167 = "DATATYPE";
                                    pos += 8;
                                } else {
                                    var result167 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"DATATYPE\"");
                                    }
                                }
                                if (result167 !== null) {
                                    var result156 = result167;
                                } else {
                                    if (input.substr(pos, 8) === "datatype") {
                                        var result166 = "datatype";
                                        pos += 8;
                                    } else {
                                        var result166 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"datatype\"");
                                        }
                                    }
                                    if (result166 !== null) {
                                        var result156 = result166;
                                    } else {
                                        var result156 = null;;
                                    };
                                }
                                if (result156 !== null) {
                                    var result157 = [];
                                    var result165 = parse_WS();
                                    while (result165 !== null) {
                                        result157.push(result165);
                                        var result165 = parse_WS();
                                    }
                                    if (result157 !== null) {
                                        if (input.substr(pos, 1) === "(") {
                                            var result158 = "(";
                                            pos += 1;
                                        } else {
                                            var result158 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"(\"");
                                            }
                                        }
                                        if (result158 !== null) {
                                            var result159 = [];
                                            var result164 = parse_WS();
                                            while (result164 !== null) {
                                                result159.push(result164);
                                                var result164 = parse_WS();
                                            }
                                            if (result159 !== null) {
                                                var result160 = parse_ConditionalOrExpression();
                                                if (result160 !== null) {
                                                    var result161 = [];
                                                    var result163 = parse_WS();
                                                    while (result163 !== null) {
                                                        result161.push(result163);
                                                        var result163 = parse_WS();
                                                    }
                                                    if (result161 !== null) {
                                                        if (input.substr(pos, 1) === ")") {
                                                            var result162 = ")";
                                                            pos += 1;
                                                        } else {
                                                            var result162 = null;
                                                            if (reportMatchFailures) {
                                                                matchFailed("\")\"");
                                                            }
                                                        }
                                                        if (result162 !== null) {
                                                            var result154 = [result156, result157, result158, result159, result160, result161, result162];
                                                        } else {
                                                            var result154 = null;
                                                            pos = savedPos22;
                                                        }
                                                    } else {
                                                        var result154 = null;
                                                        pos = savedPos22;
                                                    }
                                                } else {
                                                    var result154 = null;
                                                    pos = savedPos22;
                                                }
                                            } else {
                                                var result154 = null;
                                                pos = savedPos22;
                                            }
                                        } else {
                                            var result154 = null;
                                            pos = savedPos22;
                                        }
                                    } else {
                                        var result154 = null;
                                        pos = savedPos22;
                                    }
                                } else {
                                    var result154 = null;
                                    pos = savedPos22;
                                }
                                var result155 = result154 !== null
                                    ? (function(e) {
                                    var ex = {};
                                    ex.token = 'expression'
                                    ex.expressionType = 'builtincall'
                                    ex.builtincall = 'datatype'
                                    ex.args = [e]

                                    return ex;
                                })(result154[4])
                                    : null;
                                if (result155 !== null) {
                                    var result153 = result155;
                                } else {
                                    var result153 = null;
                                    pos = savedPos21;
                                }
                                if (result153 !== null) {
                                    var result0 = result153;
                                } else {
                                    var savedPos19 = pos;
                                    var savedPos20 = pos;
                                    if (input.substr(pos, 5) === "BOUND") {
                                        var result143 = "BOUND";
                                        pos += 5;
                                    } else {
                                        var result143 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"BOUND\"");
                                        }
                                    }
                                    if (result143 !== null) {
                                        var result144 = [];
                                        var result152 = parse_WS();
                                        while (result152 !== null) {
                                            result144.push(result152);
                                            var result152 = parse_WS();
                                        }
                                        if (result144 !== null) {
                                            if (input.substr(pos, 1) === "(") {
                                                var result145 = "(";
                                                pos += 1;
                                            } else {
                                                var result145 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"(\"");
                                                }
                                            }
                                            if (result145 !== null) {
                                                var result146 = [];
                                                var result151 = parse_WS();
                                                while (result151 !== null) {
                                                    result146.push(result151);
                                                    var result151 = parse_WS();
                                                }
                                                if (result146 !== null) {
                                                    var result147 = parse_Var();
                                                    if (result147 !== null) {
                                                        var result148 = [];
                                                        var result150 = parse_WS();
                                                        while (result150 !== null) {
                                                            result148.push(result150);
                                                            var result150 = parse_WS();
                                                        }
                                                        if (result148 !== null) {
                                                            if (input.substr(pos, 1) === ")") {
                                                                var result149 = ")";
                                                                pos += 1;
                                                            } else {
                                                                var result149 = null;
                                                                if (reportMatchFailures) {
                                                                    matchFailed("\")\"");
                                                                }
                                                            }
                                                            if (result149 !== null) {
                                                                var result141 = [result143, result144, result145, result146, result147, result148, result149];
                                                            } else {
                                                                var result141 = null;
                                                                pos = savedPos20;
                                                            }
                                                        } else {
                                                            var result141 = null;
                                                            pos = savedPos20;
                                                        }
                                                    } else {
                                                        var result141 = null;
                                                        pos = savedPos20;
                                                    }
                                                } else {
                                                    var result141 = null;
                                                    pos = savedPos20;
                                                }
                                            } else {
                                                var result141 = null;
                                                pos = savedPos20;
                                            }
                                        } else {
                                            var result141 = null;
                                            pos = savedPos20;
                                        }
                                    } else {
                                        var result141 = null;
                                        pos = savedPos20;
                                    }
                                    var result142 = result141 !== null
                                        ? (function(v) {
                                        var ex = {};
                                        ex.token = 'expression'
                                        ex.expressionType = 'builtincall'
                                        ex.builtincall = 'bound'
                                        ex.args = [v]

                                        return ex;
                                    })(result141[4])
                                        : null;
                                    if (result142 !== null) {
                                        var result140 = result142;
                                    } else {
                                        var result140 = null;
                                        pos = savedPos19;
                                    }
                                    if (result140 !== null) {
                                        var result0 = result140;
                                    } else {
                                        var savedPos17 = pos;
                                        var savedPos18 = pos;
                                        if (input.substr(pos, 3) === "IRI") {
                                            var result130 = "IRI";
                                            pos += 3;
                                        } else {
                                            var result130 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"IRI\"");
                                            }
                                        }
                                        if (result130 !== null) {
                                            var result131 = [];
                                            var result139 = parse_WS();
                                            while (result139 !== null) {
                                                result131.push(result139);
                                                var result139 = parse_WS();
                                            }
                                            if (result131 !== null) {
                                                if (input.substr(pos, 1) === "(") {
                                                    var result132 = "(";
                                                    pos += 1;
                                                } else {
                                                    var result132 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"(\"");
                                                    }
                                                }
                                                if (result132 !== null) {
                                                    var result133 = [];
                                                    var result138 = parse_WS();
                                                    while (result138 !== null) {
                                                        result133.push(result138);
                                                        var result138 = parse_WS();
                                                    }
                                                    if (result133 !== null) {
                                                        var result134 = parse_ConditionalOrExpression();
                                                        if (result134 !== null) {
                                                            var result135 = [];
                                                            var result137 = parse_WS();
                                                            while (result137 !== null) {
                                                                result135.push(result137);
                                                                var result137 = parse_WS();
                                                            }
                                                            if (result135 !== null) {
                                                                if (input.substr(pos, 1) === ")") {
                                                                    var result136 = ")";
                                                                    pos += 1;
                                                                } else {
                                                                    var result136 = null;
                                                                    if (reportMatchFailures) {
                                                                        matchFailed("\")\"");
                                                                    }
                                                                }
                                                                if (result136 !== null) {
                                                                    var result128 = [result130, result131, result132, result133, result134, result135, result136];
                                                                } else {
                                                                    var result128 = null;
                                                                    pos = savedPos18;
                                                                }
                                                            } else {
                                                                var result128 = null;
                                                                pos = savedPos18;
                                                            }
                                                        } else {
                                                            var result128 = null;
                                                            pos = savedPos18;
                                                        }
                                                    } else {
                                                        var result128 = null;
                                                        pos = savedPos18;
                                                    }
                                                } else {
                                                    var result128 = null;
                                                    pos = savedPos18;
                                                }
                                            } else {
                                                var result128 = null;
                                                pos = savedPos18;
                                            }
                                        } else {
                                            var result128 = null;
                                            pos = savedPos18;
                                        }
                                        var result129 = result128 !== null
                                            ? (function(e) {
                                            var ex = {};
                                            ex.token = 'expression';
                                            ex.expressionType = 'builtincall';
                                            ex.builtincall = 'iri'
                                            ex.args = [e];

                                            return ex;
                                        })(result128[4])
                                            : null;
                                        if (result129 !== null) {
                                            var result127 = result129;
                                        } else {
                                            var result127 = null;
                                            pos = savedPos17;
                                        }
                                        if (result127 !== null) {
                                            var result0 = result127;
                                        } else {
                                            var savedPos15 = pos;
                                            var savedPos16 = pos;
                                            if (input.substr(pos, 3) === "URI") {
                                                var result117 = "URI";
                                                pos += 3;
                                            } else {
                                                var result117 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"URI\"");
                                                }
                                            }
                                            if (result117 !== null) {
                                                var result118 = [];
                                                var result126 = parse_WS();
                                                while (result126 !== null) {
                                                    result118.push(result126);
                                                    var result126 = parse_WS();
                                                }
                                                if (result118 !== null) {
                                                    if (input.substr(pos, 1) === "(") {
                                                        var result119 = "(";
                                                        pos += 1;
                                                    } else {
                                                        var result119 = null;
                                                        if (reportMatchFailures) {
                                                            matchFailed("\"(\"");
                                                        }
                                                    }
                                                    if (result119 !== null) {
                                                        var result120 = [];
                                                        var result125 = parse_WS();
                                                        while (result125 !== null) {
                                                            result120.push(result125);
                                                            var result125 = parse_WS();
                                                        }
                                                        if (result120 !== null) {
                                                            var result121 = parse_ConditionalOrExpression();
                                                            if (result121 !== null) {
                                                                var result122 = [];
                                                                var result124 = parse_WS();
                                                                while (result124 !== null) {
                                                                    result122.push(result124);
                                                                    var result124 = parse_WS();
                                                                }
                                                                if (result122 !== null) {
                                                                    if (input.substr(pos, 1) === ")") {
                                                                        var result123 = ")";
                                                                        pos += 1;
                                                                    } else {
                                                                        var result123 = null;
                                                                        if (reportMatchFailures) {
                                                                            matchFailed("\")\"");
                                                                        }
                                                                    }
                                                                    if (result123 !== null) {
                                                                        var result115 = [result117, result118, result119, result120, result121, result122, result123];
                                                                    } else {
                                                                        var result115 = null;
                                                                        pos = savedPos16;
                                                                    }
                                                                } else {
                                                                    var result115 = null;
                                                                    pos = savedPos16;
                                                                }
                                                            } else {
                                                                var result115 = null;
                                                                pos = savedPos16;
                                                            }
                                                        } else {
                                                            var result115 = null;
                                                            pos = savedPos16;
                                                        }
                                                    } else {
                                                        var result115 = null;
                                                        pos = savedPos16;
                                                    }
                                                } else {
                                                    var result115 = null;
                                                    pos = savedPos16;
                                                }
                                            } else {
                                                var result115 = null;
                                                pos = savedPos16;
                                            }
                                            var result116 = result115 !== null
                                                ? (function(e) {
                                                var ex = {};
                                                ex.token = 'expression';
                                                ex.expressionType = 'builtincall';
                                                ex.builtincall = 'uri'
                                                ex.args = [e];

                                                return ex;
                                            })(result115[4])
                                                : null;
                                            if (result116 !== null) {
                                                var result114 = result116;
                                            } else {
                                                var result114 = null;
                                                pos = savedPos15;
                                            }
                                            if (result114 !== null) {
                                                var result0 = result114;
                                            } else {
                                                var savedPos12 = pos;
                                                var savedPos13 = pos;
                                                if (input.substr(pos, 5) === "BNODE") {
                                                    var result101 = "BNODE";
                                                    pos += 5;
                                                } else {
                                                    var result101 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"BNODE\"");
                                                    }
                                                }
                                                if (result101 !== null) {
                                                    var result102 = [];
                                                    var result113 = parse_WS();
                                                    while (result113 !== null) {
                                                        result102.push(result113);
                                                        var result113 = parse_WS();
                                                    }
                                                    if (result102 !== null) {
                                                        var savedPos14 = pos;
                                                        if (input.substr(pos, 1) === "(") {
                                                            var result106 = "(";
                                                            pos += 1;
                                                        } else {
                                                            var result106 = null;
                                                            if (reportMatchFailures) {
                                                                matchFailed("\"(\"");
                                                            }
                                                        }
                                                        if (result106 !== null) {
                                                            var result107 = [];
                                                            var result112 = parse_WS();
                                                            while (result112 !== null) {
                                                                result107.push(result112);
                                                                var result112 = parse_WS();
                                                            }
                                                            if (result107 !== null) {
                                                                var result108 = parse_ConditionalOrExpression();
                                                                if (result108 !== null) {
                                                                    var result109 = [];
                                                                    var result111 = parse_WS();
                                                                    while (result111 !== null) {
                                                                        result109.push(result111);
                                                                        var result111 = parse_WS();
                                                                    }
                                                                    if (result109 !== null) {
                                                                        if (input.substr(pos, 1) === ")") {
                                                                            var result110 = ")";
                                                                            pos += 1;
                                                                        } else {
                                                                            var result110 = null;
                                                                            if (reportMatchFailures) {
                                                                                matchFailed("\")\"");
                                                                            }
                                                                        }
                                                                        if (result110 !== null) {
                                                                            var result105 = [result106, result107, result108, result109, result110];
                                                                        } else {
                                                                            var result105 = null;
                                                                            pos = savedPos14;
                                                                        }
                                                                    } else {
                                                                        var result105 = null;
                                                                        pos = savedPos14;
                                                                    }
                                                                } else {
                                                                    var result105 = null;
                                                                    pos = savedPos14;
                                                                }
                                                            } else {
                                                                var result105 = null;
                                                                pos = savedPos14;
                                                            }
                                                        } else {
                                                            var result105 = null;
                                                            pos = savedPos14;
                                                        }
                                                        if (result105 !== null) {
                                                            var result103 = result105;
                                                        } else {
                                                            var result104 = parse_NIL();
                                                            if (result104 !== null) {
                                                                var result103 = result104;
                                                            } else {
                                                                var result103 = null;;
                                                            };
                                                        }
                                                        if (result103 !== null) {
                                                            var result99 = [result101, result102, result103];
                                                        } else {
                                                            var result99 = null;
                                                            pos = savedPos13;
                                                        }
                                                    } else {
                                                        var result99 = null;
                                                        pos = savedPos13;
                                                    }
                                                } else {
                                                    var result99 = null;
                                                    pos = savedPos13;
                                                }
                                                var result100 = result99 !== null
                                                    ? (function(arg) {
                                                    var ex = {};
                                                    ex.token = 'expression';
                                                    ex.expressionType = 'builtincall';
                                                    ex.builtincall = 'bnode';
                                                    if(arg.length === 5) {
                                                        ex.args = [arg[2]];
                                                    } else {
                                                        ex.args = null;
                                                    }

                                                    return ex;
                                                })(result99[2])
                                                    : null;
                                                if (result100 !== null) {
                                                    var result98 = result100;
                                                } else {
                                                    var result98 = null;
                                                    pos = savedPos12;
                                                }
                                                if (result98 !== null) {
                                                    var result0 = result98;
                                                } else {
                                                    var savedPos10 = pos;
                                                    var savedPos11 = pos;
                                                    if (input.substr(pos, 8) === "COALESCE") {
                                                        var result94 = "COALESCE";
                                                        pos += 8;
                                                    } else {
                                                        var result94 = null;
                                                        if (reportMatchFailures) {
                                                            matchFailed("\"COALESCE\"");
                                                        }
                                                    }
                                                    if (result94 !== null) {
                                                        var result95 = [];
                                                        var result97 = parse_WS();
                                                        while (result97 !== null) {
                                                            result95.push(result97);
                                                            var result97 = parse_WS();
                                                        }
                                                        if (result95 !== null) {
                                                            var result96 = parse_ExpressionList();
                                                            if (result96 !== null) {
                                                                var result92 = [result94, result95, result96];
                                                            } else {
                                                                var result92 = null;
                                                                pos = savedPos11;
                                                            }
                                                        } else {
                                                            var result92 = null;
                                                            pos = savedPos11;
                                                        }
                                                    } else {
                                                        var result92 = null;
                                                        pos = savedPos11;
                                                    }
                                                    var result93 = result92 !== null
                                                        ? (function(args) {
                                                        var ex = {};
                                                        ex.token = 'expression';
                                                        ex.expressionType = 'builtincall';
                                                        ex.builtincall = 'coalesce';
                                                        ex.args = args;

                                                        return ex;
                                                    })(result92[2])
                                                        : null;
                                                    if (result93 !== null) {
                                                        var result91 = result93;
                                                    } else {
                                                        var result91 = null;
                                                        pos = savedPos10;
                                                    }
                                                    if (result91 !== null) {
                                                        var result0 = result91;
                                                    } else {
                                                        var savedPos8 = pos;
                                                        var savedPos9 = pos;
                                                        if (input.substr(pos, 2) === "IF") {
                                                            var result69 = "IF";
                                                            pos += 2;
                                                        } else {
                                                            var result69 = null;
                                                            if (reportMatchFailures) {
                                                                matchFailed("\"IF\"");
                                                            }
                                                        }
                                                        if (result69 !== null) {
                                                            var result70 = [];
                                                            var result90 = parse_WS();
                                                            while (result90 !== null) {
                                                                result70.push(result90);
                                                                var result90 = parse_WS();
                                                            }
                                                            if (result70 !== null) {
                                                                if (input.substr(pos, 1) === "(") {
                                                                    var result71 = "(";
                                                                    pos += 1;
                                                                } else {
                                                                    var result71 = null;
                                                                    if (reportMatchFailures) {
                                                                        matchFailed("\"(\"");
                                                                    }
                                                                }
                                                                if (result71 !== null) {
                                                                    var result72 = [];
                                                                    var result89 = parse_WS();
                                                                    while (result89 !== null) {
                                                                        result72.push(result89);
                                                                        var result89 = parse_WS();
                                                                    }
                                                                    if (result72 !== null) {
                                                                        var result73 = parse_ConditionalOrExpression();
                                                                        if (result73 !== null) {
                                                                            var result74 = [];
                                                                            var result88 = parse_WS();
                                                                            while (result88 !== null) {
                                                                                result74.push(result88);
                                                                                var result88 = parse_WS();
                                                                            }
                                                                            if (result74 !== null) {
                                                                                if (input.substr(pos, 1) === ",") {
                                                                                    var result75 = ",";
                                                                                    pos += 1;
                                                                                } else {
                                                                                    var result75 = null;
                                                                                    if (reportMatchFailures) {
                                                                                        matchFailed("\",\"");
                                                                                    }
                                                                                }
                                                                                if (result75 !== null) {
                                                                                    var result76 = [];
                                                                                    var result87 = parse_WS();
                                                                                    while (result87 !== null) {
                                                                                        result76.push(result87);
                                                                                        var result87 = parse_WS();
                                                                                    }
                                                                                    if (result76 !== null) {
                                                                                        var result77 = parse_ConditionalOrExpression();
                                                                                        if (result77 !== null) {
                                                                                            var result78 = [];
                                                                                            var result86 = parse_WS();
                                                                                            while (result86 !== null) {
                                                                                                result78.push(result86);
                                                                                                var result86 = parse_WS();
                                                                                            }
                                                                                            if (result78 !== null) {
                                                                                                if (input.substr(pos, 1) === ",") {
                                                                                                    var result79 = ",";
                                                                                                    pos += 1;
                                                                                                } else {
                                                                                                    var result79 = null;
                                                                                                    if (reportMatchFailures) {
                                                                                                        matchFailed("\",\"");
                                                                                                    }
                                                                                                }
                                                                                                if (result79 !== null) {
                                                                                                    var result80 = [];
                                                                                                    var result85 = parse_WS();
                                                                                                    while (result85 !== null) {
                                                                                                        result80.push(result85);
                                                                                                        var result85 = parse_WS();
                                                                                                    }
                                                                                                    if (result80 !== null) {
                                                                                                        var result81 = parse_ConditionalOrExpression();
                                                                                                        if (result81 !== null) {
                                                                                                            var result82 = [];
                                                                                                            var result84 = parse_WS();
                                                                                                            while (result84 !== null) {
                                                                                                                result82.push(result84);
                                                                                                                var result84 = parse_WS();
                                                                                                            }
                                                                                                            if (result82 !== null) {
                                                                                                                if (input.substr(pos, 1) === ")") {
                                                                                                                    var result83 = ")";
                                                                                                                    pos += 1;
                                                                                                                } else {
                                                                                                                    var result83 = null;
                                                                                                                    if (reportMatchFailures) {
                                                                                                                        matchFailed("\")\"");
                                                                                                                    }
                                                                                                                }
                                                                                                                if (result83 !== null) {
                                                                                                                    var result67 = [result69, result70, result71, result72, result73, result74, result75, result76, result77, result78, result79, result80, result81, result82, result83];
                                                                                                                } else {
                                                                                                                    var result67 = null;
                                                                                                                    pos = savedPos9;
                                                                                                                }
                                                                                                            } else {
                                                                                                                var result67 = null;
                                                                                                                pos = savedPos9;
                                                                                                            }
                                                                                                        } else {
                                                                                                            var result67 = null;
                                                                                                            pos = savedPos9;
                                                                                                        }
                                                                                                    } else {
                                                                                                        var result67 = null;
                                                                                                        pos = savedPos9;
                                                                                                    }
                                                                                                } else {
                                                                                                    var result67 = null;
                                                                                                    pos = savedPos9;
                                                                                                }
                                                                                            } else {
                                                                                                var result67 = null;
                                                                                                pos = savedPos9;
                                                                                            }
                                                                                        } else {
                                                                                            var result67 = null;
                                                                                            pos = savedPos9;
                                                                                        }
                                                                                    } else {
                                                                                        var result67 = null;
                                                                                        pos = savedPos9;
                                                                                    }
                                                                                } else {
                                                                                    var result67 = null;
                                                                                    pos = savedPos9;
                                                                                }
                                                                            } else {
                                                                                var result67 = null;
                                                                                pos = savedPos9;
                                                                            }
                                                                        } else {
                                                                            var result67 = null;
                                                                            pos = savedPos9;
                                                                        }
                                                                    } else {
                                                                        var result67 = null;
                                                                        pos = savedPos9;
                                                                    }
                                                                } else {
                                                                    var result67 = null;
                                                                    pos = savedPos9;
                                                                }
                                                            } else {
                                                                var result67 = null;
                                                                pos = savedPos9;
                                                            }
                                                        } else {
                                                            var result67 = null;
                                                            pos = savedPos9;
                                                        }
                                                        var result68 = result67 !== null
                                                            ? (function(test, trueCond, falseCond) {
                                                            var ex = {};
                                                            ex.token = 'expression';
                                                            ex.expressionType = 'builtincall';
                                                            ex.builtincall = 'if';
                                                            ex.args = [test,trueCond,falseCond];

                                                            return ex;
                                                        })(result67[4], result67[8], result67[12])
                                                            : null;
                                                        if (result68 !== null) {
                                                            var result66 = result68;
                                                        } else {
                                                            var result66 = null;
                                                            pos = savedPos8;
                                                        }
                                                        if (result66 !== null) {
                                                            var result0 = result66;
                                                        } else {
                                                            var savedPos6 = pos;
                                                            var savedPos7 = pos;
                                                            if (input.substr(pos, 9) === "ISLITERAL") {
                                                                var result56 = "ISLITERAL";
                                                                pos += 9;
                                                            } else {
                                                                var result56 = null;
                                                                if (reportMatchFailures) {
                                                                    matchFailed("\"ISLITERAL\"");
                                                                }
                                                            }
                                                            if (result56 !== null) {
                                                                var result57 = [];
                                                                var result65 = parse_WS();
                                                                while (result65 !== null) {
                                                                    result57.push(result65);
                                                                    var result65 = parse_WS();
                                                                }
                                                                if (result57 !== null) {
                                                                    if (input.substr(pos, 1) === "(") {
                                                                        var result58 = "(";
                                                                        pos += 1;
                                                                    } else {
                                                                        var result58 = null;
                                                                        if (reportMatchFailures) {
                                                                            matchFailed("\"(\"");
                                                                        }
                                                                    }
                                                                    if (result58 !== null) {
                                                                        var result59 = [];
                                                                        var result64 = parse_WS();
                                                                        while (result64 !== null) {
                                                                            result59.push(result64);
                                                                            var result64 = parse_WS();
                                                                        }
                                                                        if (result59 !== null) {
                                                                            var result60 = parse_ConditionalOrExpression();
                                                                            if (result60 !== null) {
                                                                                var result61 = [];
                                                                                var result63 = parse_WS();
                                                                                while (result63 !== null) {
                                                                                    result61.push(result63);
                                                                                    var result63 = parse_WS();
                                                                                }
                                                                                if (result61 !== null) {
                                                                                    if (input.substr(pos, 1) === ")") {
                                                                                        var result62 = ")";
                                                                                        pos += 1;
                                                                                    } else {
                                                                                        var result62 = null;
                                                                                        if (reportMatchFailures) {
                                                                                            matchFailed("\")\"");
                                                                                        }
                                                                                    }
                                                                                    if (result62 !== null) {
                                                                                        var result54 = [result56, result57, result58, result59, result60, result61, result62];
                                                                                    } else {
                                                                                        var result54 = null;
                                                                                        pos = savedPos7;
                                                                                    }
                                                                                } else {
                                                                                    var result54 = null;
                                                                                    pos = savedPos7;
                                                                                }
                                                                            } else {
                                                                                var result54 = null;
                                                                                pos = savedPos7;
                                                                            }
                                                                        } else {
                                                                            var result54 = null;
                                                                            pos = savedPos7;
                                                                        }
                                                                    } else {
                                                                        var result54 = null;
                                                                        pos = savedPos7;
                                                                    }
                                                                } else {
                                                                    var result54 = null;
                                                                    pos = savedPos7;
                                                                }
                                                            } else {
                                                                var result54 = null;
                                                                pos = savedPos7;
                                                            }
                                                            var result55 = result54 !== null
                                                                ? (function(arg) {
                                                                var ex = {};
                                                                ex.token = 'expression';
                                                                ex.expressionType = 'builtincall';
                                                                ex.builtincall = 'isliteral';
                                                                ex.args = [arg];

                                                                return ex;
                                                            })(result54[4])
                                                                : null;
                                                            if (result55 !== null) {
                                                                var result53 = result55;
                                                            } else {
                                                                var result53 = null;
                                                                pos = savedPos6;
                                                            }
                                                            if (result53 !== null) {
                                                                var result0 = result53;
                                                            } else {
                                                                var savedPos4 = pos;
                                                                var savedPos5 = pos;
                                                                if (input.substr(pos, 7) === "ISBLANK") {
                                                                    var result43 = "ISBLANK";
                                                                    pos += 7;
                                                                } else {
                                                                    var result43 = null;
                                                                    if (reportMatchFailures) {
                                                                        matchFailed("\"ISBLANK\"");
                                                                    }
                                                                }
                                                                if (result43 !== null) {
                                                                    var result44 = [];
                                                                    var result52 = parse_WS();
                                                                    while (result52 !== null) {
                                                                        result44.push(result52);
                                                                        var result52 = parse_WS();
                                                                    }
                                                                    if (result44 !== null) {
                                                                        if (input.substr(pos, 1) === "(") {
                                                                            var result45 = "(";
                                                                            pos += 1;
                                                                        } else {
                                                                            var result45 = null;
                                                                            if (reportMatchFailures) {
                                                                                matchFailed("\"(\"");
                                                                            }
                                                                        }
                                                                        if (result45 !== null) {
                                                                            var result46 = [];
                                                                            var result51 = parse_WS();
                                                                            while (result51 !== null) {
                                                                                result46.push(result51);
                                                                                var result51 = parse_WS();
                                                                            }
                                                                            if (result46 !== null) {
                                                                                var result47 = parse_ConditionalOrExpression();
                                                                                if (result47 !== null) {
                                                                                    var result48 = [];
                                                                                    var result50 = parse_WS();
                                                                                    while (result50 !== null) {
                                                                                        result48.push(result50);
                                                                                        var result50 = parse_WS();
                                                                                    }
                                                                                    if (result48 !== null) {
                                                                                        if (input.substr(pos, 1) === ")") {
                                                                                            var result49 = ")";
                                                                                            pos += 1;
                                                                                        } else {
                                                                                            var result49 = null;
                                                                                            if (reportMatchFailures) {
                                                                                                matchFailed("\")\"");
                                                                                            }
                                                                                        }
                                                                                        if (result49 !== null) {
                                                                                            var result41 = [result43, result44, result45, result46, result47, result48, result49];
                                                                                        } else {
                                                                                            var result41 = null;
                                                                                            pos = savedPos5;
                                                                                        }
                                                                                    } else {
                                                                                        var result41 = null;
                                                                                        pos = savedPos5;
                                                                                    }
                                                                                } else {
                                                                                    var result41 = null;
                                                                                    pos = savedPos5;
                                                                                }
                                                                            } else {
                                                                                var result41 = null;
                                                                                pos = savedPos5;
                                                                            }
                                                                        } else {
                                                                            var result41 = null;
                                                                            pos = savedPos5;
                                                                        }
                                                                    } else {
                                                                        var result41 = null;
                                                                        pos = savedPos5;
                                                                    }
                                                                } else {
                                                                    var result41 = null;
                                                                    pos = savedPos5;
                                                                }
                                                                var result42 = result41 !== null
                                                                    ? (function(arg) {
                                                                    var ex = {};
                                                                    ex.token = 'expression';
                                                                    ex.expressionType = 'builtincall';
                                                                    ex.builtincall = 'isblank';
                                                                    ex.args = [arg];

                                                                    return ex;
                                                                })(result41[4])
                                                                    : null;
                                                                if (result42 !== null) {
                                                                    var result40 = result42;
                                                                } else {
                                                                    var result40 = null;
                                                                    pos = savedPos4;
                                                                }
                                                                if (result40 !== null) {
                                                                    var result0 = result40;
                                                                } else {
                                                                    var savedPos2 = pos;
                                                                    var savedPos3 = pos;
                                                                    if (input.substr(pos, 8) === "SAMETERM") {
                                                                        var result24 = "SAMETERM";
                                                                        pos += 8;
                                                                    } else {
                                                                        var result24 = null;
                                                                        if (reportMatchFailures) {
                                                                            matchFailed("\"SAMETERM\"");
                                                                        }
                                                                    }
                                                                    if (result24 !== null) {
                                                                        var result25 = [];
                                                                        var result39 = parse_WS();
                                                                        while (result39 !== null) {
                                                                            result25.push(result39);
                                                                            var result39 = parse_WS();
                                                                        }
                                                                        if (result25 !== null) {
                                                                            if (input.substr(pos, 1) === "(") {
                                                                                var result26 = "(";
                                                                                pos += 1;
                                                                            } else {
                                                                                var result26 = null;
                                                                                if (reportMatchFailures) {
                                                                                    matchFailed("\"(\"");
                                                                                }
                                                                            }
                                                                            if (result26 !== null) {
                                                                                var result27 = [];
                                                                                var result38 = parse_WS();
                                                                                while (result38 !== null) {
                                                                                    result27.push(result38);
                                                                                    var result38 = parse_WS();
                                                                                }
                                                                                if (result27 !== null) {
                                                                                    var result28 = parse_ConditionalOrExpression();
                                                                                    if (result28 !== null) {
                                                                                        var result29 = [];
                                                                                        var result37 = parse_WS();
                                                                                        while (result37 !== null) {
                                                                                            result29.push(result37);
                                                                                            var result37 = parse_WS();
                                                                                        }
                                                                                        if (result29 !== null) {
                                                                                            if (input.substr(pos, 1) === ",") {
                                                                                                var result30 = ",";
                                                                                                pos += 1;
                                                                                            } else {
                                                                                                var result30 = null;
                                                                                                if (reportMatchFailures) {
                                                                                                    matchFailed("\",\"");
                                                                                                }
                                                                                            }
                                                                                            if (result30 !== null) {
                                                                                                var result31 = [];
                                                                                                var result36 = parse_WS();
                                                                                                while (result36 !== null) {
                                                                                                    result31.push(result36);
                                                                                                    var result36 = parse_WS();
                                                                                                }
                                                                                                if (result31 !== null) {
                                                                                                    var result32 = parse_ConditionalOrExpression();
                                                                                                    if (result32 !== null) {
                                                                                                        var result33 = [];
                                                                                                        var result35 = parse_WS();
                                                                                                        while (result35 !== null) {
                                                                                                            result33.push(result35);
                                                                                                            var result35 = parse_WS();
                                                                                                        }
                                                                                                        if (result33 !== null) {
                                                                                                            if (input.substr(pos, 1) === ")") {
                                                                                                                var result34 = ")";
                                                                                                                pos += 1;
                                                                                                            } else {
                                                                                                                var result34 = null;
                                                                                                                if (reportMatchFailures) {
                                                                                                                    matchFailed("\")\"");
                                                                                                                }
                                                                                                            }
                                                                                                            if (result34 !== null) {
                                                                                                                var result22 = [result24, result25, result26, result27, result28, result29, result30, result31, result32, result33, result34];
                                                                                                            } else {
                                                                                                                var result22 = null;
                                                                                                                pos = savedPos3;
                                                                                                            }
                                                                                                        } else {
                                                                                                            var result22 = null;
                                                                                                            pos = savedPos3;
                                                                                                        }
                                                                                                    } else {
                                                                                                        var result22 = null;
                                                                                                        pos = savedPos3;
                                                                                                    }
                                                                                                } else {
                                                                                                    var result22 = null;
                                                                                                    pos = savedPos3;
                                                                                                }
                                                                                            } else {
                                                                                                var result22 = null;
                                                                                                pos = savedPos3;
                                                                                            }
                                                                                        } else {
                                                                                            var result22 = null;
                                                                                            pos = savedPos3;
                                                                                        }
                                                                                    } else {
                                                                                        var result22 = null;
                                                                                        pos = savedPos3;
                                                                                    }
                                                                                } else {
                                                                                    var result22 = null;
                                                                                    pos = savedPos3;
                                                                                }
                                                                            } else {
                                                                                var result22 = null;
                                                                                pos = savedPos3;
                                                                            }
                                                                        } else {
                                                                            var result22 = null;
                                                                            pos = savedPos3;
                                                                        }
                                                                    } else {
                                                                        var result22 = null;
                                                                        pos = savedPos3;
                                                                    }
                                                                    var result23 = result22 !== null
                                                                        ? (function(e1, e2) {
                                                                        var ex = {};
                                                                        ex.token = 'expression';
                                                                        ex.expressionType = 'builtincall';
                                                                        ex.builtincall = 'sameterm';
                                                                        ex.args = [e1, e2];
                                                                        return ex;
                                                                    })(result22[4], result22[8])
                                                                        : null;
                                                                    if (result23 !== null) {
                                                                        var result21 = result23;
                                                                    } else {
                                                                        var result21 = null;
                                                                        pos = savedPos2;
                                                                    }
                                                                    if (result21 !== null) {
                                                                        var result0 = result21;
                                                                    } else {
                                                                        var savedPos0 = pos;
                                                                        var savedPos1 = pos;
                                                                        if (input.substr(pos, 5) === "ISURI") {
                                                                            var result20 = "ISURI";
                                                                            pos += 5;
                                                                        } else {
                                                                            var result20 = null;
                                                                            if (reportMatchFailures) {
                                                                                matchFailed("\"ISURI\"");
                                                                            }
                                                                        }
                                                                        if (result20 !== null) {
                                                                            var result7 = result20;
                                                                        } else {
                                                                            if (input.substr(pos, 5) === "isuri") {
                                                                                var result19 = "isuri";
                                                                                pos += 5;
                                                                            } else {
                                                                                var result19 = null;
                                                                                if (reportMatchFailures) {
                                                                                    matchFailed("\"isuri\"");
                                                                                }
                                                                            }
                                                                            if (result19 !== null) {
                                                                                var result7 = result19;
                                                                            } else {
                                                                                if (input.substr(pos, 5) === "ISIRI") {
                                                                                    var result18 = "ISIRI";
                                                                                    pos += 5;
                                                                                } else {
                                                                                    var result18 = null;
                                                                                    if (reportMatchFailures) {
                                                                                        matchFailed("\"ISIRI\"");
                                                                                    }
                                                                                }
                                                                                if (result18 !== null) {
                                                                                    var result7 = result18;
                                                                                } else {
                                                                                    if (input.substr(pos, 5) === "isiri") {
                                                                                        var result17 = "isiri";
                                                                                        pos += 5;
                                                                                    } else {
                                                                                        var result17 = null;
                                                                                        if (reportMatchFailures) {
                                                                                            matchFailed("\"isiri\"");
                                                                                        }
                                                                                    }
                                                                                    if (result17 !== null) {
                                                                                        var result7 = result17;
                                                                                    } else {
                                                                                        var result7 = null;;
                                                                                    };
                                                                                };
                                                                            };
                                                                        }
                                                                        if (result7 !== null) {
                                                                            var result8 = [];
                                                                            var result16 = parse_WS();
                                                                            while (result16 !== null) {
                                                                                result8.push(result16);
                                                                                var result16 = parse_WS();
                                                                            }
                                                                            if (result8 !== null) {
                                                                                if (input.substr(pos, 1) === "(") {
                                                                                    var result9 = "(";
                                                                                    pos += 1;
                                                                                } else {
                                                                                    var result9 = null;
                                                                                    if (reportMatchFailures) {
                                                                                        matchFailed("\"(\"");
                                                                                    }
                                                                                }
                                                                                if (result9 !== null) {
                                                                                    var result10 = [];
                                                                                    var result15 = parse_WS();
                                                                                    while (result15 !== null) {
                                                                                        result10.push(result15);
                                                                                        var result15 = parse_WS();
                                                                                    }
                                                                                    if (result10 !== null) {
                                                                                        var result11 = parse_ConditionalOrExpression();
                                                                                        if (result11 !== null) {
                                                                                            var result12 = [];
                                                                                            var result14 = parse_WS();
                                                                                            while (result14 !== null) {
                                                                                                result12.push(result14);
                                                                                                var result14 = parse_WS();
                                                                                            }
                                                                                            if (result12 !== null) {
                                                                                                if (input.substr(pos, 1) === ")") {
                                                                                                    var result13 = ")";
                                                                                                    pos += 1;
                                                                                                } else {
                                                                                                    var result13 = null;
                                                                                                    if (reportMatchFailures) {
                                                                                                        matchFailed("\")\"");
                                                                                                    }
                                                                                                }
                                                                                                if (result13 !== null) {
                                                                                                    var result5 = [result7, result8, result9, result10, result11, result12, result13];
                                                                                                } else {
                                                                                                    var result5 = null;
                                                                                                    pos = savedPos1;
                                                                                                }
                                                                                            } else {
                                                                                                var result5 = null;
                                                                                                pos = savedPos1;
                                                                                            }
                                                                                        } else {
                                                                                            var result5 = null;
                                                                                            pos = savedPos1;
                                                                                        }
                                                                                    } else {
                                                                                        var result5 = null;
                                                                                        pos = savedPos1;
                                                                                    }
                                                                                } else {
                                                                                    var result5 = null;
                                                                                    pos = savedPos1;
                                                                                }
                                                                            } else {
                                                                                var result5 = null;
                                                                                pos = savedPos1;
                                                                            }
                                                                        } else {
                                                                            var result5 = null;
                                                                            pos = savedPos1;
                                                                        }
                                                                        var result6 = result5 !== null
                                                                            ? (function(arg) {
                                                                            var ex = {};
                                                                            ex.token = 'expression';
                                                                            ex.expressionType = 'builtincall';
                                                                            ex.builtincall = 'isuri';
                                                                            ex.args = [arg];

                                                                            return ex;
                                                                        })(result5[4])
                                                                            : null;
                                                                        if (result6 !== null) {
                                                                            var result4 = result6;
                                                                        } else {
                                                                            var result4 = null;
                                                                            pos = savedPos0;
                                                                        }
                                                                        if (result4 !== null) {
                                                                            var result0 = result4;
                                                                        } else {
                                                                            var result3 = parse_RegexExpression();
                                                                            if (result3 !== null) {
                                                                                var result0 = result3;
                                                                            } else {
                                                                                var result2 = parse_ExistsFunc();
                                                                                if (result2 !== null) {
                                                                                    var result0 = result2;
                                                                                } else {
                                                                                    var result1 = parse_NotExistsFunc();
                                                                                    if (result1 !== null) {
                                                                                        var result0 = result1;
                                                                                    } else {
                                                                                        var result0 = null;;
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[106] BuiltInCall");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_RegexExpression() {
                    var cacheKey = 'RegexExpression@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 5) === "REGEX") {
                        var result28 = "REGEX";
                        pos += 5;
                    } else {
                        var result28 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"REGEX\"");
                        }
                    }
                    if (result28 !== null) {
                        var result3 = result28;
                    } else {
                        if (input.substr(pos, 5) === "regex") {
                            var result27 = "regex";
                            pos += 5;
                        } else {
                            var result27 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"regex\"");
                            }
                        }
                        if (result27 !== null) {
                            var result3 = result27;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result26 = parse_WS();
                        while (result26 !== null) {
                            result4.push(result26);
                            var result26 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 1) === "(") {
                                var result5 = "(";
                                pos += 1;
                            } else {
                                var result5 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"(\"");
                                }
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result25 = parse_WS();
                                while (result25 !== null) {
                                    result6.push(result25);
                                    var result25 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_ConditionalOrExpression();
                                    if (result7 !== null) {
                                        var result8 = [];
                                        var result24 = parse_WS();
                                        while (result24 !== null) {
                                            result8.push(result24);
                                            var result24 = parse_WS();
                                        }
                                        if (result8 !== null) {
                                            if (input.substr(pos, 1) === ",") {
                                                var result9 = ",";
                                                pos += 1;
                                            } else {
                                                var result9 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\",\"");
                                                }
                                            }
                                            if (result9 !== null) {
                                                var result10 = [];
                                                var result23 = parse_WS();
                                                while (result23 !== null) {
                                                    result10.push(result23);
                                                    var result23 = parse_WS();
                                                }
                                                if (result10 !== null) {
                                                    var result11 = parse_ConditionalOrExpression();
                                                    if (result11 !== null) {
                                                        var result12 = [];
                                                        var result22 = parse_WS();
                                                        while (result22 !== null) {
                                                            result12.push(result22);
                                                            var result22 = parse_WS();
                                                        }
                                                        if (result12 !== null) {
                                                            var savedPos2 = pos;
                                                            if (input.substr(pos, 1) === ",") {
                                                                var result18 = ",";
                                                                pos += 1;
                                                            } else {
                                                                var result18 = null;
                                                                if (reportMatchFailures) {
                                                                    matchFailed("\",\"");
                                                                }
                                                            }
                                                            if (result18 !== null) {
                                                                var result19 = [];
                                                                var result21 = parse_WS();
                                                                while (result21 !== null) {
                                                                    result19.push(result21);
                                                                    var result21 = parse_WS();
                                                                }
                                                                if (result19 !== null) {
                                                                    var result20 = parse_ConditionalOrExpression();
                                                                    if (result20 !== null) {
                                                                        var result17 = [result18, result19, result20];
                                                                    } else {
                                                                        var result17 = null;
                                                                        pos = savedPos2;
                                                                    }
                                                                } else {
                                                                    var result17 = null;
                                                                    pos = savedPos2;
                                                                }
                                                            } else {
                                                                var result17 = null;
                                                                pos = savedPos2;
                                                            }
                                                            var result13 = result17 !== null ? result17 : '';
                                                            if (result13 !== null) {
                                                                var result14 = [];
                                                                var result16 = parse_WS();
                                                                while (result16 !== null) {
                                                                    result14.push(result16);
                                                                    var result16 = parse_WS();
                                                                }
                                                                if (result14 !== null) {
                                                                    if (input.substr(pos, 1) === ")") {
                                                                        var result15 = ")";
                                                                        pos += 1;
                                                                    } else {
                                                                        var result15 = null;
                                                                        if (reportMatchFailures) {
                                                                            matchFailed("\")\"");
                                                                        }
                                                                    }
                                                                    if (result15 !== null) {
                                                                        var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15];
                                                                    } else {
                                                                        var result1 = null;
                                                                        pos = savedPos1;
                                                                    }
                                                                } else {
                                                                    var result1 = null;
                                                                    pos = savedPos1;
                                                                }
                                                            } else {
                                                                var result1 = null;
                                                                pos = savedPos1;
                                                            }
                                                        } else {
                                                            var result1 = null;
                                                            pos = savedPos1;
                                                        }
                                                    } else {
                                                        var result1 = null;
                                                        pos = savedPos1;
                                                    }
                                                } else {
                                                    var result1 = null;
                                                    pos = savedPos1;
                                                }
                                            } else {
                                                var result1 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result1 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(e1, e2, eo) {
                        var regex = {};
                        regex.token = 'expression';
                        regex.expressionType = 'regex';
                        regex.text = e1;
                        regex.pattern = e2;
                        regex.flags = eo[2];

                        return regex;
                    })(result1[4], result1[8], result1[10])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[107] RegexExpression");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ExistsFunc() {
                    var cacheKey = 'ExistsFunc@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 6) === "EXISTS") {
                        var result8 = "EXISTS";
                        pos += 6;
                    } else {
                        var result8 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"EXISTS\"");
                        }
                    }
                    if (result8 !== null) {
                        var result3 = result8;
                    } else {
                        if (input.substr(pos, 6) === "exists") {
                            var result7 = "exists";
                            pos += 6;
                        } else {
                            var result7 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"exists\"");
                            }
                        }
                        if (result7 !== null) {
                            var result3 = result7;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result6 = parse_WS();
                        while (result6 !== null) {
                            result4.push(result6);
                            var result6 = parse_WS();
                        }
                        if (result4 !== null) {
                            var result5 = parse_GroupGraphPattern();
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(ggp) {
                        var ex = {};
                        ex.token = 'expression';
                        ex.expressionType = 'builtincall';
                        ex.builtincall = 'exists';
                        ex.args = [ggp];

                        return ex;
                    })(result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[108] ExistsFunc");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_NotExistsFunc() {
                    var cacheKey = 'NotExistsFunc@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 3) === "NOT") {
                        var result13 = "NOT";
                        pos += 3;
                    } else {
                        var result13 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"NOT\"");
                        }
                    }
                    if (result13 !== null) {
                        var result3 = result13;
                    } else {
                        if (input.substr(pos, 3) === "not") {
                            var result12 = "not";
                            pos += 3;
                        } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"not\"");
                            }
                        }
                        if (result12 !== null) {
                            var result3 = result12;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result11 = parse_WS();
                        while (result11 !== null) {
                            result4.push(result11);
                            var result11 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 6) === "EXISTS") {
                                var result10 = "EXISTS";
                                pos += 6;
                            } else {
                                var result10 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"EXISTS\"");
                                }
                            }
                            if (result10 !== null) {
                                var result5 = result10;
                            } else {
                                if (input.substr(pos, 6) === "exists") {
                                    var result9 = "exists";
                                    pos += 6;
                                } else {
                                    var result9 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"exists\"");
                                    }
                                }
                                if (result9 !== null) {
                                    var result5 = result9;
                                } else {
                                    var result5 = null;;
                                };
                            }
                            if (result5 !== null) {
                                var result6 = [];
                                var result8 = parse_WS();
                                while (result8 !== null) {
                                    result6.push(result8);
                                    var result8 = parse_WS();
                                }
                                if (result6 !== null) {
                                    var result7 = parse_GroupGraphPattern();
                                    if (result7 !== null) {
                                        var result1 = [result3, result4, result5, result6, result7];
                                    } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                    }
                                } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(ggp) {
                        var ex = {};
                        ex.token = 'expression';
                        ex.expressionType = 'builtincall';
                        ex.builtincall = 'notexists';
                        ex.args = [ggp];

                        return ex;
                    })(result1[4])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[109] NotExistsFunc");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_Aggregate() {
                    var cacheKey = 'Aggregate@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos8 = pos;
                    var savedPos9 = pos;
                    if (input.substr(pos, 5) === "COUNT") {
                        var result117 = "COUNT";
                        pos += 5;
                    } else {
                        var result117 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"COUNT\"");
                        }
                    }
                    if (result117 !== null) {
                        var result96 = result117;
                    } else {
                        if (input.substr(pos, 5) === "count") {
                            var result116 = "count";
                            pos += 5;
                        } else {
                            var result116 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"count\"");
                            }
                        }
                        if (result116 !== null) {
                            var result96 = result116;
                        } else {
                            var result96 = null;;
                        };
                    }
                    if (result96 !== null) {
                        var result97 = [];
                        var result115 = parse_WS();
                        while (result115 !== null) {
                            result97.push(result115);
                            var result115 = parse_WS();
                        }
                        if (result97 !== null) {
                            if (input.substr(pos, 1) === "(") {
                                var result98 = "(";
                                pos += 1;
                            } else {
                                var result98 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"(\"");
                                }
                            }
                            if (result98 !== null) {
                                var result99 = [];
                                var result114 = parse_WS();
                                while (result114 !== null) {
                                    result99.push(result114);
                                    var result114 = parse_WS();
                                }
                                if (result99 !== null) {
                                    if (input.substr(pos, 8) === "DISTINCT") {
                                        var result113 = "DISTINCT";
                                        pos += 8;
                                    } else {
                                        var result113 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"DISTINCT\"");
                                        }
                                    }
                                    if (result113 !== null) {
                                        var result111 = result113;
                                    } else {
                                        if (input.substr(pos, 8) === "distinct") {
                                            var result112 = "distinct";
                                            pos += 8;
                                        } else {
                                            var result112 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"distinct\"");
                                            }
                                        }
                                        if (result112 !== null) {
                                            var result111 = result112;
                                        } else {
                                            var result111 = null;;
                                        };
                                    }
                                    var result100 = result111 !== null ? result111 : '';
                                    if (result100 !== null) {
                                        var result101 = [];
                                        var result110 = parse_WS();
                                        while (result110 !== null) {
                                            result101.push(result110);
                                            var result110 = parse_WS();
                                        }
                                        if (result101 !== null) {
                                            if (input.substr(pos, 1) === "*") {
                                                var result109 = "*";
                                                pos += 1;
                                            } else {
                                                var result109 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"*\"");
                                                }
                                            }
                                            if (result109 !== null) {
                                                var result102 = result109;
                                            } else {
                                                var result108 = parse_ConditionalOrExpression();
                                                if (result108 !== null) {
                                                    var result102 = result108;
                                                } else {
                                                    var result102 = null;;
                                                };
                                            }
                                            if (result102 !== null) {
                                                var result103 = [];
                                                var result107 = parse_WS();
                                                while (result107 !== null) {
                                                    result103.push(result107);
                                                    var result107 = parse_WS();
                                                }
                                                if (result103 !== null) {
                                                    if (input.substr(pos, 1) === ")") {
                                                        var result104 = ")";
                                                        pos += 1;
                                                    } else {
                                                        var result104 = null;
                                                        if (reportMatchFailures) {
                                                            matchFailed("\")\"");
                                                        }
                                                    }
                                                    if (result104 !== null) {
                                                        var result105 = [];
                                                        var result106 = parse_WS();
                                                        while (result106 !== null) {
                                                            result105.push(result106);
                                                            var result106 = parse_WS();
                                                        }
                                                        if (result105 !== null) {
                                                            var result94 = [result96, result97, result98, result99, result100, result101, result102, result103, result104, result105];
                                                        } else {
                                                            var result94 = null;
                                                            pos = savedPos9;
                                                        }
                                                    } else {
                                                        var result94 = null;
                                                        pos = savedPos9;
                                                    }
                                                } else {
                                                    var result94 = null;
                                                    pos = savedPos9;
                                                }
                                            } else {
                                                var result94 = null;
                                                pos = savedPos9;
                                            }
                                        } else {
                                            var result94 = null;
                                            pos = savedPos9;
                                        }
                                    } else {
                                        var result94 = null;
                                        pos = savedPos9;
                                    }
                                } else {
                                    var result94 = null;
                                    pos = savedPos9;
                                }
                            } else {
                                var result94 = null;
                                pos = savedPos9;
                            }
                        } else {
                            var result94 = null;
                            pos = savedPos9;
                        }
                    } else {
                        var result94 = null;
                        pos = savedPos9;
                    }
                    var result95 = result94 !== null
                        ? (function(d, e) {
                        var exp = {};
                        exp.token = 'expression';
                        exp.expressionType = 'aggregate';
                        exp.aggregateType = 'count';
                        exp.distinct = (d != "" ? 'DISTINCT' : d);
                        exp.expression = e;

                        return exp;

                    })(result94[4], result94[6])
                        : null;
                    if (result95 !== null) {
                        var result93 = result95;
                    } else {
                        var result93 = null;
                        pos = savedPos8;
                    }
                    if (result93 !== null) {
                        var result0 = result93;
                    } else {
                        var savedPos6 = pos;
                        var savedPos7 = pos;
                        if (input.substr(pos, 3) === "SUM") {
                            var result92 = "SUM";
                            pos += 3;
                        } else {
                            var result92 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"SUM\"");
                            }
                        }
                        if (result92 !== null) {
                            var result73 = result92;
                        } else {
                            if (input.substr(pos, 3) === "sum") {
                                var result91 = "sum";
                                pos += 3;
                            } else {
                                var result91 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"sum\"");
                                }
                            }
                            if (result91 !== null) {
                                var result73 = result91;
                            } else {
                                var result73 = null;;
                            };
                        }
                        if (result73 !== null) {
                            var result74 = [];
                            var result90 = parse_WS();
                            while (result90 !== null) {
                                result74.push(result90);
                                var result90 = parse_WS();
                            }
                            if (result74 !== null) {
                                if (input.substr(pos, 1) === "(") {
                                    var result75 = "(";
                                    pos += 1;
                                } else {
                                    var result75 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"(\"");
                                    }
                                }
                                if (result75 !== null) {
                                    var result76 = [];
                                    var result89 = parse_WS();
                                    while (result89 !== null) {
                                        result76.push(result89);
                                        var result89 = parse_WS();
                                    }
                                    if (result76 !== null) {
                                        if (input.substr(pos, 8) === "DISTINCT") {
                                            var result88 = "DISTINCT";
                                            pos += 8;
                                        } else {
                                            var result88 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"DISTINCT\"");
                                            }
                                        }
                                        if (result88 !== null) {
                                            var result86 = result88;
                                        } else {
                                            if (input.substr(pos, 8) === "distinct") {
                                                var result87 = "distinct";
                                                pos += 8;
                                            } else {
                                                var result87 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"distinct\"");
                                                }
                                            }
                                            if (result87 !== null) {
                                                var result86 = result87;
                                            } else {
                                                var result86 = null;;
                                            };
                                        }
                                        var result77 = result86 !== null ? result86 : '';
                                        if (result77 !== null) {
                                            var result78 = [];
                                            var result85 = parse_WS();
                                            while (result85 !== null) {
                                                result78.push(result85);
                                                var result85 = parse_WS();
                                            }
                                            if (result78 !== null) {
                                                var result79 = parse_ConditionalOrExpression();
                                                if (result79 !== null) {
                                                    var result80 = [];
                                                    var result84 = parse_WS();
                                                    while (result84 !== null) {
                                                        result80.push(result84);
                                                        var result84 = parse_WS();
                                                    }
                                                    if (result80 !== null) {
                                                        if (input.substr(pos, 1) === ")") {
                                                            var result81 = ")";
                                                            pos += 1;
                                                        } else {
                                                            var result81 = null;
                                                            if (reportMatchFailures) {
                                                                matchFailed("\")\"");
                                                            }
                                                        }
                                                        if (result81 !== null) {
                                                            var result82 = [];
                                                            var result83 = parse_WS();
                                                            while (result83 !== null) {
                                                                result82.push(result83);
                                                                var result83 = parse_WS();
                                                            }
                                                            if (result82 !== null) {
                                                                var result71 = [result73, result74, result75, result76, result77, result78, result79, result80, result81, result82];
                                                            } else {
                                                                var result71 = null;
                                                                pos = savedPos7;
                                                            }
                                                        } else {
                                                            var result71 = null;
                                                            pos = savedPos7;
                                                        }
                                                    } else {
                                                        var result71 = null;
                                                        pos = savedPos7;
                                                    }
                                                } else {
                                                    var result71 = null;
                                                    pos = savedPos7;
                                                }
                                            } else {
                                                var result71 = null;
                                                pos = savedPos7;
                                            }
                                        } else {
                                            var result71 = null;
                                            pos = savedPos7;
                                        }
                                    } else {
                                        var result71 = null;
                                        pos = savedPos7;
                                    }
                                } else {
                                    var result71 = null;
                                    pos = savedPos7;
                                }
                            } else {
                                var result71 = null;
                                pos = savedPos7;
                            }
                        } else {
                            var result71 = null;
                            pos = savedPos7;
                        }
                        var result72 = result71 !== null
                            ? (function(d, e) {
                            var exp = {};
                            exp.token = 'expression';
                            exp.expressionType = 'aggregate';
                            exp.aggregateType = 'sum';
                            exp.distinct = (d != "" ? 'DISTINCT' : d);
                            exp.expression = e;

                            return exp;

                        })(result71[4], result71[6])
                            : null;
                        if (result72 !== null) {
                            var result70 = result72;
                        } else {
                            var result70 = null;
                            pos = savedPos6;
                        }
                        if (result70 !== null) {
                            var result0 = result70;
                        } else {
                            var savedPos4 = pos;
                            var savedPos5 = pos;
                            if (input.substr(pos, 3) === "MIN") {
                                var result69 = "MIN";
                                pos += 3;
                            } else {
                                var result69 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"MIN\"");
                                }
                            }
                            if (result69 !== null) {
                                var result50 = result69;
                            } else {
                                if (input.substr(pos, 3) === "min") {
                                    var result68 = "min";
                                    pos += 3;
                                } else {
                                    var result68 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"min\"");
                                    }
                                }
                                if (result68 !== null) {
                                    var result50 = result68;
                                } else {
                                    var result50 = null;;
                                };
                            }
                            if (result50 !== null) {
                                var result51 = [];
                                var result67 = parse_WS();
                                while (result67 !== null) {
                                    result51.push(result67);
                                    var result67 = parse_WS();
                                }
                                if (result51 !== null) {
                                    if (input.substr(pos, 1) === "(") {
                                        var result52 = "(";
                                        pos += 1;
                                    } else {
                                        var result52 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"(\"");
                                        }
                                    }
                                    if (result52 !== null) {
                                        var result53 = [];
                                        var result66 = parse_WS();
                                        while (result66 !== null) {
                                            result53.push(result66);
                                            var result66 = parse_WS();
                                        }
                                        if (result53 !== null) {
                                            if (input.substr(pos, 8) === "DISTINCT") {
                                                var result65 = "DISTINCT";
                                                pos += 8;
                                            } else {
                                                var result65 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"DISTINCT\"");
                                                }
                                            }
                                            if (result65 !== null) {
                                                var result63 = result65;
                                            } else {
                                                if (input.substr(pos, 8) === "distinct") {
                                                    var result64 = "distinct";
                                                    pos += 8;
                                                } else {
                                                    var result64 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"distinct\"");
                                                    }
                                                }
                                                if (result64 !== null) {
                                                    var result63 = result64;
                                                } else {
                                                    var result63 = null;;
                                                };
                                            }
                                            var result54 = result63 !== null ? result63 : '';
                                            if (result54 !== null) {
                                                var result55 = [];
                                                var result62 = parse_WS();
                                                while (result62 !== null) {
                                                    result55.push(result62);
                                                    var result62 = parse_WS();
                                                }
                                                if (result55 !== null) {
                                                    var result56 = parse_ConditionalOrExpression();
                                                    if (result56 !== null) {
                                                        var result57 = [];
                                                        var result61 = parse_WS();
                                                        while (result61 !== null) {
                                                            result57.push(result61);
                                                            var result61 = parse_WS();
                                                        }
                                                        if (result57 !== null) {
                                                            if (input.substr(pos, 1) === ")") {
                                                                var result58 = ")";
                                                                pos += 1;
                                                            } else {
                                                                var result58 = null;
                                                                if (reportMatchFailures) {
                                                                    matchFailed("\")\"");
                                                                }
                                                            }
                                                            if (result58 !== null) {
                                                                var result59 = [];
                                                                var result60 = parse_WS();
                                                                while (result60 !== null) {
                                                                    result59.push(result60);
                                                                    var result60 = parse_WS();
                                                                }
                                                                if (result59 !== null) {
                                                                    var result48 = [result50, result51, result52, result53, result54, result55, result56, result57, result58, result59];
                                                                } else {
                                                                    var result48 = null;
                                                                    pos = savedPos5;
                                                                }
                                                            } else {
                                                                var result48 = null;
                                                                pos = savedPos5;
                                                            }
                                                        } else {
                                                            var result48 = null;
                                                            pos = savedPos5;
                                                        }
                                                    } else {
                                                        var result48 = null;
                                                        pos = savedPos5;
                                                    }
                                                } else {
                                                    var result48 = null;
                                                    pos = savedPos5;
                                                }
                                            } else {
                                                var result48 = null;
                                                pos = savedPos5;
                                            }
                                        } else {
                                            var result48 = null;
                                            pos = savedPos5;
                                        }
                                    } else {
                                        var result48 = null;
                                        pos = savedPos5;
                                    }
                                } else {
                                    var result48 = null;
                                    pos = savedPos5;
                                }
                            } else {
                                var result48 = null;
                                pos = savedPos5;
                            }
                            var result49 = result48 !== null
                                ? (function(d, e) {
                                var exp = {};
                                exp.token = 'expression';
                                exp.expressionType = 'aggregate';
                                exp.aggregateType = 'min';
                                exp.distinct = (d != "" ? 'DISTINCT' : d);
                                exp.expression = e;

                                return exp;

                            })(result48[4], result48[6])
                                : null;
                            if (result49 !== null) {
                                var result47 = result49;
                            } else {
                                var result47 = null;
                                pos = savedPos4;
                            }
                            if (result47 !== null) {
                                var result0 = result47;
                            } else {
                                var savedPos2 = pos;
                                var savedPos3 = pos;
                                if (input.substr(pos, 3) === "MAX") {
                                    var result46 = "MAX";
                                    pos += 3;
                                } else {
                                    var result46 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"MAX\"");
                                    }
                                }
                                if (result46 !== null) {
                                    var result27 = result46;
                                } else {
                                    if (input.substr(pos, 3) === "max") {
                                        var result45 = "max";
                                        pos += 3;
                                    } else {
                                        var result45 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"max\"");
                                        }
                                    }
                                    if (result45 !== null) {
                                        var result27 = result45;
                                    } else {
                                        var result27 = null;;
                                    };
                                }
                                if (result27 !== null) {
                                    var result28 = [];
                                    var result44 = parse_WS();
                                    while (result44 !== null) {
                                        result28.push(result44);
                                        var result44 = parse_WS();
                                    }
                                    if (result28 !== null) {
                                        if (input.substr(pos, 1) === "(") {
                                            var result29 = "(";
                                            pos += 1;
                                        } else {
                                            var result29 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"(\"");
                                            }
                                        }
                                        if (result29 !== null) {
                                            var result30 = [];
                                            var result43 = parse_WS();
                                            while (result43 !== null) {
                                                result30.push(result43);
                                                var result43 = parse_WS();
                                            }
                                            if (result30 !== null) {
                                                if (input.substr(pos, 8) === "DISTINCT") {
                                                    var result42 = "DISTINCT";
                                                    pos += 8;
                                                } else {
                                                    var result42 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("\"DISTINCT\"");
                                                    }
                                                }
                                                if (result42 !== null) {
                                                    var result40 = result42;
                                                } else {
                                                    if (input.substr(pos, 8) === "distinct") {
                                                        var result41 = "distinct";
                                                        pos += 8;
                                                    } else {
                                                        var result41 = null;
                                                        if (reportMatchFailures) {
                                                            matchFailed("\"distinct\"");
                                                        }
                                                    }
                                                    if (result41 !== null) {
                                                        var result40 = result41;
                                                    } else {
                                                        var result40 = null;;
                                                    };
                                                }
                                                var result31 = result40 !== null ? result40 : '';
                                                if (result31 !== null) {
                                                    var result32 = [];
                                                    var result39 = parse_WS();
                                                    while (result39 !== null) {
                                                        result32.push(result39);
                                                        var result39 = parse_WS();
                                                    }
                                                    if (result32 !== null) {
                                                        var result33 = parse_ConditionalOrExpression();
                                                        if (result33 !== null) {
                                                            var result34 = [];
                                                            var result38 = parse_WS();
                                                            while (result38 !== null) {
                                                                result34.push(result38);
                                                                var result38 = parse_WS();
                                                            }
                                                            if (result34 !== null) {
                                                                if (input.substr(pos, 1) === ")") {
                                                                    var result35 = ")";
                                                                    pos += 1;
                                                                } else {
                                                                    var result35 = null;
                                                                    if (reportMatchFailures) {
                                                                        matchFailed("\")\"");
                                                                    }
                                                                }
                                                                if (result35 !== null) {
                                                                    var result36 = [];
                                                                    var result37 = parse_WS();
                                                                    while (result37 !== null) {
                                                                        result36.push(result37);
                                                                        var result37 = parse_WS();
                                                                    }
                                                                    if (result36 !== null) {
                                                                        var result25 = [result27, result28, result29, result30, result31, result32, result33, result34, result35, result36];
                                                                    } else {
                                                                        var result25 = null;
                                                                        pos = savedPos3;
                                                                    }
                                                                } else {
                                                                    var result25 = null;
                                                                    pos = savedPos3;
                                                                }
                                                            } else {
                                                                var result25 = null;
                                                                pos = savedPos3;
                                                            }
                                                        } else {
                                                            var result25 = null;
                                                            pos = savedPos3;
                                                        }
                                                    } else {
                                                        var result25 = null;
                                                        pos = savedPos3;
                                                    }
                                                } else {
                                                    var result25 = null;
                                                    pos = savedPos3;
                                                }
                                            } else {
                                                var result25 = null;
                                                pos = savedPos3;
                                            }
                                        } else {
                                            var result25 = null;
                                            pos = savedPos3;
                                        }
                                    } else {
                                        var result25 = null;
                                        pos = savedPos3;
                                    }
                                } else {
                                    var result25 = null;
                                    pos = savedPos3;
                                }
                                var result26 = result25 !== null
                                    ? (function(d, e) {
                                    var exp = {};
                                    exp.token = 'expression'
                                    exp.expressionType = 'aggregate'
                                    exp.aggregateType = 'max'
                                    exp.distinct = (d != "" ? 'DISTINCT' : d);
                                    exp.expression = e

                                    return exp

                                })(result25[4], result25[6])
                                    : null;
                                if (result26 !== null) {
                                    var result24 = result26;
                                } else {
                                    var result24 = null;
                                    pos = savedPos2;
                                }
                                if (result24 !== null) {
                                    var result0 = result24;
                                } else {
                                    var savedPos0 = pos;
                                    var savedPos1 = pos;
                                    if (input.substr(pos, 3) === "AVG") {
                                        var result23 = "AVG";
                                        pos += 3;
                                    } else {
                                        var result23 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("\"AVG\"");
                                        }
                                    }
                                    if (result23 !== null) {
                                        var result4 = result23;
                                    } else {
                                        if (input.substr(pos, 3) === "avg") {
                                            var result22 = "avg";
                                            pos += 3;
                                        } else {
                                            var result22 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("\"avg\"");
                                            }
                                        }
                                        if (result22 !== null) {
                                            var result4 = result22;
                                        } else {
                                            var result4 = null;;
                                        };
                                    }
                                    if (result4 !== null) {
                                        var result5 = [];
                                        var result21 = parse_WS();
                                        while (result21 !== null) {
                                            result5.push(result21);
                                            var result21 = parse_WS();
                                        }
                                        if (result5 !== null) {
                                            if (input.substr(pos, 1) === "(") {
                                                var result6 = "(";
                                                pos += 1;
                                            } else {
                                                var result6 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("\"(\"");
                                                }
                                            }
                                            if (result6 !== null) {
                                                var result7 = [];
                                                var result20 = parse_WS();
                                                while (result20 !== null) {
                                                    result7.push(result20);
                                                    var result20 = parse_WS();
                                                }
                                                if (result7 !== null) {
                                                    if (input.substr(pos, 8) === "DISTINCT") {
                                                        var result19 = "DISTINCT";
                                                        pos += 8;
                                                    } else {
                                                        var result19 = null;
                                                        if (reportMatchFailures) {
                                                            matchFailed("\"DISTINCT\"");
                                                        }
                                                    }
                                                    if (result19 !== null) {
                                                        var result17 = result19;
                                                    } else {
                                                        if (input.substr(pos, 8) === "distinct") {
                                                            var result18 = "distinct";
                                                            pos += 8;
                                                        } else {
                                                            var result18 = null;
                                                            if (reportMatchFailures) {
                                                                matchFailed("\"distinct\"");
                                                            }
                                                        }
                                                        if (result18 !== null) {
                                                            var result17 = result18;
                                                        } else {
                                                            var result17 = null;;
                                                        };
                                                    }
                                                    var result8 = result17 !== null ? result17 : '';
                                                    if (result8 !== null) {
                                                        var result9 = [];
                                                        var result16 = parse_WS();
                                                        while (result16 !== null) {
                                                            result9.push(result16);
                                                            var result16 = parse_WS();
                                                        }
                                                        if (result9 !== null) {
                                                            var result10 = parse_ConditionalOrExpression();
                                                            if (result10 !== null) {
                                                                var result11 = [];
                                                                var result15 = parse_WS();
                                                                while (result15 !== null) {
                                                                    result11.push(result15);
                                                                    var result15 = parse_WS();
                                                                }
                                                                if (result11 !== null) {
                                                                    if (input.substr(pos, 1) === ")") {
                                                                        var result12 = ")";
                                                                        pos += 1;
                                                                    } else {
                                                                        var result12 = null;
                                                                        if (reportMatchFailures) {
                                                                            matchFailed("\")\"");
                                                                        }
                                                                    }
                                                                    if (result12 !== null) {
                                                                        var result13 = [];
                                                                        var result14 = parse_WS();
                                                                        while (result14 !== null) {
                                                                            result13.push(result14);
                                                                            var result14 = parse_WS();
                                                                        }
                                                                        if (result13 !== null) {
                                                                            var result2 = [result4, result5, result6, result7, result8, result9, result10, result11, result12, result13];
                                                                        } else {
                                                                            var result2 = null;
                                                                            pos = savedPos1;
                                                                        }
                                                                    } else {
                                                                        var result2 = null;
                                                                        pos = savedPos1;
                                                                    }
                                                                } else {
                                                                    var result2 = null;
                                                                    pos = savedPos1;
                                                                }
                                                            } else {
                                                                var result2 = null;
                                                                pos = savedPos1;
                                                            }
                                                        } else {
                                                            var result2 = null;
                                                            pos = savedPos1;
                                                        }
                                                    } else {
                                                        var result2 = null;
                                                        pos = savedPos1;
                                                    }
                                                } else {
                                                    var result2 = null;
                                                    pos = savedPos1;
                                                }
                                            } else {
                                                var result2 = null;
                                                pos = savedPos1;
                                            }
                                        } else {
                                            var result2 = null;
                                            pos = savedPos1;
                                        }
                                    } else {
                                        var result2 = null;
                                        pos = savedPos1;
                                    }
                                    var result3 = result2 !== null
                                        ? (function(d, e) {
                                        var exp = {};
                                        exp.token = 'expression'
                                        exp.expressionType = 'aggregate'
                                        exp.aggregateType = 'avg'
                                        exp.distinct = (d != "" ? 'DISTINCT' : d);
                                        exp.expression = e

                                        return exp

                                    })(result2[4], result2[6])
                                        : null;
                                    if (result3 !== null) {
                                        var result1 = result3;
                                    } else {
                                        var result1 = null;
                                        pos = savedPos0;
                                    }
                                    if (result1 !== null) {
                                        var result0 = result1;
                                    } else {
                                        var result0 = null;;
                                    };
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[110] Aggregate");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_IRIrefOrFunction() {
                    var cacheKey = 'IRIrefOrFunction@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_IRIref();
                    if (result3 !== null) {
                        var result5 = parse_ArgList();
                        var result4 = result5 !== null ? result5 : '';
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(i, args) {
                        var fcall = {};
                        fcall.token = "expression";
                        fcall.expressionType = 'irireforfunction';
                        fcall.iriref = i;
                        fcall.args = args.value;

                        return fcall;
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[117] IRIrefOrFunction");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_RDFLiteral() {
                    var cacheKey = 'RDFLiteral@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_String();
                    if (result3 !== null) {
                        var result9 = parse_LANGTAG();
                        if (result9 !== null) {
                            var result5 = result9;
                        } else {
                            var savedPos2 = pos;
                            if (input.substr(pos, 2) === "^^") {
                                var result7 = "^^";
                                pos += 2;
                            } else {
                                var result7 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"^^\"");
                                }
                            }
                            if (result7 !== null) {
                                var result8 = parse_IRIref();
                                if (result8 !== null) {
                                    var result6 = [result7, result8];
                                } else {
                                    var result6 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result6 = null;
                                pos = savedPos2;
                            }
                            if (result6 !== null) {
                                var result5 = result6;
                            } else {
                                var result5 = null;;
                            };
                        }
                        var result4 = result5 !== null ? result5 : '';
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(s, e) {
                        if(typeof(e) === "string" && e.length > 0) {
                            return {token:'literal', value:s.value, lang:e.slice(1), type:null}
                        } else {
                            if(typeof(e) === "object") {
                                e.shift(); // remove the '^^' char
                                return {token:'literal', value:s.value, lang:null, type:e[0] }
                            } else {
                                return { token:'literal', value:s.value, lang:null, type:null }
                            }
                        }
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[112] RDFLiteral");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_NumericLiteral() {
                    var cacheKey = 'NumericLiteral@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result3 = parse_NumericLiteralUnsigned();
                    if (result3 !== null) {
                        var result0 = result3;
                    } else {
                        var result2 = parse_NumericLiteralPositive();
                        if (result2 !== null) {
                            var result0 = result2;
                        } else {
                            var result1 = parse_NumericLiteralNegative();
                            if (result1 !== null) {
                                var result0 = result1;
                            } else {
                                var result0 = null;;
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[113] NumericLiteral");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_NumericLiteralUnsigned() {
                    var cacheKey = 'NumericLiteralUnsigned@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result3 = parse_DOUBLE();
                    if (result3 !== null) {
                        var result0 = result3;
                    } else {
                        var result2 = parse_DECIMAL();
                        if (result2 !== null) {
                            var result0 = result2;
                        } else {
                            var result1 = parse_INTEGER();
                            if (result1 !== null) {
                                var result0 = result1;
                            } else {
                                var result0 = null;;
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[114] NumericLiteralUnsigned");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_NumericLiteralPositive() {
                    var cacheKey = 'NumericLiteralPositive@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result3 = parse_DOUBLE_POSITIVE();
                    if (result3 !== null) {
                        var result0 = result3;
                    } else {
                        var result2 = parse_DECIMAL_POSITIVE();
                        if (result2 !== null) {
                            var result0 = result2;
                        } else {
                            var result1 = parse_INTEGER_POSITIVE();
                            if (result1 !== null) {
                                var result0 = result1;
                            } else {
                                var result0 = null;;
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[115] NumericLiteralPositive");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_NumericLiteralNegative() {
                    var cacheKey = 'NumericLiteralNegative@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result3 = parse_DOUBLE_NEGATIVE();
                    if (result3 !== null) {
                        var result0 = result3;
                    } else {
                        var result2 = parse_DECIMAL_NEGATIVE();
                        if (result2 !== null) {
                            var result0 = result2;
                        } else {
                            var result1 = parse_INTEGER_NEGATIVE();
                            if (result1 !== null) {
                                var result0 = result1;
                            } else {
                                var result0 = null;;
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[116] NumericLiteralNegative");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_BooleanLiteral() {
                    var cacheKey = 'BooleanLiteral@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos1 = pos;
                    if (input.substr(pos, 4) === "TRUE") {
                        var result10 = "TRUE";
                        pos += 4;
                    } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"TRUE\"");
                        }
                    }
                    if (result10 !== null) {
                        var result7 = result10;
                    } else {
                        if (input.substr(pos, 4) === "true") {
                            var result9 = "true";
                            pos += 4;
                        } else {
                            var result9 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"true\"");
                            }
                        }
                        if (result9 !== null) {
                            var result7 = result9;
                        } else {
                            var result7 = null;;
                        };
                    }
                    var result8 = result7 !== null
                        ? (function() {
                        var lit = {};
                        lit.token = "literal";
                        lit.lang = null;
                        lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                        lit.value = true;
                        return lit;
                    })()
                        : null;
                    if (result8 !== null) {
                        var result6 = result8;
                    } else {
                        var result6 = null;
                        pos = savedPos1;
                    }
                    if (result6 !== null) {
                        var result0 = result6;
                    } else {
                        var savedPos0 = pos;
                        if (input.substr(pos, 5) === "FALSE") {
                            var result5 = "FALSE";
                            pos += 5;
                        } else {
                            var result5 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"FALSE\"");
                            }
                        }
                        if (result5 !== null) {
                            var result2 = result5;
                        } else {
                            if (input.substr(pos, 5) === "false") {
                                var result4 = "false";
                                pos += 5;
                            } else {
                                var result4 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"false\"");
                                }
                            }
                            if (result4 !== null) {
                                var result2 = result4;
                            } else {
                                var result2 = null;;
                            };
                        }
                        var result3 = result2 !== null
                            ? (function() {
                            var lit = {};
                            lit.token = "literal";
                            lit.lang = null;
                            lit.type = "http://www.w3.org/2001/XMLSchema#boolean";
                            lit.value = false;
                            return lit;
                        })()
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[117] BooleanLiteral");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_String() {
                    var cacheKey = 'String@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos3 = pos;
                    var result11 = parse_STRING_LITERAL_LONG1();
                    var result12 = result11 !== null
                        ? (function(s) { return {token:'string', value:s} })(result11)
                        : null;
                    if (result12 !== null) {
                        var result10 = result12;
                    } else {
                        var result10 = null;
                        pos = savedPos3;
                    }
                    if (result10 !== null) {
                        var result0 = result10;
                    } else {
                        var savedPos2 = pos;
                        var result8 = parse_STRING_LITERAL_LONG2();
                        var result9 = result8 !== null
                            ? (function(s) { return {token:'string', value:s} })(result8)
                            : null;
                        if (result9 !== null) {
                            var result7 = result9;
                        } else {
                            var result7 = null;
                            pos = savedPos2;
                        }
                        if (result7 !== null) {
                            var result0 = result7;
                        } else {
                            var savedPos1 = pos;
                            var result5 = parse_STRING_LITERAL1();
                            var result6 = result5 !== null
                                ? (function(s) { return {token:'string', value:s} })(result5)
                                : null;
                            if (result6 !== null) {
                                var result4 = result6;
                            } else {
                                var result4 = null;
                                pos = savedPos1;
                            }
                            if (result4 !== null) {
                                var result0 = result4;
                            } else {
                                var savedPos0 = pos;
                                var result2 = parse_STRING_LITERAL2();
                                var result3 = result2 !== null
                                    ? (function(s) { return {token:'string', value:s} })(result2)
                                    : null;
                                if (result3 !== null) {
                                    var result1 = result3;
                                } else {
                                    var result1 = null;
                                    pos = savedPos0;
                                }
                                if (result1 !== null) {
                                    var result0 = result1;
                                } else {
                                    var result0 = null;;
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[118] String");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_IRIref() {
                    var cacheKey = 'IRIref@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos1 = pos;
                    var result5 = parse_IRI_REF();
                    var result6 = result5 !== null
                        ? (function(iri) { return {token: 'uri', prefix:null, suffix:null, value:iri} })(result5)
                        : null;
                    if (result6 !== null) {
                        var result4 = result6;
                    } else {
                        var result4 = null;
                        pos = savedPos1;
                    }
                    if (result4 !== null) {
                        var result0 = result4;
                    } else {
                        var savedPos0 = pos;
                        var result2 = parse_PrefixedName();
                        var result3 = result2 !== null
                            ? (function(p) { return p })(result2)
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[119] IRIref");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PrefixedName() {
                    var cacheKey = 'PrefixedName@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos1 = pos;
                    var result5 = parse_PNAME_LN();
                    var result6 = result5 !== null
                        ? (function(p) { return {token: 'uri', prefix:p[0], suffix:p[1], value:null } })(result5)
                        : null;
                    if (result6 !== null) {
                        var result4 = result6;
                    } else {
                        var result4 = null;
                        pos = savedPos1;
                    }
                    if (result4 !== null) {
                        var result0 = result4;
                    } else {
                        var savedPos0 = pos;
                        var result2 = parse_PNAME_NS();
                        var result3 = result2 !== null
                            ? (function(p) { return {token: 'uri', prefix:p, suffix:'', value:null } })(result2)
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[120] PrefixedName");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_BlankNode() {
                    var cacheKey = 'BlankNode@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos1 = pos;
                    var result5 = parse_BLANK_NODE_LABEL();
                    var result6 = result5 !== null
                        ? (function(l) { return {token:'blank', value:l}})(result5)
                        : null;
                    if (result6 !== null) {
                        var result4 = result6;
                    } else {
                        var result4 = null;
                        pos = savedPos1;
                    }
                    if (result4 !== null) {
                        var result0 = result4;
                    } else {
                        var savedPos0 = pos;
                        var result2 = parse_ANON();
                        var result3 = result2 !== null
                            ? (function() { GlobalBlankNodeCounter++; return {token:'blank', value:'_:'+GlobalBlankNodeCounter} })()
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[121] BlankNode");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_IRI_REF() {
                    var cacheKey = 'IRI_REF@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "<") {
                        var result3 = "<";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"<\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        if (input.substr(pos).match(/^[^<>"{}|^`\\]/) !== null) {
                            var result6 = input.charAt(pos);
                            pos++;
                        } else {
                            var result6 = null;
                            if (reportMatchFailures) {
                                matchFailed("[^<>\"{}|^`\\\\]");
                            }
                        }
                        while (result6 !== null) {
                            result4.push(result6);
                            if (input.substr(pos).match(/^[^<>"{}|^`\\]/) !== null) {
                                var result6 = input.charAt(pos);
                                pos++;
                            } else {
                                var result6 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[^<>\"{}|^`\\\\]");
                                }
                            }
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 1) === ">") {
                                var result5 = ">";
                                pos += 1;
                            } else {
                                var result5 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\">\"");
                                }
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(iri_ref) { return iri_ref.join('') })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[122] IRI_REF");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PNAME_NS() {
                    var cacheKey = 'PNAME_NS@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result5 = parse_PN_PREFIX();
                    var result3 = result5 !== null ? result5 : '';
                    if (result3 !== null) {
                        if (input.substr(pos, 1) === ":") {
                            var result4 = ":";
                            pos += 1;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("\":\"");
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(p) { return p })(result1[0])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[123] PNAME_NS");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PNAME_LN() {
                    var cacheKey = 'PNAME_LN@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_PNAME_NS();
                    if (result3 !== null) {
                        var result4 = parse_PN_LOCAL();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(p, s) { return [p, s] })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[124] PNAME_LN");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_BLANK_NODE_LABEL() {
                    var cacheKey = 'BLANK_NODE_LABEL@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 2) === "_:") {
                        var result3 = "_:";
                        pos += 2;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"_:\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_PN_LOCAL();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(l) { return l })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[125] BLANK_NODE_LABEL");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_VAR1() {
                    var cacheKey = 'VAR1@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "?") {
                        var result3 = "?";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"?\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_VARNAME();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(v) { return v })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[126] VAR1");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_VAR2() {
                    var cacheKey = 'VAR2@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "$") {
                        var result3 = "$";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"$\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_VARNAME();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(v) { return v })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[127] VAR2");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_LANGTAG() {
                    var cacheKey = 'LANGTAG@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "@") {
                        var result3 = "@";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"@\"");
                        }
                    }
                    if (result3 !== null) {
                        if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
                            var result10 = input.charAt(pos);
                            pos++;
                        } else {
                            var result10 = null;
                            if (reportMatchFailures) {
                                matchFailed("[a-zA-Z]");
                            }
                        }
                        if (result10 !== null) {
                            var result4 = [];
                            while (result10 !== null) {
                                result4.push(result10);
                                if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
                                    var result10 = input.charAt(pos);
                                    pos++;
                                } else {
                                    var result10 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("[a-zA-Z]");
                                    }
                                }
                            }
                        } else {
                            var result4 = null;
                        }
                        if (result4 !== null) {
                            var result5 = [];
                            var savedPos2 = pos;
                            if (input.substr(pos, 1) === "-") {
                                var result7 = "-";
                                pos += 1;
                            } else {
                                var result7 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"-\"");
                                }
                            }
                            if (result7 !== null) {
                                if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                                    var result9 = input.charAt(pos);
                                    pos++;
                                } else {
                                    var result9 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("[a-zA-Z0-9]");
                                    }
                                }
                                if (result9 !== null) {
                                    var result8 = [];
                                    while (result9 !== null) {
                                        result8.push(result9);
                                        if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                                            var result9 = input.charAt(pos);
                                            pos++;
                                        } else {
                                            var result9 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("[a-zA-Z0-9]");
                                            }
                                        }
                                    }
                                } else {
                                    var result8 = null;
                                }
                                if (result8 !== null) {
                                    var result6 = [result7, result8];
                                } else {
                                    var result6 = null;
                                    pos = savedPos2;
                                }
                            } else {
                                var result6 = null;
                                pos = savedPos2;
                            }
                            while (result6 !== null) {
                                result5.push(result6);
                                var savedPos2 = pos;
                                if (input.substr(pos, 1) === "-") {
                                    var result7 = "-";
                                    pos += 1;
                                } else {
                                    var result7 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\"-\"");
                                    }
                                }
                                if (result7 !== null) {
                                    if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                                        var result9 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        var result9 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("[a-zA-Z0-9]");
                                        }
                                    }
                                    if (result9 !== null) {
                                        var result8 = [];
                                        while (result9 !== null) {
                                            result8.push(result9);
                                            if (input.substr(pos).match(/^[a-zA-Z0-9]/) !== null) {
                                                var result9 = input.charAt(pos);
                                                pos++;
                                            } else {
                                                var result9 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("[a-zA-Z0-9]");
                                                }
                                            }
                                        }
                                    } else {
                                        var result8 = null;
                                    }
                                    if (result8 !== null) {
                                        var result6 = [result7, result8];
                                    } else {
                                        var result6 = null;
                                        pos = savedPos2;
                                    }
                                } else {
                                    var result6 = null;
                                    pos = savedPos2;
                                }
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(a, b) {

                        if(b.length===0) {
                            return ("@"+a.join('')).toLowerCase();
                        } else {
                            return ("@"+a.join('')+"-"+b[0][1].join('')).toLowerCase();
                        }
                    })(result1[1], result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[128] LANGTAG");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_INTEGER() {
                    var cacheKey = 'INTEGER@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    if (input.substr(pos).match(/^[0-9]/) !== null) {
                        var result3 = input.charAt(pos);
                        pos++;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("[0-9]");
                        }
                    }
                    if (result3 !== null) {
                        var result1 = [];
                        while (result3 !== null) {
                            result1.push(result3);
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result3 = input.charAt(pos);
                                pos++;
                            } else {
                                var result3 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                        }
                    } else {
                        var result1 = null;
                    }
                    var result2 = result1 !== null
                        ? (function(d) {
                        var lit = {};
                        lit.token = "literal";
                        lit.lang = null;
                        lit.type = "http://www.w3.org/2001/XMLSchema#integer";
                        lit.value = flattenString(d);
                        return lit;
                    })(result1)
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[129] INTEGER");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DECIMAL() {
                    var cacheKey = 'DECIMAL@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos2 = pos;
                    var savedPos3 = pos;
                    if (input.substr(pos).match(/^[0-9]/) !== null) {
                        var result14 = input.charAt(pos);
                        pos++;
                    } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                            matchFailed("[0-9]");
                        }
                    }
                    if (result14 !== null) {
                        var result10 = [];
                        while (result14 !== null) {
                            result10.push(result14);
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result14 = input.charAt(pos);
                                pos++;
                            } else {
                                var result14 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                        }
                    } else {
                        var result10 = null;
                    }
                    if (result10 !== null) {
                        if (input.substr(pos, 1) === ".") {
                            var result11 = ".";
                            pos += 1;
                        } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                                matchFailed("\".\"");
                            }
                        }
                        if (result11 !== null) {
                            var result12 = [];
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result13 = input.charAt(pos);
                                pos++;
                            } else {
                                var result13 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                            while (result13 !== null) {
                                result12.push(result13);
                                if (input.substr(pos).match(/^[0-9]/) !== null) {
                                    var result13 = input.charAt(pos);
                                    pos++;
                                } else {
                                    var result13 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("[0-9]");
                                    }
                                }
                            }
                            if (result12 !== null) {
                                var result8 = [result10, result11, result12];
                            } else {
                                var result8 = null;
                                pos = savedPos3;
                            }
                        } else {
                            var result8 = null;
                            pos = savedPos3;
                        }
                    } else {
                        var result8 = null;
                        pos = savedPos3;
                    }
                    var result9 = result8 !== null
                        ? (function(a, b, c) {

                        var lit = {};
                        lit.token = "literal";
                        lit.lang = null;
                        lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                        lit.value = flattenString([a,b,c]);
                        return lit;
                    })(result8[0], result8[1], result8[2])
                        : null;
                    if (result9 !== null) {
                        var result7 = result9;
                    } else {
                        var result7 = null;
                        pos = savedPos2;
                    }
                    if (result7 !== null) {
                        var result0 = result7;
                    } else {
                        var savedPos0 = pos;
                        var savedPos1 = pos;
                        if (input.substr(pos, 1) === ".") {
                            var result4 = ".";
                            pos += 1;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("\".\"");
                            }
                        }
                        if (result4 !== null) {
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result6 = input.charAt(pos);
                                pos++;
                            } else {
                                var result6 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                            if (result6 !== null) {
                                var result5 = [];
                                while (result6 !== null) {
                                    result5.push(result6);
                                    if (input.substr(pos).match(/^[0-9]/) !== null) {
                                        var result6 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        var result6 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("[0-9]");
                                        }
                                    }
                                }
                            } else {
                                var result5 = null;
                            }
                            if (result5 !== null) {
                                var result2 = [result4, result5];
                            } else {
                                var result2 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result2 = null;
                            pos = savedPos1;
                        }
                        var result3 = result2 !== null
                            ? (function(a, b) {
                            var lit = {};
                            lit.token = "literal";
                            lit.lang = null;
                            lit.type = "http://www.w3.org/2001/XMLSchema#decimal";
                            lit.value = flattenString([a,b]);
                            return lit;
                        })(result2[0], result2[1])
                            : null;
                        if (result3 !== null) {
                            var result1 = result3;
                        } else {
                            var result1 = null;
                            pos = savedPos0;
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[130] DECIMAL");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DOUBLE() {
                    var cacheKey = 'DOUBLE@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos4 = pos;
                    var savedPos5 = pos;
                    if (input.substr(pos).match(/^[0-9]/) !== null) {
                        var result22 = input.charAt(pos);
                        pos++;
                    } else {
                        var result22 = null;
                        if (reportMatchFailures) {
                            matchFailed("[0-9]");
                        }
                    }
                    if (result22 !== null) {
                        var result17 = [];
                        while (result22 !== null) {
                            result17.push(result22);
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result22 = input.charAt(pos);
                                pos++;
                            } else {
                                var result22 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                        }
                    } else {
                        var result17 = null;
                    }
                    if (result17 !== null) {
                        if (input.substr(pos, 1) === ".") {
                            var result18 = ".";
                            pos += 1;
                        } else {
                            var result18 = null;
                            if (reportMatchFailures) {
                                matchFailed("\".\"");
                            }
                        }
                        if (result18 !== null) {
                            var result19 = [];
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result21 = input.charAt(pos);
                                pos++;
                            } else {
                                var result21 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                            while (result21 !== null) {
                                result19.push(result21);
                                if (input.substr(pos).match(/^[0-9]/) !== null) {
                                    var result21 = input.charAt(pos);
                                    pos++;
                                } else {
                                    var result21 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("[0-9]");
                                    }
                                }
                            }
                            if (result19 !== null) {
                                var result20 = parse_EXPONENT();
                                if (result20 !== null) {
                                    var result15 = [result17, result18, result19, result20];
                                } else {
                                    var result15 = null;
                                    pos = savedPos5;
                                }
                            } else {
                                var result15 = null;
                                pos = savedPos5;
                            }
                        } else {
                            var result15 = null;
                            pos = savedPos5;
                        }
                    } else {
                        var result15 = null;
                        pos = savedPos5;
                    }
                    var result16 = result15 !== null
                        ? (function(a, b, c, e) {
                        var lit = {};
                        lit.token = "literal";
                        lit.lang = null;
                        lit.type = "http://www.w3.org/2001/XMLSchema#double";
                        lit.value = flattenString([a,b,c,e]);
                        return lit;
                    })(result15[0], result15[1], result15[2], result15[3])
                        : null;
                    if (result16 !== null) {
                        var result14 = result16;
                    } else {
                        var result14 = null;
                        pos = savedPos4;
                    }
                    if (result14 !== null) {
                        var result0 = result14;
                    } else {
                        var savedPos2 = pos;
                        var savedPos3 = pos;
                        if (input.substr(pos, 1) === ".") {
                            var result10 = ".";
                            pos += 1;
                        } else {
                            var result10 = null;
                            if (reportMatchFailures) {
                                matchFailed("\".\"");
                            }
                        }
                        if (result10 !== null) {
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result13 = input.charAt(pos);
                                pos++;
                            } else {
                                var result13 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                            if (result13 !== null) {
                                var result11 = [];
                                while (result13 !== null) {
                                    result11.push(result13);
                                    if (input.substr(pos).match(/^[0-9]/) !== null) {
                                        var result13 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        var result13 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("[0-9]");
                                        }
                                    }
                                }
                            } else {
                                var result11 = null;
                            }
                            if (result11 !== null) {
                                var result12 = parse_EXPONENT();
                                if (result12 !== null) {
                                    var result8 = [result10, result11, result12];
                                } else {
                                    var result8 = null;
                                    pos = savedPos3;
                                }
                            } else {
                                var result8 = null;
                                pos = savedPos3;
                            }
                        } else {
                            var result8 = null;
                            pos = savedPos3;
                        }
                        var result9 = result8 !== null
                            ? (function(a, b, c) {
                            var lit = {};
                            lit.token = "literal";
                            lit.lang = null;
                            lit.type = "http://www.w3.org/2001/XMLSchema#double";
                            lit.value = flattenString([a,b,c]);
                            return lit;
                        })(result8[0], result8[1], result8[2])
                            : null;
                        if (result9 !== null) {
                            var result7 = result9;
                        } else {
                            var result7 = null;
                            pos = savedPos2;
                        }
                        if (result7 !== null) {
                            var result0 = result7;
                        } else {
                            var savedPos0 = pos;
                            var savedPos1 = pos;
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result6 = input.charAt(pos);
                                pos++;
                            } else {
                                var result6 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                            if (result6 !== null) {
                                var result4 = [];
                                while (result6 !== null) {
                                    result4.push(result6);
                                    if (input.substr(pos).match(/^[0-9]/) !== null) {
                                        var result6 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        var result6 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("[0-9]");
                                        }
                                    }
                                }
                            } else {
                                var result4 = null;
                            }
                            if (result4 !== null) {
                                var result5 = parse_EXPONENT();
                                if (result5 !== null) {
                                    var result2 = [result4, result5];
                                } else {
                                    var result2 = null;
                                    pos = savedPos1;
                                }
                            } else {
                                var result2 = null;
                                pos = savedPos1;
                            }
                            var result3 = result2 !== null
                                ? (function(a, b) {
                                var lit = {};
                                lit.token = "literal";
                                lit.lang = null;
                                lit.type = "http://www.w3.org/2001/XMLSchema#double";
                                lit.value = flattenString([a,b]);
                                return lit;
                            })(result2[0], result2[1])
                                : null;
                            if (result3 !== null) {
                                var result1 = result3;
                            } else {
                                var result1 = null;
                                pos = savedPos0;
                            }
                            if (result1 !== null) {
                                var result0 = result1;
                            } else {
                                var result0 = null;;
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[131] DOUBLE");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_INTEGER_POSITIVE() {
                    var cacheKey = 'INTEGER_POSITIVE@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "+") {
                        var result3 = "+";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"+\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_INTEGER();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(d) { d.value = "+"+d.value; return d; })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[132] INTEGER_POSITIVE");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DECIMAL_POSITIVE() {
                    var cacheKey = 'DECIMAL_POSITIVE@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "+") {
                        var result3 = "+";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"+\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_DECIMAL();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(d) { d.value = "+"+d.value; return d })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[133] DECIMAL_POSITIVE");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DOUBLE_POSITIVE() {
                    var cacheKey = 'DOUBLE_POSITIVE@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "+") {
                        var result3 = "+";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"+\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_DOUBLE();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(d) { d.value = "+"+d.value; return d })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[134] DOUBLE_POSITIVE");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_INTEGER_NEGATIVE() {
                    var cacheKey = 'INTEGER_NEGATIVE@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "-") {
                        var result3 = "-";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"-\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_INTEGER();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[135] INTEGER_NEGATIVE");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DECIMAL_NEGATIVE() {
                    var cacheKey = 'DECIMAL_NEGATIVE@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "-") {
                        var result3 = "-";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"-\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_DECIMAL();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[136] DECIMAL_NEGATIVE");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_DOUBLE_NEGATIVE() {
                    var cacheKey = 'DOUBLE_NEGATIVE@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "-") {
                        var result3 = "-";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"-\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = parse_DOUBLE();
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(d) { d.value = "-"+d.value; return d; })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[137] DOUBLE_NEGATIVE");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_EXPONENT() {
                    var cacheKey = 'EXPONENT@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos).match(/^[eE]/) !== null) {
                        var result3 = input.charAt(pos);
                        pos++;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("[eE]");
                        }
                    }
                    if (result3 !== null) {
                        if (input.substr(pos).match(/^[+\-]/) !== null) {
                            var result7 = input.charAt(pos);
                            pos++;
                        } else {
                            var result7 = null;
                            if (reportMatchFailures) {
                                matchFailed("[+\\-]");
                            }
                        }
                        var result4 = result7 !== null ? result7 : '';
                        if (result4 !== null) {
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result6 = input.charAt(pos);
                                pos++;
                            } else {
                                var result6 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                            if (result6 !== null) {
                                var result5 = [];
                                while (result6 !== null) {
                                    result5.push(result6);
                                    if (input.substr(pos).match(/^[0-9]/) !== null) {
                                        var result6 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        var result6 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("[0-9]");
                                        }
                                    }
                                }
                            } else {
                                var result5 = null;
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(a, b, c) { return flattenString([a,b,c]) })(result1[0], result1[1], result1[2])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[138] EXPONENT");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_STRING_LITERAL1() {
                    var cacheKey = 'STRING_LITERAL1@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "'") {
                        var result3 = "'";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"'\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
                            var result8 = input.charAt(pos);
                            pos++;
                        } else {
                            var result8 = null;
                            if (reportMatchFailures) {
                                matchFailed("[^'\\\\\\n\\r]");
                            }
                        }
                        if (result8 !== null) {
                            var result6 = result8;
                        } else {
                            var result7 = parse_ECHAR();
                            if (result7 !== null) {
                                var result6 = result7;
                            } else {
                                var result6 = null;;
                            };
                        }
                        while (result6 !== null) {
                            result4.push(result6);
                            if (input.substr(pos).match(/^[^'\\\n\r]/) !== null) {
                                var result8 = input.charAt(pos);
                                pos++;
                            } else {
                                var result8 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[^'\\\\\\n\\r]");
                                }
                            }
                            if (result8 !== null) {
                                var result6 = result8;
                            } else {
                                var result7 = parse_ECHAR();
                                if (result7 !== null) {
                                    var result6 = result7;
                                } else {
                                    var result6 = null;;
                                };
                            }
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 1) === "'") {
                                var result5 = "'";
                                pos += 1;
                            } else {
                                var result5 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"'\"");
                                }
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(content) { return flattenString(content) })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[139] STRING_LITERAL1");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_STRING_LITERAL2() {
                    var cacheKey = 'STRING_LITERAL2@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "\"") {
                        var result3 = "\"";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"\\\"\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
                            var result8 = input.charAt(pos);
                            pos++;
                        } else {
                            var result8 = null;
                            if (reportMatchFailures) {
                                matchFailed("[^\"\\\\\\n\\r]");
                            }
                        }
                        if (result8 !== null) {
                            var result6 = result8;
                        } else {
                            var result7 = parse_ECHAR();
                            if (result7 !== null) {
                                var result6 = result7;
                            } else {
                                var result6 = null;;
                            };
                        }
                        while (result6 !== null) {
                            result4.push(result6);
                            if (input.substr(pos).match(/^[^"\\\n\r]/) !== null) {
                                var result8 = input.charAt(pos);
                                pos++;
                            } else {
                                var result8 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[^\"\\\\\\n\\r]");
                                }
                            }
                            if (result8 !== null) {
                                var result6 = result8;
                            } else {
                                var result7 = parse_ECHAR();
                                if (result7 !== null) {
                                    var result6 = result7;
                                } else {
                                    var result6 = null;;
                                };
                            }
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 1) === "\"") {
                                var result5 = "\"";
                                pos += 1;
                            } else {
                                var result5 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"\\\"\"");
                                }
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(content) { return flattenString(content) })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[140] STRING_LITERAL2");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_STRING_LITERAL_LONG1() {
                    var cacheKey = 'STRING_LITERAL_LONG1@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 3) === "'''") {
                        var result3 = "'''";
                        pos += 3;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"'''\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        if (input.substr(pos).match(/^[^'\\]/) !== null) {
                            var result8 = input.charAt(pos);
                            pos++;
                        } else {
                            var result8 = null;
                            if (reportMatchFailures) {
                                matchFailed("[^'\\\\]");
                            }
                        }
                        if (result8 !== null) {
                            var result6 = result8;
                        } else {
                            var result7 = parse_ECHAR();
                            if (result7 !== null) {
                                var result6 = result7;
                            } else {
                                var result6 = null;;
                            };
                        }
                        while (result6 !== null) {
                            result4.push(result6);
                            if (input.substr(pos).match(/^[^'\\]/) !== null) {
                                var result8 = input.charAt(pos);
                                pos++;
                            } else {
                                var result8 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[^'\\\\]");
                                }
                            }
                            if (result8 !== null) {
                                var result6 = result8;
                            } else {
                                var result7 = parse_ECHAR();
                                if (result7 !== null) {
                                    var result6 = result7;
                                } else {
                                    var result6 = null;;
                                };
                            }
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 3) === "'''") {
                                var result5 = "'''";
                                pos += 3;
                            } else {
                                var result5 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"'''\"");
                                }
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(content) { return flattenString(content) })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[141] STRING_LITERAL_LONG1");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_STRING_LITERAL_LONG2() {
                    var cacheKey = 'STRING_LITERAL_LONG2@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 3) === "\"\"\"") {
                        var result3 = "\"\"\"";
                        pos += 3;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"\\\"\\\"\\\"\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        if (input.substr(pos).match(/^[^"\\]/) !== null) {
                            var result8 = input.charAt(pos);
                            pos++;
                        } else {
                            var result8 = null;
                            if (reportMatchFailures) {
                                matchFailed("[^\"\\\\]");
                            }
                        }
                        if (result8 !== null) {
                            var result6 = result8;
                        } else {
                            var result7 = parse_ECHAR();
                            if (result7 !== null) {
                                var result6 = result7;
                            } else {
                                var result6 = null;;
                            };
                        }
                        while (result6 !== null) {
                            result4.push(result6);
                            if (input.substr(pos).match(/^[^"\\]/) !== null) {
                                var result8 = input.charAt(pos);
                                pos++;
                            } else {
                                var result8 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[^\"\\\\]");
                                }
                            }
                            if (result8 !== null) {
                                var result6 = result8;
                            } else {
                                var result7 = parse_ECHAR();
                                if (result7 !== null) {
                                    var result6 = result7;
                                } else {
                                    var result6 = null;;
                                };
                            }
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 3) === "\"\"\"") {
                                var result5 = "\"\"\"";
                                pos += 3;
                            } else {
                                var result5 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"\\\"\\\"\\\"\"");
                                }
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(content) { return flattenString(content) })(result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[142] STRING_LITERAL_LONG2");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ECHAR() {
                    var cacheKey = 'ECHAR@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    if (input.substr(pos, 1) === "\\") {
                        var result1 = "\\";
                        pos += 1;
                    } else {
                        var result1 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"\\\\\"");
                        }
                    }
                    if (result1 !== null) {
                        if (input.substr(pos).match(/^[tbnrf"']/) !== null) {
                            var result2 = input.charAt(pos);
                            pos++;
                        } else {
                            var result2 = null;
                            if (reportMatchFailures) {
                                matchFailed("[tbnrf\"']");
                            }
                        }
                        if (result2 !== null) {
                            var result0 = [result1, result2];
                        } else {
                            var result0 = null;
                            pos = savedPos0;
                        }
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[143] ECHAR");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_NIL() {
                    var cacheKey = 'NIL@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "(") {
                        var result3 = "(";
                        pos += 1;
                    } else {
                        var result3 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"(\"");
                        }
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result6 = parse_WS();
                        while (result6 !== null) {
                            result4.push(result6);
                            var result6 = parse_WS();
                        }
                        if (result4 !== null) {
                            if (input.substr(pos, 1) === ")") {
                                var result5 = ")";
                                pos += 1;
                            } else {
                                var result5 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\")\"");
                                }
                            }
                            if (result5 !== null) {
                                var result1 = [result3, result4, result5];
                            } else {
                                var result1 = null;
                                pos = savedPos1;
                            }
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function() {

                        return  {token: "triplesnodecollection",
                            triplesContext:[],
                            chainSubject:[{token:'uri', value:"http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"}]};
                    })()
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[144] NIL");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_WS() {
                    var cacheKey = 'WS@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    if (input.substr(pos).match(/^[ ]/) !== null) {
                        var result5 = input.charAt(pos);
                        pos++;
                    } else {
                        var result5 = null;
                        if (reportMatchFailures) {
                            matchFailed("[ ]");
                        }
                    }
                    if (result5 !== null) {
                        var result0 = result5;
                    } else {
                        if (input.substr(pos).match(/^[	]/) !== null) {
                            var result4 = input.charAt(pos);
                            pos++;
                        } else {
                            var result4 = null;
                            if (reportMatchFailures) {
                                matchFailed("[	]");
                            }
                        }
                        if (result4 !== null) {
                            var result0 = result4;
                        } else {
                            if (input.substr(pos).match(/^[\r]/) !== null) {
                                var result3 = input.charAt(pos);
                                pos++;
                            } else {
                                var result3 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[\\r]");
                                }
                            }
                            if (result3 !== null) {
                                var result0 = result3;
                            } else {
                                if (input.substr(pos).match(/^[\n]/) !== null) {
                                    var result2 = input.charAt(pos);
                                    pos++;
                                } else {
                                    var result2 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("[\\n]");
                                    }
                                }
                                if (result2 !== null) {
                                    var result0 = result2;
                                } else {
                                    var result1 = parse_COMMENT();
                                    if (result1 !== null) {
                                        var result0 = result1;
                                    } else {
                                        var result0 = null;;
                                    };
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[145] WS");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_COMMENT() {
                    var cacheKey = 'COMMENT@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    if (input.substr(pos, 1) === "#") {
                        var result1 = "#";
                        pos += 1;
                    } else {
                        var result1 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"#\"");
                        }
                    }
                    if (result1 !== null) {
                        var result2 = [];
                        if (input.substr(pos).match(/^[^\n\r]/) !== null) {
                            var result3 = input.charAt(pos);
                            pos++;
                        } else {
                            var result3 = null;
                            if (reportMatchFailures) {
                                matchFailed("[^\\n\\r]");
                            }
                        }
                        while (result3 !== null) {
                            result2.push(result3);
                            if (input.substr(pos).match(/^[^\n\r]/) !== null) {
                                var result3 = input.charAt(pos);
                                pos++;
                            } else {
                                var result3 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[^\\n\\r]");
                                }
                            }
                        }
                        if (result2 !== null) {
                            var result0 = [result1, result2];
                        } else {
                            var result0 = null;
                            pos = savedPos0;
                        }
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed(" COMMENT");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_ANON() {
                    var cacheKey = 'ANON@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    if (input.substr(pos, 1) === "[") {
                        var result1 = "[";
                        pos += 1;
                    } else {
                        var result1 = null;
                        if (reportMatchFailures) {
                            matchFailed("\"[\"");
                        }
                    }
                    if (result1 !== null) {
                        var result2 = [];
                        var result4 = parse_WS();
                        while (result4 !== null) {
                            result2.push(result4);
                            var result4 = parse_WS();
                        }
                        if (result2 !== null) {
                            if (input.substr(pos, 1) === "]") {
                                var result3 = "]";
                                pos += 1;
                            } else {
                                var result3 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\"]\"");
                                }
                            }
                            if (result3 !== null) {
                                var result0 = [result1, result2, result3];
                            } else {
                                var result0 = null;
                                pos = savedPos0;
                            }
                        } else {
                            var result0 = null;
                            pos = savedPos0;
                        }
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[146] ANON");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PN_CHARS_BASE() {
                    var cacheKey = 'PN_CHARS_BASE@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    if (input.substr(pos).match(/^[A-Z]/) !== null) {
                        var result14 = input.charAt(pos);
                        pos++;
                    } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                            matchFailed("[A-Z]");
                        }
                    }
                    if (result14 !== null) {
                        var result0 = result14;
                    } else {
                        if (input.substr(pos).match(/^[a-z]/) !== null) {
                            var result13 = input.charAt(pos);
                            pos++;
                        } else {
                            var result13 = null;
                            if (reportMatchFailures) {
                                matchFailed("[a-z]");
                            }
                        }
                        if (result13 !== null) {
                            var result0 = result13;
                        } else {
                            if (input.substr(pos).match(/^[\xC0-\xD6]/) !== null) {
                                var result12 = input.charAt(pos);
                                pos++;
                            } else {
                                var result12 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[\\xC0-\\xD6]");
                                }
                            }
                            if (result12 !== null) {
                                var result0 = result12;
                            } else {
                                if (input.substr(pos).match(/^[\xD8-\xF6]/) !== null) {
                                    var result11 = input.charAt(pos);
                                    pos++;
                                } else {
                                    var result11 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("[\\xD8-\\xF6]");
                                    }
                                }
                                if (result11 !== null) {
                                    var result0 = result11;
                                } else {
                                    if (input.substr(pos).match(/^[\xF8-\u02FF]/) !== null) {
                                        var result10 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        var result10 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("[\\xF8-\\u02FF]");
                                        }
                                    }
                                    if (result10 !== null) {
                                        var result0 = result10;
                                    } else {
                                        if (input.substr(pos).match(/^[\u0370-\u037D]/) !== null) {
                                            var result9 = input.charAt(pos);
                                            pos++;
                                        } else {
                                            var result9 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("[\\u0370-\\u037D]");
                                            }
                                        }
                                        if (result9 !== null) {
                                            var result0 = result9;
                                        } else {
                                            if (input.substr(pos).match(/^[\u037F-\u1FFF]/) !== null) {
                                                var result8 = input.charAt(pos);
                                                pos++;
                                            } else {
                                                var result8 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("[\\u037F-\\u1FFF]");
                                                }
                                            }
                                            if (result8 !== null) {
                                                var result0 = result8;
                                            } else {
                                                if (input.substr(pos).match(/^[\u200C-\u200D]/) !== null) {
                                                    var result7 = input.charAt(pos);
                                                    pos++;
                                                } else {
                                                    var result7 = null;
                                                    if (reportMatchFailures) {
                                                        matchFailed("[\\u200C-\\u200D]");
                                                    }
                                                }
                                                if (result7 !== null) {
                                                    var result0 = result7;
                                                } else {
                                                    if (input.substr(pos).match(/^[\u2070-\u218F]/) !== null) {
                                                        var result6 = input.charAt(pos);
                                                        pos++;
                                                    } else {
                                                        var result6 = null;
                                                        if (reportMatchFailures) {
                                                            matchFailed("[\\u2070-\\u218F]");
                                                        }
                                                    }
                                                    if (result6 !== null) {
                                                        var result0 = result6;
                                                    } else {
                                                        if (input.substr(pos).match(/^[\u2C00-\u2FEF]/) !== null) {
                                                            var result5 = input.charAt(pos);
                                                            pos++;
                                                        } else {
                                                            var result5 = null;
                                                            if (reportMatchFailures) {
                                                                matchFailed("[\\u2C00-\\u2FEF]");
                                                            }
                                                        }
                                                        if (result5 !== null) {
                                                            var result0 = result5;
                                                        } else {
                                                            if (input.substr(pos).match(/^[\u3001-\uD7FF]/) !== null) {
                                                                var result4 = input.charAt(pos);
                                                                pos++;
                                                            } else {
                                                                var result4 = null;
                                                                if (reportMatchFailures) {
                                                                    matchFailed("[\\u3001-\\uD7FF]");
                                                                }
                                                            }
                                                            if (result4 !== null) {
                                                                var result0 = result4;
                                                            } else {
                                                                if (input.substr(pos).match(/^[\uF900-\uFDCF]/) !== null) {
                                                                    var result3 = input.charAt(pos);
                                                                    pos++;
                                                                } else {
                                                                    var result3 = null;
                                                                    if (reportMatchFailures) {
                                                                        matchFailed("[\\uF900-\\uFDCF]");
                                                                    }
                                                                }
                                                                if (result3 !== null) {
                                                                    var result0 = result3;
                                                                } else {
                                                                    if (input.substr(pos).match(/^[\uFDF0-\uFFFD]/) !== null) {
                                                                        var result2 = input.charAt(pos);
                                                                        pos++;
                                                                    } else {
                                                                        var result2 = null;
                                                                        if (reportMatchFailures) {
                                                                            matchFailed("[\\uFDF0-\\uFFFD]");
                                                                        }
                                                                    }
                                                                    if (result2 !== null) {
                                                                        var result0 = result2;
                                                                    } else {
                                                                        if (input.substr(pos).match(/^[\u1000-\uEFFF]/) !== null) {
                                                                            var result1 = input.charAt(pos);
                                                                            pos++;
                                                                        } else {
                                                                            var result1 = null;
                                                                            if (reportMatchFailures) {
                                                                                matchFailed("[\\u1000-\\uEFFF]");
                                                                            }
                                                                        }
                                                                        if (result1 !== null) {
                                                                            var result0 = result1;
                                                                        } else {
                                                                            var result0 = null;;
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[147] PN_CHARS_BASE");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PN_CHARS_U() {
                    var cacheKey = 'PN_CHARS_U@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result2 = parse_PN_CHARS_BASE();
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        if (input.substr(pos, 1) === "_") {
                            var result1 = "_";
                            pos += 1;
                        } else {
                            var result1 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"_\"");
                            }
                        }
                        if (result1 !== null) {
                            var result0 = result1;
                        } else {
                            var result0 = null;;
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[148] PN_CHARS_U");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_VARNAME() {
                    var cacheKey = 'VARNAME@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result12 = parse_PN_CHARS_U();
                    if (result12 !== null) {
                        var result3 = result12;
                    } else {
                        if (input.substr(pos).match(/^[0-9]/) !== null) {
                            var result11 = input.charAt(pos);
                            pos++;
                        } else {
                            var result11 = null;
                            if (reportMatchFailures) {
                                matchFailed("[0-9]");
                            }
                        }
                        if (result11 !== null) {
                            var result3 = result11;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result10 = parse_PN_CHARS_U();
                        if (result10 !== null) {
                            var result5 = result10;
                        } else {
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result9 = input.charAt(pos);
                                pos++;
                            } else {
                                var result9 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                            if (result9 !== null) {
                                var result5 = result9;
                            } else {
                                if (input.substr(pos).match(/^[\xB7]/) !== null) {
                                    var result8 = input.charAt(pos);
                                    pos++;
                                } else {
                                    var result8 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("[\\xB7]");
                                    }
                                }
                                if (result8 !== null) {
                                    var result5 = result8;
                                } else {
                                    if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                                        var result7 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        var result7 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("[\\u0300-\\u036F]");
                                        }
                                    }
                                    if (result7 !== null) {
                                        var result5 = result7;
                                    } else {
                                        if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                                            var result6 = input.charAt(pos);
                                            pos++;
                                        } else {
                                            var result6 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("[\\u203F-\\u2040]");
                                            }
                                        }
                                        if (result6 !== null) {
                                            var result5 = result6;
                                        } else {
                                            var result5 = null;;
                                        };
                                    };
                                };
                            };
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var result10 = parse_PN_CHARS_U();
                            if (result10 !== null) {
                                var result5 = result10;
                            } else {
                                if (input.substr(pos).match(/^[0-9]/) !== null) {
                                    var result9 = input.charAt(pos);
                                    pos++;
                                } else {
                                    var result9 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("[0-9]");
                                    }
                                }
                                if (result9 !== null) {
                                    var result5 = result9;
                                } else {
                                    if (input.substr(pos).match(/^[\xB7]/) !== null) {
                                        var result8 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        var result8 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("[\\xB7]");
                                        }
                                    }
                                    if (result8 !== null) {
                                        var result5 = result8;
                                    } else {
                                        if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                                            var result7 = input.charAt(pos);
                                            pos++;
                                        } else {
                                            var result7 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("[\\u0300-\\u036F]");
                                            }
                                        }
                                        if (result7 !== null) {
                                            var result5 = result7;
                                        } else {
                                            if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                                                var result6 = input.charAt(pos);
                                                pos++;
                                            } else {
                                                var result6 = null;
                                                if (reportMatchFailures) {
                                                    matchFailed("[\\u203F-\\u2040]");
                                                }
                                            }
                                            if (result6 !== null) {
                                                var result5 = result6;
                                            } else {
                                                var result5 = null;;
                                            };
                                        };
                                    };
                                };
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(init, rpart) { return init+rpart.join('') })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[149] VARNAME");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PN_CHARS() {
                    var cacheKey = 'PN_CHARS@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var result6 = parse_PN_CHARS_U();
                    if (result6 !== null) {
                        var result0 = result6;
                    } else {
                        if (input.substr(pos, 1) === "-") {
                            var result5 = "-";
                            pos += 1;
                        } else {
                            var result5 = null;
                            if (reportMatchFailures) {
                                matchFailed("\"-\"");
                            }
                        }
                        if (result5 !== null) {
                            var result0 = result5;
                        } else {
                            if (input.substr(pos).match(/^[0-9]/) !== null) {
                                var result4 = input.charAt(pos);
                                pos++;
                            } else {
                                var result4 = null;
                                if (reportMatchFailures) {
                                    matchFailed("[0-9]");
                                }
                            }
                            if (result4 !== null) {
                                var result0 = result4;
                            } else {
                                if (input.substr(pos).match(/^[\xB7]/) !== null) {
                                    var result3 = input.charAt(pos);
                                    pos++;
                                } else {
                                    var result3 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("[\\xB7]");
                                    }
                                }
                                if (result3 !== null) {
                                    var result0 = result3;
                                } else {
                                    if (input.substr(pos).match(/^[\u0300-\u036F]/) !== null) {
                                        var result2 = input.charAt(pos);
                                        pos++;
                                    } else {
                                        var result2 = null;
                                        if (reportMatchFailures) {
                                            matchFailed("[\\u0300-\\u036F]");
                                        }
                                    }
                                    if (result2 !== null) {
                                        var result0 = result2;
                                    } else {
                                        if (input.substr(pos).match(/^[\u203F-\u2040]/) !== null) {
                                            var result1 = input.charAt(pos);
                                            pos++;
                                        } else {
                                            var result1 = null;
                                            if (reportMatchFailures) {
                                                matchFailed("[\\u203F-\\u2040]");
                                            }
                                        }
                                        if (result1 !== null) {
                                            var result0 = result1;
                                        } else {
                                            var result0 = null;;
                                        };
                                    };
                                };
                            };
                        };
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[150] PN_CHARS");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PN_PREFIX() {
                    var cacheKey = 'PN_PREFIX@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result3 = parse_PN_CHARS_BASE();
                    if (result3 !== null) {
                        var result4 = [];
                        var result7 = parse_PN_CHARS();
                        if (result7 !== null) {
                            var result5 = result7;
                        } else {
                            if (input.substr(pos, 1) === ".") {
                                var result6 = ".";
                                pos += 1;
                            } else {
                                var result6 = null;
                                if (reportMatchFailures) {
                                    matchFailed("\".\"");
                                }
                            }
                            if (result6 !== null) {
                                var result5 = result6;
                            } else {
                                var result5 = null;;
                            };
                        }
                        while (result5 !== null) {
                            result4.push(result5);
                            var result7 = parse_PN_CHARS();
                            if (result7 !== null) {
                                var result5 = result7;
                            } else {
                                if (input.substr(pos, 1) === ".") {
                                    var result6 = ".";
                                    pos += 1;
                                } else {
                                    var result6 = null;
                                    if (reportMatchFailures) {
                                        matchFailed("\".\"");
                                    }
                                }
                                if (result6 !== null) {
                                    var result5 = result6;
                                } else {
                                    var result5 = null;;
                                };
                            }
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(base, rest) { if(rest[rest.length-1] == '.'){
                        throw new Error("Wrong PN_PREFIX, cannot finish with '.'")
                    } else {
                        return base + rest.join('');
                    }})(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[151] PN_PREFIX");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function parse_PN_LOCAL() {
                    var cacheKey = 'PN_LOCAL@' + pos;
                    var cachedResult = cache[cacheKey];
                    if (cachedResult) {
                        pos = cachedResult.nextPos;
                        return cachedResult.result;
                    }

                    var savedReportMatchFailures = reportMatchFailures;
                    reportMatchFailures = false;
                    var savedPos0 = pos;
                    var savedPos1 = pos;
                    var result7 = parse_PN_CHARS_U();
                    if (result7 !== null) {
                        var result3 = result7;
                    } else {
                        if (input.substr(pos).match(/^[0-9]/) !== null) {
                            var result6 = input.charAt(pos);
                            pos++;
                        } else {
                            var result6 = null;
                            if (reportMatchFailures) {
                                matchFailed("[0-9]");
                            }
                        }
                        if (result6 !== null) {
                            var result3 = result6;
                        } else {
                            var result3 = null;;
                        };
                    }
                    if (result3 !== null) {
                        var result4 = [];
                        var result5 = parse_PN_CHARS();
                        while (result5 !== null) {
                            result4.push(result5);
                            var result5 = parse_PN_CHARS();
                        }
                        if (result4 !== null) {
                            var result1 = [result3, result4];
                        } else {
                            var result1 = null;
                            pos = savedPos1;
                        }
                    } else {
                        var result1 = null;
                        pos = savedPos1;
                    }
                    var result2 = result1 !== null
                        ? (function(base, rest) {
                        return base + rest.join('');
                    })(result1[0], result1[1])
                        : null;
                    if (result2 !== null) {
                        var result0 = result2;
                    } else {
                        var result0 = null;
                        pos = savedPos0;
                    }
                    reportMatchFailures = savedReportMatchFailures;
                    if (reportMatchFailures && result0 === null) {
                        matchFailed("[152] PN_LOCAL");
                    }

                    cache[cacheKey] = {
                        nextPos: pos,
                        result:  result0
                    };
                    return result0;
                }

                function buildErrorMessage() {
                    function buildExpected(failuresExpected) {
                        failuresExpected.sort();

                        var lastFailure = null;
                        var failuresExpectedUnique = [];
                        for (var i = 0; i < failuresExpected.length; i++) {
                            if (failuresExpected[i] !== lastFailure) {
                                failuresExpectedUnique.push(failuresExpected[i]);
                                lastFailure = failuresExpected[i];
                            }
                        }

                        switch (failuresExpectedUnique.length) {
                            case 0:
                                return 'end of input';
                            case 1:
                                return failuresExpectedUnique[0];
                            default:
                                return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                                    + ' or '
                                    + failuresExpectedUnique[failuresExpectedUnique.length - 1];
                        }
                    }

                    var expected = buildExpected(rightmostMatchFailuresExpected);
                    var actualPos = Math.max(pos, rightmostMatchFailuresPos);
                    var actual = actualPos < input.length
                        ? quote(input.charAt(actualPos))
                        : 'end of input';

                    return 'Expected ' + expected + ' but ' + actual + ' found.';
                }

                function computeErrorPosition() {
                    /*
                     * The first idea was to use |String.split| to break the input up to the
                     * error position along newlines and derive the line and column from
                     * there. However IE's |split| implementation is so broken that it was
                     * enough to prevent it.
                     */

                    var line = 1;
                    var column = 1;
                    var seenCR = false;

                    for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
                        var ch = input.charAt(i);
                        if (ch === '\n') {
                            if (!seenCR) { line++; }
                            column = 1;
                            seenCR = false;
                        } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
                            line++;
                            column = 1;
                            seenCR = true;
                        } else {
                            column++;
                            seenCR = false;
                        }
                    }

                    return { line: line, column: column };
                }



                var flattenString = function(arrs) {

                    var acum ="";

                    for(var i=0; i< arrs.length; i++) {

                        if(typeof(arrs[i])==='string') {

                            acum = acum + arrs[i];

                        } else {

                            acum = acum + arrs[i].join('');

                        }

                    }



                    return acum;

                }





                var GlobalBlankNodeCounter = 0;



                var prefixes = {};



                var registerPrefix = function(prefix, uri) {

                    prefixes[prefix] = uri;

                }



                var registerDefaultPrefix = function(uri) {

                    prefixes[null] = uri;

                }



                var arrayToString = function(array) {

                    var tmp = "";

                    for(var i=0; i<array.length; i++) {

                        tmp = tmp + array[i];

                    }



                    return tmp.toUpperCase();

                }



                var result = parseFunctions[startRule]();

                /*
                 * The parser is now in one of the following three states:
                 *
                 * 1. The parser successfully parsed the whole input.
                 *
                 *    - |result !== null|
                 *    - |pos === input.length|
                 *    - |rightmostMatchFailuresExpected| may or may not contain something
                 *
                 * 2. The parser successfully parsed only a part of the input.
                 *
                 *    - |result !== null|
                 *    - |pos < input.length|
                 *    - |rightmostMatchFailuresExpected| may or may not contain something
                 *
                 * 3. The parser did not successfully parse any part of the input.
                 *
                 *   - |result === null|
                 *   - |pos === 0|
                 *   - |rightmostMatchFailuresExpected| contains at least one failure
                 *
                 * All code following this comment (including called functions) must
                 * handle these states.
                 */
                if (result === null || pos !== input.length) {
                    var errorPosition = computeErrorPosition();
                    var errorMsg = buildErrorMessage();
                    //console.log("ERROR IN SPARQL PARSER", errorMsg, errorPosition);
                    throw new this.SyntaxError(
                        errorMsg,
                        errorPosition.line,
                        errorPosition.column
                    );
                }

                return result;
            },

            /* Returns the parser source code. */
            toSource: function() { return this._source; }
        };

        /* Thrown when a parser encounters a syntax error. */

        result.SyntaxError = function(message, line, column) {
            this.name = 'SyntaxError';
            this.message = message;
            this.line = line;
            this.column = column;
        };

        result.SyntaxError.prototype = Error.prototype;

        return result;
    })();
    return SparqlParser;
})